# Simple Dockerfile for Dodo Payments that doesn't require SQLx offline mode
FROM rust:latest as builder

WORKDIR /app

# Install a PostgreSQL client (needed for SQLx)
RUN apt-get update && apt-get install -y postgresql-client

# Copy manifests first (better caching)
COPY Cargo.toml Cargo.lock ./

# Create a dummy src directory with minimal content to build dependencies
RUN mkdir -p src && \
    echo 'fn main() { println!("Dummy build"); }' > src/main.rs && \
    echo 'pub mod config; pub mod handlers; pub mod middleware; pub mod models; pub mod utils;' > src/lib.rs && \
    mkdir -p src/config src/handlers src/middleware src/models src/utils && \
    touch src/config/mod.rs src/handlers/mod.rs src/middleware/mod.rs src/models/mod.rs src/utils/mod.rs && \
    # Important: disable compile-time SQL verification
    SQLX_OFFLINE=false cargo build --release && \
    rm -rf src

# Copy real source code
COPY src ./src/
COPY migrations ./migrations/
COPY sqlx-data.json ./sqlx-data.json

# Turn OFF SQLx offline mode - we'll connect to the real database
ENV SQLX_OFFLINE=false

# Build the application
RUN cargo build --release

# Runtime stage
FROM debian:bullseye-slim

WORKDIR /app

# Install PostgreSQL client and other dependencies
RUN apt-get update && \
    apt-get install -y ca-certificates tzdata libpq-dev curl && \
    rm -rf /var/lib/apt/lists/*

# Copy the binary from the build stage
COPY --from=builder /app/target/release/dodo-payments /app/dodo-payments

# Copy migrations and other necessary files
COPY migrations /app/migrations
COPY jwt_secret.txt /app/jwt_secret.txt

# Set environment variables
ENV SERVER_ADDR=0.0.0.0:8080
ENV RUST_LOG=info

# Expose the port
EXPOSE 8080

# Run the binary
CMD ["/app/dodo-payments"]
