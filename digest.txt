Directory structure:
└── dodo-payments/
    ├── README.md
    ├── API.md
    ├── Cargo.toml
    ├── Dockerfile
    ├── PRODUCTION.md
    ├── SETUP.md
    ├── TESTING.md
    ├── backup-db.sh
    ├── debug_token.sh
    ├── docker-compose.prod.yml
    ├── docker-compose.yml
    ├── health-check.sh
    ├── init-db.sh
    ├── profile_response.json
    ├── restore-db.sh
    ├── sqlx-data.json
    ├── start.sh
    ├── test_api.sh
    ├── test_api_fixed.sh
    ├── test_api_improved.sh
    ├── test_api_no_auth.sh
    ├── test_api_simple.sh
    ├── test_endpoint.sh
    ├── test_fixed_token.sh
    ├── token.txt
    ├── token_compact_test.sh
    ├── token_debug.sh
    ├── token_raw_test.sh
    ├── token_response.json
    ├── token_test.sh
    ├── wait-for-db.sh
    ├── .env.template
    ├── migrations/
    │   ├── 20250521000001_initial_schema.sql
    │   ├── 20250521000002_sample_data.sql
    │   ├── 20250521110000_create_initial_schema.sql
    │   └── schema.sql
    ├── postgres-data/
    │   ├── PG_VERSION
    │   ├── pg_hba.conf
    │   ├── pg_ident.conf
    │   ├── postgresql.auto.conf
    │   ├── postgresql.conf
    │   ├── postmaster.opts
    │   ├── base/
    │   │   ├── 1/
    │   │   │   ├── 112
    │   │   │   ├── 113
    │   │   │   ├── 1247
    │   │   │   ├── 1247_fsm
    │   │   │   ├── 1247_vm
    │   │   │   ├── 1249
    │   │   │   ├── 1249_fsm
    │   │   │   ├── 1249_vm
    │   │   │   ├── 1255
    │   │   │   ├── 1255_fsm
    │   │   │   ├── 1255_vm
    │   │   │   ├── 1259
    │   │   │   ├── 1259_fsm
    │   │   │   ├── 1259_vm
    │   │   │   ├── 13318
    │   │   │   ├── 13318_fsm
    │   │   │   ├── 13318_vm
    │   │   │   ├── 13320
    │   │   │   ├── 13322
    │   │   │   ├── 13323
    │   │   │   ├── 13323_fsm
    │   │   │   ├── 13323_vm
    │   │   │   ├── 13325
    │   │   │   ├── 13327
    │   │   │   ├── 13328
    │   │   │   ├── 13328_fsm
    │   │   │   ├── 13328_vm
    │   │   │   ├── 13330
    │   │   │   ├── 13332
    │   │   │   ├── 13333
    │   │   │   ├── 13333_fsm
    │   │   │   ├── 13333_vm
    │   │   │   ├── 13335
    │   │   │   ├── 13337
    │   │   │   ├── 1417
    │   │   │   ├── 1418
    │   │   │   ├── 174
    │   │   │   ├── 175
    │   │   │   ├── 2187
    │   │   │   ├── 2224
    │   │   │   ├── 2328
    │   │   │   ├── 2336
    │   │   │   ├── 2337
    │   │   │   ├── 2579
    │   │   │   ├── 2600
    │   │   │   ├── 2600_fsm
    │   │   │   ├── 2600_vm
    │   │   │   ├── 2601
    │   │   │   ├── 2601_fsm
    │   │   │   ├── 2601_vm
    │   │   │   ├── 2602
    │   │   │   ├── 2602_fsm
    │   │   │   ├── 2602_vm
    │   │   │   ├── 2603
    │   │   │   ├── 2603_fsm
    │   │   │   ├── 2603_vm
    │   │   │   ├── 2604
    │   │   │   ├── 2605
    │   │   │   ├── 2605_fsm
    │   │   │   ├── 2605_vm
    │   │   │   ├── 2606
    │   │   │   ├── 2606_fsm
    │   │   │   ├── 2606_vm
    │   │   │   ├── 2607
    │   │   │   ├── 2607_fsm
    │   │   │   ├── 2607_vm
    │   │   │   ├── 2608
    │   │   │   ├── 2608_fsm
    │   │   │   ├── 2608_vm
    │   │   │   ├── 2609
    │   │   │   ├── 2609_fsm
    │   │   │   ├── 2609_vm
    │   │   │   ├── 2610
    │   │   │   ├── 2610_fsm
    │   │   │   ├── 2610_vm
    │   │   │   ├── 2611
    │   │   │   ├── 2612
    │   │   │   ├── 2612_fsm
    │   │   │   ├── 2612_vm
    │   │   │   ├── 2613
    │   │   │   ├── 2615
    │   │   │   ├── 2615_fsm
    │   │   │   ├── 2615_vm
    │   │   │   ├── 2616
    │   │   │   ├── 2616_fsm
    │   │   │   ├── 2616_vm
    │   │   │   ├── 2617
    │   │   │   ├── 2617_fsm
    │   │   │   ├── 2617_vm
    │   │   │   ├── 2618
    │   │   │   ├── 2618_fsm
    │   │   │   ├── 2618_vm
    │   │   │   ├── 2619
    │   │   │   ├── 2619_fsm
    │   │   │   ├── 2619_vm
    │   │   │   ├── 2620
    │   │   │   ├── 2650
    │   │   │   ├── 2651
    │   │   │   ├── 2652
    │   │   │   ├── 2653
    │   │   │   ├── 2654
    │   │   │   ├── 2655
    │   │   │   ├── 2656
    │   │   │   ├── 2657
    │   │   │   ├── 2658
    │   │   │   ├── 2659
    │   │   │   ├── 2660
    │   │   │   ├── 2661
    │   │   │   ├── 2662
    │   │   │   ├── 2663
    │   │   │   ├── 2664
    │   │   │   ├── 2665
    │   │   │   ├── 2666
    │   │   │   ├── 2667
    │   │   │   ├── 2668
    │   │   │   ├── 2669
    │   │   │   ├── 2670
    │   │   │   ├── 2673
    │   │   │   ├── 2674
    │   │   │   ├── 2675
    │   │   │   ├── 2678
    │   │   │   ├── 2679
    │   │   │   ├── 2680
    │   │   │   ├── 2681
    │   │   │   ├── 2682
    │   │   │   ├── 2683
    │   │   │   ├── 2684
    │   │   │   ├── 2685
    │   │   │   ├── 2686
    │   │   │   ├── 2687
    │   │   │   ├── 2688
    │   │   │   ├── 2689
    │   │   │   ├── 2690
    │   │   │   ├── 2691
    │   │   │   ├── 2692
    │   │   │   ├── 2693
    │   │   │   ├── 2696
    │   │   │   ├── 2699
    │   │   │   ├── 2701
    │   │   │   ├── 2702
    │   │   │   ├── 2703
    │   │   │   ├── 2704
    │   │   │   ├── 2753
    │   │   │   ├── 2753_fsm
    │   │   │   ├── 2753_vm
    │   │   │   ├── 2754
    │   │   │   ├── 2755
    │   │   │   ├── 2756
    │   │   │   ├── 2757
    │   │   │   ├── 2830
    │   │   │   ├── 2831
    │   │   │   ├── 2832
    │   │   │   ├── 2833
    │   │   │   ├── 2834
    │   │   │   ├── 2835
    │   │   │   ├── 2836
    │   │   │   ├── 2837
    │   │   │   ├── 2838
    │   │   │   ├── 2838_fsm
    │   │   │   ├── 2838_vm
    │   │   │   ├── 2839
    │   │   │   ├── 2840
    │   │   │   ├── 2840_fsm
    │   │   │   ├── 2840_vm
    │   │   │   ├── 2841
    │   │   │   ├── 2995
    │   │   │   ├── 2996
    │   │   │   ├── 3079
    │   │   │   ├── 3079_fsm
    │   │   │   ├── 3079_vm
    │   │   │   ├── 3080
    │   │   │   ├── 3081
    │   │   │   ├── 3085
    │   │   │   ├── 3118
    │   │   │   ├── 3119
    │   │   │   ├── 3164
    │   │   │   ├── 3256
    │   │   │   ├── 3257
    │   │   │   ├── 3258
    │   │   │   ├── 3350
    │   │   │   ├── 3351
    │   │   │   ├── 3379
    │   │   │   ├── 3380
    │   │   │   ├── 3381
    │   │   │   ├── 3394
    │   │   │   ├── 3394_fsm
    │   │   │   ├── 3394_vm
    │   │   │   ├── 3395
    │   │   │   ├── 3429
    │   │   │   ├── 3430
    │   │   │   ├── 3431
    │   │   │   ├── 3433
    │   │   │   ├── 3439
    │   │   │   ├── 3440
    │   │   │   ├── 3455
    │   │   │   ├── 3456
    │   │   │   ├── 3456_fsm
    │   │   │   ├── 3456_vm
    │   │   │   ├── 3466
    │   │   │   ├── 3467
    │   │   │   ├── 3468
    │   │   │   ├── 3501
    │   │   │   ├── 3502
    │   │   │   ├── 3503
    │   │   │   ├── 3534
    │   │   │   ├── 3541
    │   │   │   ├── 3541_fsm
    │   │   │   ├── 3541_vm
    │   │   │   ├── 3542
    │   │   │   ├── 3574
    │   │   │   ├── 3575
    │   │   │   ├── 3576
    │   │   │   ├── 3596
    │   │   │   ├── 3597
    │   │   │   ├── 3598
    │   │   │   ├── 3599
    │   │   │   ├── 3600
    │   │   │   ├── 3600_fsm
    │   │   │   ├── 3600_vm
    │   │   │   ├── 3601
    │   │   │   ├── 3601_fsm
    │   │   │   ├── 3601_vm
    │   │   │   ├── 3602
    │   │   │   ├── 3602_fsm
    │   │   │   ├── 3602_vm
    │   │   │   ├── 3603
    │   │   │   ├── 3603_fsm
    │   │   │   ├── 3603_vm
    │   │   │   ├── 3604
    │   │   │   ├── 3605
    │   │   │   ├── 3606
    │   │   │   ├── 3607
    │   │   │   ├── 3608
    │   │   │   ├── 3609
    │   │   │   ├── 3712
    │   │   │   ├── 3764
    │   │   │   ├── 3764_fsm
    │   │   │   ├── 3764_vm
    │   │   │   ├── 3766
    │   │   │   ├── 3767
    │   │   │   ├── 3997
    │   │   │   ├── 4143
    │   │   │   ├── 4144
    │   │   │   ├── 4145
    │   │   │   ├── 4146
    │   │   │   ├── 4147
    │   │   │   ├── 4148
    │   │   │   ├── 4149
    │   │   │   ├── 4150
    │   │   │   ├── 4151
    │   │   │   ├── 4152
    │   │   │   ├── 4153
    │   │   │   ├── 4154
    │   │   │   ├── 4155
    │   │   │   ├── 4156
    │   │   │   ├── 4157
    │   │   │   ├── 4158
    │   │   │   ├── 4159
    │   │   │   ├── 4160
    │   │   │   ├── 4161
    │   │   │   ├── 4162
    │   │   │   ├── 4163
    │   │   │   ├── 4164
    │   │   │   ├── 4165
    │   │   │   ├── 4166
    │   │   │   ├── 4167
    │   │   │   ├── 4168
    │   │   │   ├── 4169
    │   │   │   ├── 4170
    │   │   │   ├── 4171
    │   │   │   ├── 4172
    │   │   │   ├── 4173
    │   │   │   ├── 4174
    │   │   │   ├── 5002
    │   │   │   ├── 548
    │   │   │   ├── 549
    │   │   │   ├── 6102
    │   │   │   ├── 6104
    │   │   │   ├── 6106
    │   │   │   ├── 6110
    │   │   │   ├── 6111
    │   │   │   ├── 6112
    │   │   │   ├── 6113
    │   │   │   ├── 6117
    │   │   │   ├── 826
    │   │   │   ├── 827
    │   │   │   ├── 828
    │   │   │   └── PG_VERSION
    │   │   ├── 13467/
    │   │   │   ├── 112
    │   │   │   ├── 113
    │   │   │   ├── 1247
    │   │   │   ├── 1247_fsm
    │   │   │   ├── 1247_vm
    │   │   │   ├── 1249
    │   │   │   ├── 1249_fsm
    │   │   │   ├── 1249_vm
    │   │   │   ├── 1255
    │   │   │   ├── 1255_fsm
    │   │   │   ├── 1255_vm
    │   │   │   ├── 1259
    │   │   │   ├── 1259_fsm
    │   │   │   ├── 1259_vm
    │   │   │   ├── 13318
    │   │   │   ├── 13318_fsm
    │   │   │   ├── 13318_vm
    │   │   │   ├── 13320
    │   │   │   ├── 13322
    │   │   │   ├── 13323
    │   │   │   ├── 13323_fsm
    │   │   │   ├── 13323_vm
    │   │   │   ├── 13325
    │   │   │   ├── 13327
    │   │   │   ├── 13328
    │   │   │   ├── 13328_fsm
    │   │   │   ├── 13328_vm
    │   │   │   ├── 13330
    │   │   │   ├── 13332
    │   │   │   ├── 13333
    │   │   │   ├── 13333_fsm
    │   │   │   ├── 13333_vm
    │   │   │   ├── 13335
    │   │   │   ├── 13337
    │   │   │   ├── 1417
    │   │   │   ├── 1418
    │   │   │   ├── 174
    │   │   │   ├── 175
    │   │   │   ├── 2187
    │   │   │   ├── 2224
    │   │   │   ├── 2328
    │   │   │   ├── 2336
    │   │   │   ├── 2337
    │   │   │   ├── 2579
    │   │   │   ├── 2600
    │   │   │   ├── 2600_fsm
    │   │   │   ├── 2600_vm
    │   │   │   ├── 2601
    │   │   │   ├── 2601_fsm
    │   │   │   ├── 2601_vm
    │   │   │   ├── 2602
    │   │   │   ├── 2602_fsm
    │   │   │   ├── 2602_vm
    │   │   │   ├── 2603
    │   │   │   ├── 2603_fsm
    │   │   │   ├── 2603_vm
    │   │   │   ├── 2604
    │   │   │   ├── 2605
    │   │   │   ├── 2605_fsm
    │   │   │   ├── 2605_vm
    │   │   │   ├── 2606
    │   │   │   ├── 2606_fsm
    │   │   │   ├── 2606_vm
    │   │   │   ├── 2607
    │   │   │   ├── 2607_fsm
    │   │   │   ├── 2607_vm
    │   │   │   ├── 2608
    │   │   │   ├── 2608_fsm
    │   │   │   ├── 2608_vm
    │   │   │   ├── 2609
    │   │   │   ├── 2609_fsm
    │   │   │   ├── 2609_vm
    │   │   │   ├── 2610
    │   │   │   ├── 2610_fsm
    │   │   │   ├── 2610_vm
    │   │   │   ├── 2611
    │   │   │   ├── 2612
    │   │   │   ├── 2612_fsm
    │   │   │   ├── 2612_vm
    │   │   │   ├── 2613
    │   │   │   ├── 2615
    │   │   │   ├── 2615_fsm
    │   │   │   ├── 2615_vm
    │   │   │   ├── 2616
    │   │   │   ├── 2616_fsm
    │   │   │   ├── 2616_vm
    │   │   │   ├── 2617
    │   │   │   ├── 2617_fsm
    │   │   │   ├── 2617_vm
    │   │   │   ├── 2618
    │   │   │   ├── 2618_fsm
    │   │   │   ├── 2618_vm
    │   │   │   ├── 2619
    │   │   │   ├── 2619_fsm
    │   │   │   ├── 2619_vm
    │   │   │   ├── 2620
    │   │   │   ├── 2650
    │   │   │   ├── 2651
    │   │   │   ├── 2652
    │   │   │   ├── 2653
    │   │   │   ├── 2654
    │   │   │   ├── 2655
    │   │   │   ├── 2656
    │   │   │   ├── 2657
    │   │   │   ├── 2658
    │   │   │   ├── 2659
    │   │   │   ├── 2660
    │   │   │   ├── 2661
    │   │   │   ├── 2662
    │   │   │   ├── 2663
    │   │   │   ├── 2664
    │   │   │   ├── 2665
    │   │   │   ├── 2666
    │   │   │   ├── 2667
    │   │   │   ├── 2668
    │   │   │   ├── 2669
    │   │   │   ├── 2670
    │   │   │   ├── 2673
    │   │   │   ├── 2674
    │   │   │   ├── 2675
    │   │   │   ├── 2678
    │   │   │   ├── 2679
    │   │   │   ├── 2680
    │   │   │   ├── 2681
    │   │   │   ├── 2682
    │   │   │   ├── 2683
    │   │   │   ├── 2684
    │   │   │   ├── 2685
    │   │   │   ├── 2686
    │   │   │   ├── 2687
    │   │   │   ├── 2688
    │   │   │   ├── 2689
    │   │   │   ├── 2690
    │   │   │   ├── 2691
    │   │   │   ├── 2692
    │   │   │   ├── 2693
    │   │   │   ├── 2696
    │   │   │   ├── 2699
    │   │   │   ├── 2701
    │   │   │   ├── 2702
    │   │   │   ├── 2703
    │   │   │   ├── 2704
    │   │   │   ├── 2753
    │   │   │   ├── 2753_fsm
    │   │   │   ├── 2753_vm
    │   │   │   ├── 2754
    │   │   │   ├── 2755
    │   │   │   ├── 2756
    │   │   │   ├── 2757
    │   │   │   ├── 2830
    │   │   │   ├── 2831
    │   │   │   ├── 2832
    │   │   │   ├── 2833
    │   │   │   ├── 2834
    │   │   │   ├── 2835
    │   │   │   ├── 2836
    │   │   │   ├── 2837
    │   │   │   ├── 2838
    │   │   │   ├── 2838_fsm
    │   │   │   ├── 2838_vm
    │   │   │   ├── 2839
    │   │   │   ├── 2840
    │   │   │   ├── 2840_fsm
    │   │   │   ├── 2840_vm
    │   │   │   ├── 2841
    │   │   │   ├── 2995
    │   │   │   ├── 2996
    │   │   │   ├── 3079
    │   │   │   ├── 3079_fsm
    │   │   │   ├── 3079_vm
    │   │   │   ├── 3080
    │   │   │   ├── 3081
    │   │   │   ├── 3085
    │   │   │   ├── 3118
    │   │   │   ├── 3119
    │   │   │   ├── 3164
    │   │   │   ├── 3256
    │   │   │   ├── 3257
    │   │   │   ├── 3258
    │   │   │   ├── 3350
    │   │   │   ├── 3351
    │   │   │   ├── 3379
    │   │   │   ├── 3380
    │   │   │   ├── 3381
    │   │   │   ├── 3394
    │   │   │   ├── 3394_fsm
    │   │   │   ├── 3394_vm
    │   │   │   ├── 3395
    │   │   │   ├── 3429
    │   │   │   ├── 3430
    │   │   │   ├── 3431
    │   │   │   ├── 3433
    │   │   │   ├── 3439
    │   │   │   ├── 3440
    │   │   │   ├── 3455
    │   │   │   ├── 3456
    │   │   │   ├── 3456_fsm
    │   │   │   ├── 3456_vm
    │   │   │   ├── 3466
    │   │   │   ├── 3467
    │   │   │   ├── 3468
    │   │   │   ├── 3501
    │   │   │   ├── 3502
    │   │   │   ├── 3503
    │   │   │   ├── 3534
    │   │   │   ├── 3541
    │   │   │   ├── 3541_fsm
    │   │   │   ├── 3541_vm
    │   │   │   ├── 3542
    │   │   │   ├── 3574
    │   │   │   ├── 3575
    │   │   │   ├── 3576
    │   │   │   ├── 3596
    │   │   │   ├── 3597
    │   │   │   ├── 3598
    │   │   │   ├── 3599
    │   │   │   ├── 3600
    │   │   │   ├── 3600_fsm
    │   │   │   ├── 3600_vm
    │   │   │   ├── 3601
    │   │   │   ├── 3601_fsm
    │   │   │   ├── 3601_vm
    │   │   │   ├── 3602
    │   │   │   ├── 3602_fsm
    │   │   │   ├── 3602_vm
    │   │   │   ├── 3603
    │   │   │   ├── 3603_fsm
    │   │   │   ├── 3603_vm
    │   │   │   ├── 3604
    │   │   │   ├── 3605
    │   │   │   ├── 3606
    │   │   │   ├── 3607
    │   │   │   ├── 3608
    │   │   │   ├── 3609
    │   │   │   ├── 3712
    │   │   │   ├── 3764
    │   │   │   ├── 3764_fsm
    │   │   │   ├── 3764_vm
    │   │   │   ├── 3766
    │   │   │   ├── 3767
    │   │   │   ├── 3997
    │   │   │   ├── 4143
    │   │   │   ├── 4144
    │   │   │   ├── 4145
    │   │   │   ├── 4146
    │   │   │   ├── 4147
    │   │   │   ├── 4148
    │   │   │   ├── 4149
    │   │   │   ├── 4150
    │   │   │   ├── 4151
    │   │   │   ├── 4152
    │   │   │   ├── 4153
    │   │   │   ├── 4154
    │   │   │   ├── 4155
    │   │   │   ├── 4156
    │   │   │   ├── 4157
    │   │   │   ├── 4158
    │   │   │   ├── 4159
    │   │   │   ├── 4160
    │   │   │   ├── 4161
    │   │   │   ├── 4162
    │   │   │   ├── 4163
    │   │   │   ├── 4164
    │   │   │   ├── 4165
    │   │   │   ├── 4166
    │   │   │   ├── 4167
    │   │   │   ├── 4168
    │   │   │   ├── 4169
    │   │   │   ├── 4170
    │   │   │   ├── 4171
    │   │   │   ├── 4172
    │   │   │   ├── 4173
    │   │   │   ├── 4174
    │   │   │   ├── 5002
    │   │   │   ├── 548
    │   │   │   ├── 549
    │   │   │   ├── 6102
    │   │   │   ├── 6104
    │   │   │   ├── 6106
    │   │   │   ├── 6110
    │   │   │   ├── 6111
    │   │   │   ├── 6112
    │   │   │   ├── 6113
    │   │   │   ├── 6117
    │   │   │   ├── 826
    │   │   │   ├── 827
    │   │   │   ├── 828
    │   │   │   └── PG_VERSION
    │   │   ├── 13468/
    │   │   │   ├── 112
    │   │   │   ├── 113
    │   │   │   ├── 1247
    │   │   │   ├── 1247_fsm
    │   │   │   ├── 1247_vm
    │   │   │   ├── 1249
    │   │   │   ├── 1249_fsm
    │   │   │   ├── 1249_vm
    │   │   │   ├── 1255
    │   │   │   ├── 1255_fsm
    │   │   │   ├── 1255_vm
    │   │   │   ├── 1259
    │   │   │   ├── 1259_fsm
    │   │   │   ├── 1259_vm
    │   │   │   ├── 13318
    │   │   │   ├── 13318_fsm
    │   │   │   ├── 13318_vm
    │   │   │   ├── 13320
    │   │   │   ├── 13322
    │   │   │   ├── 13323
    │   │   │   ├── 13323_fsm
    │   │   │   ├── 13323_vm
    │   │   │   ├── 13325
    │   │   │   ├── 13327
    │   │   │   ├── 13328
    │   │   │   ├── 13328_fsm
    │   │   │   ├── 13328_vm
    │   │   │   ├── 13330
    │   │   │   ├── 13332
    │   │   │   ├── 13333
    │   │   │   ├── 13333_fsm
    │   │   │   ├── 13333_vm
    │   │   │   ├── 13335
    │   │   │   ├── 13337
    │   │   │   ├── 1417
    │   │   │   ├── 1418
    │   │   │   ├── 174
    │   │   │   ├── 175
    │   │   │   ├── 2187
    │   │   │   ├── 2224
    │   │   │   ├── 2328
    │   │   │   ├── 2336
    │   │   │   ├── 2337
    │   │   │   ├── 2579
    │   │   │   ├── 2600
    │   │   │   ├── 2600_fsm
    │   │   │   ├── 2600_vm
    │   │   │   ├── 2601
    │   │   │   ├── 2601_fsm
    │   │   │   ├── 2601_vm
    │   │   │   ├── 2602
    │   │   │   ├── 2602_fsm
    │   │   │   ├── 2602_vm
    │   │   │   ├── 2603
    │   │   │   ├── 2603_fsm
    │   │   │   ├── 2603_vm
    │   │   │   ├── 2604
    │   │   │   ├── 2605
    │   │   │   ├── 2605_fsm
    │   │   │   ├── 2605_vm
    │   │   │   ├── 2606
    │   │   │   ├── 2606_fsm
    │   │   │   ├── 2606_vm
    │   │   │   ├── 2607
    │   │   │   ├── 2607_fsm
    │   │   │   ├── 2607_vm
    │   │   │   ├── 2608
    │   │   │   ├── 2608_fsm
    │   │   │   ├── 2608_vm
    │   │   │   ├── 2609
    │   │   │   ├── 2609_fsm
    │   │   │   ├── 2609_vm
    │   │   │   ├── 2610
    │   │   │   ├── 2610_fsm
    │   │   │   ├── 2610_vm
    │   │   │   ├── 2611
    │   │   │   ├── 2612
    │   │   │   ├── 2612_fsm
    │   │   │   ├── 2612_vm
    │   │   │   ├── 2613
    │   │   │   ├── 2615
    │   │   │   ├── 2615_fsm
    │   │   │   ├── 2615_vm
    │   │   │   ├── 2616
    │   │   │   ├── 2616_fsm
    │   │   │   ├── 2616_vm
    │   │   │   ├── 2617
    │   │   │   ├── 2617_fsm
    │   │   │   ├── 2617_vm
    │   │   │   ├── 2618
    │   │   │   ├── 2618_fsm
    │   │   │   ├── 2618_vm
    │   │   │   ├── 2619
    │   │   │   ├── 2619_fsm
    │   │   │   ├── 2619_vm
    │   │   │   ├── 2620
    │   │   │   ├── 2650
    │   │   │   ├── 2651
    │   │   │   ├── 2652
    │   │   │   ├── 2653
    │   │   │   ├── 2654
    │   │   │   ├── 2655
    │   │   │   ├── 2656
    │   │   │   ├── 2657
    │   │   │   ├── 2658
    │   │   │   ├── 2659
    │   │   │   ├── 2660
    │   │   │   ├── 2661
    │   │   │   ├── 2662
    │   │   │   ├── 2663
    │   │   │   ├── 2664
    │   │   │   ├── 2665
    │   │   │   ├── 2666
    │   │   │   ├── 2667
    │   │   │   ├── 2668
    │   │   │   ├── 2669
    │   │   │   ├── 2670
    │   │   │   ├── 2673
    │   │   │   ├── 2674
    │   │   │   ├── 2675
    │   │   │   ├── 2678
    │   │   │   ├── 2679
    │   │   │   ├── 2680
    │   │   │   ├── 2681
    │   │   │   ├── 2682
    │   │   │   ├── 2683
    │   │   │   ├── 2684
    │   │   │   ├── 2685
    │   │   │   ├── 2686
    │   │   │   ├── 2687
    │   │   │   ├── 2688
    │   │   │   ├── 2689
    │   │   │   ├── 2690
    │   │   │   ├── 2691
    │   │   │   ├── 2692
    │   │   │   ├── 2693
    │   │   │   ├── 2696
    │   │   │   ├── 2699
    │   │   │   ├── 2701
    │   │   │   ├── 2702
    │   │   │   ├── 2703
    │   │   │   ├── 2704
    │   │   │   ├── 2753
    │   │   │   ├── 2753_fsm
    │   │   │   ├── 2753_vm
    │   │   │   ├── 2754
    │   │   │   ├── 2755
    │   │   │   ├── 2756
    │   │   │   ├── 2757
    │   │   │   ├── 2830
    │   │   │   ├── 2831
    │   │   │   ├── 2832
    │   │   │   ├── 2833
    │   │   │   ├── 2834
    │   │   │   ├── 2835
    │   │   │   ├── 2836
    │   │   │   ├── 2837
    │   │   │   ├── 2838
    │   │   │   ├── 2838_fsm
    │   │   │   ├── 2838_vm
    │   │   │   ├── 2839
    │   │   │   ├── 2840
    │   │   │   ├── 2840_fsm
    │   │   │   ├── 2840_vm
    │   │   │   ├── 2841
    │   │   │   ├── 2995
    │   │   │   ├── 2996
    │   │   │   ├── 3079
    │   │   │   ├── 3079_fsm
    │   │   │   ├── 3079_vm
    │   │   │   ├── 3080
    │   │   │   ├── 3081
    │   │   │   ├── 3085
    │   │   │   ├── 3118
    │   │   │   ├── 3119
    │   │   │   ├── 3164
    │   │   │   ├── 3256
    │   │   │   ├── 3257
    │   │   │   ├── 3258
    │   │   │   ├── 3350
    │   │   │   ├── 3351
    │   │   │   ├── 3379
    │   │   │   ├── 3380
    │   │   │   ├── 3381
    │   │   │   ├── 3394
    │   │   │   ├── 3394_fsm
    │   │   │   ├── 3394_vm
    │   │   │   ├── 3395
    │   │   │   ├── 3429
    │   │   │   ├── 3430
    │   │   │   ├── 3431
    │   │   │   ├── 3433
    │   │   │   ├── 3439
    │   │   │   ├── 3440
    │   │   │   ├── 3455
    │   │   │   ├── 3456
    │   │   │   ├── 3456_fsm
    │   │   │   ├── 3456_vm
    │   │   │   ├── 3466
    │   │   │   ├── 3467
    │   │   │   ├── 3468
    │   │   │   ├── 3501
    │   │   │   ├── 3502
    │   │   │   ├── 3503
    │   │   │   ├── 3534
    │   │   │   ├── 3541
    │   │   │   ├── 3541_fsm
    │   │   │   ├── 3541_vm
    │   │   │   ├── 3542
    │   │   │   ├── 3574
    │   │   │   ├── 3575
    │   │   │   ├── 3576
    │   │   │   ├── 3596
    │   │   │   ├── 3597
    │   │   │   ├── 3598
    │   │   │   ├── 3599
    │   │   │   ├── 3600
    │   │   │   ├── 3600_fsm
    │   │   │   ├── 3600_vm
    │   │   │   ├── 3601
    │   │   │   ├── 3601_fsm
    │   │   │   ├── 3601_vm
    │   │   │   ├── 3602
    │   │   │   ├── 3602_fsm
    │   │   │   ├── 3602_vm
    │   │   │   ├── 3603
    │   │   │   ├── 3603_fsm
    │   │   │   ├── 3603_vm
    │   │   │   ├── 3604
    │   │   │   ├── 3605
    │   │   │   ├── 3606
    │   │   │   ├── 3607
    │   │   │   ├── 3608
    │   │   │   ├── 3609
    │   │   │   ├── 3712
    │   │   │   ├── 3764
    │   │   │   ├── 3764_fsm
    │   │   │   ├── 3764_vm
    │   │   │   ├── 3766
    │   │   │   ├── 3767
    │   │   │   ├── 3997
    │   │   │   ├── 4143
    │   │   │   ├── 4144
    │   │   │   ├── 4145
    │   │   │   ├── 4146
    │   │   │   ├── 4147
    │   │   │   ├── 4148
    │   │   │   ├── 4149
    │   │   │   ├── 4150
    │   │   │   ├── 4151
    │   │   │   ├── 4152
    │   │   │   ├── 4153
    │   │   │   ├── 4154
    │   │   │   ├── 4155
    │   │   │   ├── 4156
    │   │   │   ├── 4157
    │   │   │   ├── 4158
    │   │   │   ├── 4159
    │   │   │   ├── 4160
    │   │   │   ├── 4161
    │   │   │   ├── 4162
    │   │   │   ├── 4163
    │   │   │   ├── 4164
    │   │   │   ├── 4165
    │   │   │   ├── 4166
    │   │   │   ├── 4167
    │   │   │   ├── 4168
    │   │   │   ├── 4169
    │   │   │   ├── 4170
    │   │   │   ├── 4171
    │   │   │   ├── 4172
    │   │   │   ├── 4173
    │   │   │   ├── 4174
    │   │   │   ├── 5002
    │   │   │   ├── 548
    │   │   │   ├── 549
    │   │   │   ├── 6102
    │   │   │   ├── 6104
    │   │   │   ├── 6106
    │   │   │   ├── 6110
    │   │   │   ├── 6111
    │   │   │   ├── 6112
    │   │   │   ├── 6113
    │   │   │   ├── 6117
    │   │   │   ├── 826
    │   │   │   ├── 827
    │   │   │   ├── 828
    │   │   │   ├── PG_VERSION
    │   │   │   └── pg_internal.init
    │   │   └── 16384/
    │   │       ├── 112
    │   │       ├── 113
    │   │       ├── 1247
    │   │       ├── 1247_fsm
    │   │       ├── 1247_vm
    │   │       ├── 1249
    │   │       ├── 1249_fsm
    │   │       ├── 1249_vm
    │   │       ├── 1255
    │   │       ├── 1255_fsm
    │   │       ├── 1255_vm
    │   │       ├── 1259
    │   │       ├── 1259_fsm
    │   │       ├── 1259_vm
    │   │       ├── 13318
    │   │       ├── 13318_fsm
    │   │       ├── 13318_vm
    │   │       ├── 13320
    │   │       ├── 13322
    │   │       ├── 13323
    │   │       ├── 13323_fsm
    │   │       ├── 13323_vm
    │   │       ├── 13325
    │   │       ├── 13327
    │   │       ├── 13328
    │   │       ├── 13328_fsm
    │   │       ├── 13328_vm
    │   │       ├── 13330
    │   │       ├── 13332
    │   │       ├── 13333
    │   │       ├── 13333_fsm
    │   │       ├── 13333_vm
    │   │       ├── 13335
    │   │       ├── 13337
    │   │       ├── 1417
    │   │       ├── 1418
    │   │       ├── 174
    │   │       ├── 175
    │   │       ├── 2187
    │   │       ├── 2224
    │   │       ├── 2328
    │   │       ├── 2336
    │   │       ├── 2337
    │   │       ├── 2579
    │   │       ├── 2600
    │   │       ├── 2600_fsm
    │   │       ├── 2600_vm
    │   │       ├── 2601
    │   │       ├── 2601_fsm
    │   │       ├── 2601_vm
    │   │       ├── 2602
    │   │       ├── 2602_fsm
    │   │       ├── 2602_vm
    │   │       ├── 2603
    │   │       ├── 2603_fsm
    │   │       ├── 2603_vm
    │   │       ├── 2604
    │   │       ├── 2605
    │   │       ├── 2605_fsm
    │   │       ├── 2605_vm
    │   │       ├── 2606
    │   │       ├── 2606_fsm
    │   │       ├── 2606_vm
    │   │       ├── 2607
    │   │       ├── 2607_fsm
    │   │       ├── 2607_vm
    │   │       ├── 2608
    │   │       ├── 2608_fsm
    │   │       ├── 2608_vm
    │   │       ├── 2609
    │   │       ├── 2609_fsm
    │   │       ├── 2609_vm
    │   │       ├── 2610
    │   │       ├── 2610_fsm
    │   │       ├── 2610_vm
    │   │       ├── 2611
    │   │       ├── 2612
    │   │       ├── 2612_fsm
    │   │       ├── 2612_vm
    │   │       ├── 2613
    │   │       ├── 2615
    │   │       ├── 2615_fsm
    │   │       ├── 2615_vm
    │   │       ├── 2616
    │   │       ├── 2616_fsm
    │   │       ├── 2616_vm
    │   │       ├── 2617
    │   │       ├── 2617_fsm
    │   │       ├── 2617_vm
    │   │       ├── 2618
    │   │       ├── 2618_fsm
    │   │       ├── 2618_vm
    │   │       ├── 2619
    │   │       ├── 2619_fsm
    │   │       ├── 2619_vm
    │   │       ├── 2620
    │   │       ├── 2650
    │   │       ├── 2651
    │   │       ├── 2652
    │   │       ├── 2653
    │   │       ├── 2654
    │   │       ├── 2655
    │   │       ├── 2656
    │   │       ├── 2657
    │   │       ├── 2658
    │   │       ├── 2659
    │   │       ├── 2660
    │   │       ├── 2661
    │   │       ├── 2662
    │   │       ├── 2663
    │   │       ├── 2664
    │   │       ├── 2665
    │   │       ├── 2666
    │   │       ├── 2667
    │   │       ├── 2668
    │   │       ├── 2669
    │   │       ├── 2670
    │   │       ├── 2673
    │   │       ├── 2674
    │   │       ├── 2675
    │   │       ├── 2678
    │   │       ├── 2679
    │   │       ├── 2680
    │   │       ├── 2681
    │   │       ├── 2682
    │   │       ├── 2683
    │   │       ├── 2684
    │   │       ├── 2685
    │   │       ├── 2686
    │   │       ├── 2687
    │   │       ├── 2688
    │   │       ├── 2689
    │   │       ├── 2690
    │   │       ├── 2691
    │   │       ├── 2692
    │   │       ├── 2693
    │   │       ├── 2696
    │   │       ├── 2699
    │   │       ├── 2701
    │   │       ├── 2702
    │   │       ├── 2703
    │   │       ├── 2704
    │   │       ├── 2753
    │   │       ├── 2753_fsm
    │   │       ├── 2753_vm
    │   │       ├── 2754
    │   │       ├── 2755
    │   │       ├── 2756
    │   │       ├── 2757
    │   │       ├── 2830
    │   │       ├── 2831
    │   │       ├── 2832
    │   │       ├── 2833
    │   │       ├── 2834
    │   │       ├── 2835
    │   │       ├── 2836
    │   │       ├── 2837
    │   │       ├── 2838
    │   │       ├── 2838_fsm
    │   │       ├── 2838_vm
    │   │       ├── 2839
    │   │       ├── 2840
    │   │       ├── 2840_fsm
    │   │       ├── 2840_vm
    │   │       ├── 2841
    │   │       ├── 2995
    │   │       ├── 2996
    │   │       ├── 3079
    │   │       ├── 3079_fsm
    │   │       ├── 3079_vm
    │   │       ├── 3080
    │   │       ├── 3081
    │   │       ├── 3085
    │   │       ├── 3118
    │   │       ├── 3119
    │   │       ├── 3164
    │   │       ├── 3256
    │   │       ├── 3257
    │   │       ├── 3258
    │   │       ├── 3350
    │   │       ├── 3351
    │   │       ├── 3379
    │   │       ├── 3380
    │   │       ├── 3381
    │   │       ├── 3394
    │   │       ├── 3394_fsm
    │   │       ├── 3394_vm
    │   │       ├── 3395
    │   │       ├── 3429
    │   │       ├── 3430
    │   │       ├── 3431
    │   │       ├── 3433
    │   │       ├── 3439
    │   │       ├── 3440
    │   │       ├── 3455
    │   │       ├── 3456
    │   │       ├── 3456_fsm
    │   │       ├── 3456_vm
    │   │       ├── 3466
    │   │       ├── 3467
    │   │       ├── 3468
    │   │       ├── 3501
    │   │       ├── 3502
    │   │       ├── 3503
    │   │       ├── 3534
    │   │       ├── 3541
    │   │       ├── 3541_fsm
    │   │       ├── 3541_vm
    │   │       ├── 3542
    │   │       ├── 3574
    │   │       ├── 3575
    │   │       ├── 3576
    │   │       ├── 3596
    │   │       ├── 3597
    │   │       ├── 3598
    │   │       ├── 3599
    │   │       ├── 3600
    │   │       ├── 3600_fsm
    │   │       ├── 3600_vm
    │   │       ├── 3601
    │   │       ├── 3601_fsm
    │   │       ├── 3601_vm
    │   │       ├── 3602
    │   │       ├── 3602_fsm
    │   │       ├── 3602_vm
    │   │       ├── 3603
    │   │       ├── 3603_fsm
    │   │       ├── 3603_vm
    │   │       ├── 3604
    │   │       ├── 3605
    │   │       ├── 3606
    │   │       ├── 3607
    │   │       ├── 3608
    │   │       ├── 3609
    │   │       ├── 3712
    │   │       ├── 3764
    │   │       ├── 3764_fsm
    │   │       ├── 3764_vm
    │   │       ├── 3766
    │   │       ├── 3767
    │   │       ├── 3997
    │   │       ├── 4143
    │   │       ├── 4144
    │   │       ├── 4145
    │   │       ├── 4146
    │   │       ├── 4147
    │   │       ├── 4148
    │   │       ├── 4149
    │   │       ├── 4150
    │   │       ├── 4151
    │   │       ├── 4152
    │   │       ├── 4153
    │   │       ├── 4154
    │   │       ├── 4155
    │   │       ├── 4156
    │   │       ├── 4157
    │   │       ├── 4158
    │   │       ├── 4159
    │   │       ├── 4160
    │   │       ├── 4161
    │   │       ├── 4162
    │   │       ├── 4163
    │   │       ├── 4164
    │   │       ├── 4165
    │   │       ├── 4166
    │   │       ├── 4167
    │   │       ├── 4168
    │   │       ├── 4169
    │   │       ├── 4170
    │   │       ├── 4171
    │   │       ├── 4172
    │   │       ├── 4173
    │   │       ├── 4174
    │   │       ├── 5002
    │   │       ├── 548
    │   │       ├── 549
    │   │       ├── 6102
    │   │       ├── 6104
    │   │       ├── 6106
    │   │       ├── 6110
    │   │       ├── 6111
    │   │       ├── 6112
    │   │       ├── 6113
    │   │       ├── 6117
    │   │       ├── 826
    │   │       ├── 827
    │   │       ├── 828
    │   │       └── PG_VERSION
    │   ├── global/
    │   │   ├── 1213
    │   │   ├── 1213_fsm
    │   │   ├── 1213_vm
    │   │   ├── 1214
    │   │   ├── 1214_fsm
    │   │   ├── 1214_vm
    │   │   ├── 1232
    │   │   ├── 1233
    │   │   ├── 1260
    │   │   ├── 1260_fsm
    │   │   ├── 1260_vm
    │   │   ├── 1261
    │   │   ├── 1261_fsm
    │   │   ├── 1261_vm
    │   │   ├── 1262
    │   │   ├── 1262_fsm
    │   │   ├── 1262_vm
    │   │   ├── 2396
    │   │   ├── 2396_fsm
    │   │   ├── 2396_vm
    │   │   ├── 2397
    │   │   ├── 2671
    │   │   ├── 2672
    │   │   ├── 2676
    │   │   ├── 2677
    │   │   ├── 2694
    │   │   ├── 2695
    │   │   ├── 2697
    │   │   ├── 2698
    │   │   ├── 2846
    │   │   ├── 2847
    │   │   ├── 2964
    │   │   ├── 2965
    │   │   ├── 2966
    │   │   ├── 2967
    │   │   ├── 3592
    │   │   ├── 3593
    │   │   ├── 4060
    │   │   ├── 4061
    │   │   ├── 4175
    │   │   ├── 4176
    │   │   ├── 4177
    │   │   ├── 4178
    │   │   ├── 4181
    │   │   ├── 4182
    │   │   ├── 4183
    │   │   ├── 4184
    │   │   ├── 4185
    │   │   ├── 4186
    │   │   ├── 6000
    │   │   ├── 6001
    │   │   ├── 6002
    │   │   ├── 6100
    │   │   ├── 6114
    │   │   ├── 6115
    │   │   ├── pg_control
    │   │   └── pg_internal.init
    │   ├── pg_logical/
    │   │   └── replorigin_checkpoint
    │   ├── pg_multixact/
    │   │   ├── members/
    │   │   │   └── 0000
    │   │   └── offsets/
    │   │       └── 0000
    │   ├── pg_stat/
    │   │   ├── db_0.stat
    │   │   ├── db_13468.stat
    │   │   └── global.stat
    │   ├── pg_subtrans/
    │   │   └── 0000
    │   ├── pg_wal/
    │   │   └── 000000010000000000000001
    │   └── pg_xact/
    │       └── 0000
    ├── src/
    │   ├── lib.rs
    │   ├── main.rs
    │   ├── use_runtime_queries.md
    │   ├── bin/
    │   │   └── generate_jwt_secret.rs
    │   ├── config/
    │   │   ├── db.rs
    │   │   ├── mod.rs
    │   │   └── sqlx_config.rs
    │   ├── handlers/
    │   │   ├── account.rs
    │   │   ├── account_fixed.rs
    │   │   ├── health.rs
    │   │   ├── login_fixed.rs
    │   │   ├── mod.rs
    │   │   ├── transaction.rs
    │   │   ├── transaction_fixed.rs
    │   │   ├── user.rs
    │   │   ├── user.rs.backup
    │   │   ├── user_fixed.rs
    │   │   ├── user_fixed.rs.backup
    │   │   └── user_fixed.rs.new
    │   ├── middleware/
    │   │   ├── auth.rs
    │   │   ├── auth_fixed.rs
    │   │   └── mod.rs
    │   ├── models/
    │   │   ├── account.rs
    │   │   ├── error.rs
    │   │   ├── mod.rs
    │   │   ├── token_compact.rs
    │   │   ├── token_fixed.rs
    │   │   ├── transaction.rs
    │   │   ├── transaction_fixed.rs
    │   │   ├── user.rs
    │   │   └── user.rs.fixed
    │   └── utils/
    │       ├── auth.rs
    │       └── mod.rs
    ├── tests/
    │   ├── api_tests.rs
    │   ├── auth_test.rs
    │   ├── user_api_test.rs
    │   └── user_api_test.rs.new
    └── .sqlx/
        ├── query-2c7d9d5c7caf4f20db35c2a8d5052ebd5b2d9bee14ad36c1999c03f15df68eee.json
        └── sqlx-data.json

================================================
File: README.md
================================================
# Dodo Payments

A backend service for managing transactions and user accounts built with Rust.

## Features

- User Management (registration, authentication, profile management)
- Transaction Management (create, retrieve, list transactions)
- Account Balances (manage and query user account balances)
- JWT-based authentication
- Rate limiting and security measures

## Technical Stack

- Language: Rust
- Web Framework: Actix Web
- Database: PostgreSQL
- Authentication: JWT tokens
- Containerization: Docker and Docker Compose

## Prerequisites

- Docker and Docker Compose installed on your machine
- No need for PostgreSQL installed locally (handled by Docker)

## Quick Start

The easiest way to run the application is to use Docker Compose:

```bash
# Clone the repository
git clone [your-repo-url]
cd dodo-payments

# Build and start the application
./start.sh
```

This will:

1. Build the Docker container
2. Start the PostgreSQL database
3. Start the application

The API will be available at: http://localhost:8080

## Manual Setup

If you prefer to set up things manually:

```bash
# Start Docker Compose
docker-compose up --build -d

# Check logs
docker-compose logs -f
```

## Environment Variables

The application uses the following environment variables:

- `DATABASE_URL`: PostgreSQL connection string (default: postgres://postgres:password@db:5432/dodo_payments)
- `SERVER_ADDR`: Server address (default: 0.0.0.0:8080)
- `RUST_LOG`: Log level (default: info)
- `JWT_SECRET`: Secret for JWT tokens (read from jwt_secret.txt if not provided)

## API Documentation

See [API.md](API.md) for detailed API documentation.

## Testing

See [TESTING.md](TESTING.md) for information on running tests.

## PostgreSQL Access

The PostgreSQL database is accessible at:

- Host: localhost
- Port: 5433 (to avoid conflicts with any local PostgreSQL installation)
- Username: postgres
- Password: password
- Database: dodo_payments

## Development

To develop locally without Docker:

1. Install PostgreSQL on your machine
2. Set up the database:

```bash
createdb dodo_payments
psql -d dodo_payments -f migrations/schema.sql
```

3. Install Rust and Cargo
4. Run the application:

```bash
cargo run
```

## Troubleshooting

- **The application fails to start**: Check the logs with `docker-compose logs -f app`
- **Database connection issues**: Ensure the PostgreSQL container is running with `docker-compose ps`
- **Changes not taking effect**: Rebuild the containers with `docker-compose up --build -d`

## License

[Your License]



================================================
File: API.md
================================================
# Dodo Payments API Documentation

This document provides information about the API endpoints available in the Dodo Payments system, including request/response formats and example requests.

## Base URL

All API endpoints are relative to the base URL: `http://localhost:8080/api`

## Authentication

Most endpoints require authentication using JWT tokens. To authenticate, include the token in the HTTP header:

```
Authorization: Bearer <your_jwt_token>
```

You can obtain a JWT token by logging in through the `/api/users/login` endpoint.

## Endpoints

### User Management

#### Register a new user

**Endpoint:** `POST /users/register`

**Description:** Creates a new user account

**Request Body:**

```json
{
  "username": "johndoe",
  "email": "john.doe@example.com",
  "password": "securepassword123"
}
```

**Response (201 Created):**

```json
{
  "id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
  "username": "johndoe",
  "email": "john.doe@example.com",
  "created_at": "2025-05-22T10:30:45Z",
  "updated_at": "2025-05-22T10:30:45Z"
}
```

**Possible Errors:**

- 400 Bad Request - Invalid input
- 409 Conflict - Username or email already exists

#### User login

**Endpoint:** `POST /users/login`

**Description:** Authenticates a user and returns a JWT token

**Request Body:**

```json
{
  "username": "johndoe",
  "password": "securepassword123"
}
```

**Response (200 OK):**

```json
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

**Possible Errors:**

- 400 Bad Request - Invalid input
- 401 Unauthorized - Invalid credentials

#### Get user profile

**Endpoint:** `GET /users/profile`

**Description:** Returns the profile of the currently authenticated user

**Authentication Required:** Yes

**Response (200 OK):**

```json
{
  "id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
  "username": "johndoe",
  "email": "john.doe@example.com",
  "created_at": "2025-05-22T10:30:45Z",
  "updated_at": "2025-05-22T10:30:45Z"
}
```

**Possible Errors:**

- 401 Unauthorized - Invalid or missing token
- 404 Not Found - User not found

#### Update user profile

**Endpoint:** `PUT /users/profile`

**Description:** Updates the profile of the currently authenticated user

**Authentication Required:** Yes

**Request Body:**

```json
{
  "email": "new.email@example.com"
}
```

**Response (200 OK):**

```json
{
  "id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
  "username": "johndoe",
  "email": "new.email@example.com",
  "created_at": "2025-05-22T10:30:45Z",
  "updated_at": "2025-05-22T11:45:15Z"
}
```

**Possible Errors:**

- 400 Bad Request - Invalid input
- 401 Unauthorized - Invalid or missing token
- 409 Conflict - Email already in use by another user

### Account Management

#### Get user account balance

**Endpoint:** `GET /accounts/balance`

**Description:** Returns the account balance of the currently authenticated user

**Authentication Required:** Yes

**Response (200 OK):**

```json
{
  "user_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
  "balance": "1250.75",
  "currency": "USD"
}
```

**Possible Errors:**

- 401 Unauthorized - Invalid or missing token
- 404 Not Found - Account not found

### Transaction Management

#### Create a new transaction

**Endpoint:** `POST /transactions`

**Description:** Creates a new transaction from the authenticated user to the recipient

**Authentication Required:** Yes

**Request Body:**

```json
{
  "recipient_username": "janedoe",
  "amount": "50.25",
  "description": "Lunch payment"
}
```

**Response (201 Created):**

```json
{
  "id": "b2c3d4e5-f6a7-8901-bcde-23456789abcd",
  "sender_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
  "recipient_id": "f6a7b8c9-d0e1-2345-fghi-6789abcdef01",
  "amount": "50.25",
  "description": "Lunch payment",
  "status": "completed",
  "created_at": "2025-05-22T14:20:30Z"
}
```

**Possible Errors:**

- 400 Bad Request - Invalid input or insufficient funds
- 401 Unauthorized - Invalid or missing token
- 404 Not Found - Recipient not found

#### Get transaction by ID

**Endpoint:** `GET /transactions/{transaction_id}`

**Description:** Returns details of a specific transaction

**Authentication Required:** Yes

**URL Parameters:**

- `transaction_id`: UUID of the transaction

**Response (200 OK):**

```json
{
  "id": "b2c3d4e5-f6a7-8901-bcde-23456789abcd",
  "sender_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
  "recipient_id": "f6a7b8c9-d0e1-2345-fghi-6789abcdef01",
  "amount": "50.25",
  "description": "Lunch payment",
  "status": "completed",
  "created_at": "2025-05-22T14:20:30Z"
}
```

**Possible Errors:**

- 401 Unauthorized - Invalid or missing token
- 403 Forbidden - User not authorized to view this transaction
- 404 Not Found - Transaction not found

#### List user transactions

**Endpoint:** `GET /transactions`

**Description:** Returns a list of transactions for the authenticated user

**Authentication Required:** Yes

**Query Parameters:**

- `limit` (optional): Maximum number of transactions to return (default: 10)
- `offset` (optional): Number of transactions to skip (default: 0)
- `type` (optional): Type of transactions to return ("sent", "received", or "all", default: "all")

**Response (200 OK):**

```json
{
  "transactions": [
    {
      "id": "b2c3d4e5-f6a7-8901-bcde-23456789abcd",
      "sender_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
      "recipient_id": "f6a7b8c9-d0e1-2345-fghi-6789abcdef01",
      "amount": "50.25",
      "description": "Lunch payment",
      "status": "completed",
      "created_at": "2025-05-22T14:20:30Z"
    },
    {
      "id": "c3d4e5f6-a7b8-9012-cdef-3456789abcde",
      "sender_id": "f6a7b8c9-d0e1-2345-fghi-6789abcdef01",
      "recipient_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
      "amount": "25.50",
      "description": "Movie ticket",
      "status": "completed",
      "created_at": "2025-05-21T19:30:15Z"
    }
  ],
  "total": 2
}
```

**Possible Errors:**

- 400 Bad Request - Invalid query parameters
- 401 Unauthorized - Invalid or missing token



================================================
File: Cargo.toml
================================================
[package]
name = "dodo-payments"
version = "1.0.0"
edition = "2021"
authors = ["Dodo Payments Team"]
description = "A Rust-based backend service for managing transactions and user accounts"
repository = ""
license = "MIT"
readme = "README.md"

[dependencies]
# Web framework
actix-web = "4.3.1"
actix-cors = "0.6.4"
actix-rt = "2.8.0"
actix-http = "3.3.1"

# Database
sqlx = { version = "0.6.3", features = ["runtime-tokio-rustls", "postgres", "uuid", "chrono", "json", "macros", "bigdecimal", "migrate", "offline"] }
bigdecimal = { version = "0.3.1", features = ["serde"] }
# Better decimal handling
rust_decimal = { version = "1.30", features = ["serde"] }

# Serialization/Deserialization
serde = { version = "1.0.183", features = ["derive"] }
serde_json = "1.0.104"

# Authentication and Security
jsonwebtoken = "8.3.0"
argon2 = "0.5.0"
rand = "0.8.5"
uuid = { version = "1.4.1", features = ["v4", "serde"] }

# Utilities
chrono = { version = "0.4.26", features = ["serde"] }
dotenv = "0.15.0"
log = "0.4.19"
env_logger = "0.10.0"
validator = { version = "0.16.1", features = ["derive"] }
futures = "0.3.28"

# Rate limiting
actix-extensible-rate-limit = "0.2.1"
# Bytes for working with byte arrays
bytes = "1.4.0"

[dev-dependencies]
tokio = { version = "1.28.0", features = ["full"] }



================================================
File: Dockerfile
================================================
# Production-optimized Dockerfile for Dodo Payments
FROM rust:slim as builder

WORKDIR /app

# Install dependencies
RUN apt-get update && \
    apt-get install -y postgresql-client libpq-dev pkg-config libssl-dev && \
    rm -rf /var/lib/apt/lists/*

# Copy the Cargo.toml and Cargo.lock files first
COPY Cargo.toml Cargo.lock ./

# Create a dummy main.rs file to build dependencies
RUN mkdir -p src && \
    echo "fn main() {println!(\"dummy\");}" > src/main.rs && \
    echo "pub fn dummy() {}" > src/lib.rs

# Build dependencies - this will be cached if dependencies don't change
RUN cargo build --release

# Delete the dummy files
RUN rm -rf src/

# Copy the real source code
COPY . .

# Build and run the JWT secret generator
RUN cargo build --release --bin generate_jwt_secret
RUN ./target/release/generate_jwt_secret

# Build the application in release mode
RUN cargo build --release

# Runtime stage - Use a smaller base image
FROM debian:bookworm-slim

WORKDIR /app

# Install only essential runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates libpq-dev postgresql-client && \
    rm -rf /var/lib/apt/lists/*

# Copy only the necessary files from the builder stage
COPY --from=builder /app/target/release/dodo-payments /app/dodo-payments
COPY --from=builder /app/migrations /app/migrations/
COPY --from=builder /app/jwt_secret.txt /app/jwt_secret.txt
COPY wait-for-db.sh /app/wait-for-db.sh
COPY init-db.sh /app/init-db.sh
COPY health-check.sh /app/health-check.sh

# Make scripts executable
RUN chmod +x /app/wait-for-db.sh /app/init-db.sh /app/health-check.sh

# Set environment variables
ENV RUST_LOG=info
ENV SERVER_ADDR=0.0.0.0:8080

# Expose the port
EXPOSE 8080

# Set the default command (will be overridden by docker-compose)
CMD ["/app/dodo-payments"]


================================================
File: PRODUCTION.md
================================================
# Production Deployment Guide for Dodo Payments

This guide outlines how to deploy Dodo Payments in a production environment using Docker and Docker Compose.

## Prerequisites

- A Linux server with Docker and Docker Compose installed
- Sufficient disk space for the database and application
- Open port 8080 (or configure as needed)

## Production Setup Steps

1. **Clone the repository**

```bash
git clone https://your-repository-url.git
cd dodo-payments
```

2. **Create environment file**

```bash
cp .env.template .env
```

Edit the `.env` file and set secure values for:

- `POSTGRES_PASSWORD`: Choose a strong password
- `JWT_SECRET`: Set a unique, secure key or provide a jwt_secret.txt file

3. **Deploy with Docker Compose**

For production deployment:

```bash
docker-compose -f docker-compose.prod.yml up -d
```

4. **Verify deployment**

Check that all services are running:

```bash
docker-compose -f docker-compose.prod.yml ps
```

Test the API:

```bash
curl http://localhost:8080/health
```

## Maintenance

### Backup Database

Run the backup script:

```bash
./backup-db.sh
```

Backups will be saved in the `./backups` directory.

### Restore Database

To restore from a backup:

```bash
./restore-db.sh ./backups/your-backup-file.sql
```

### Updating the Application

Pull the latest changes and rebuild:

```bash
git pull
docker-compose -f docker-compose.prod.yml down
docker-compose -f docker-compose.prod.yml up -d --build
```

### Logs

View application logs:

```bash
docker-compose -f docker-compose.prod.yml logs -f app
```

### Monitoring

Set up monitoring using Docker's built-in health checks:

```bash
docker inspect --format "{{json .State.Health }}" dodo-payments_app_1
```

## Security Considerations

1. Always use strong passwords for the database
2. Generate a unique JWT secret for each deployment
3. Consider setting up a reverse proxy (like Nginx) with SSL
4. Regularly update the Docker images
5. Implement regular database backups
6. Consider using Docker secrets for sensitive information

## Scaling

For higher loads, consider:

1. Setting up a load balancer
2. Increasing the database resources
3. Implementing database replication
4. Using container orchestration like Kubernetes

## Troubleshooting

- **Database connection issues**: Check DB container health and credentials
- **Application errors**: Check application logs
- **Performance issues**: Monitor resource usage and consider scaling



================================================
File: SETUP.md
================================================
# Dodo Payments Setup Instructions

This document explains how to set up and run the Dodo Payments application.

## Prerequisites

- Docker
- Docker Compose

## Quick Start

1. Clone this repository
2. Run the start script:

```bash
# For Linux/macOS
chmod +x start.sh
./start.sh

# For Windows (Git Bash or similar)
chmod +x start.sh
./start.sh

# For Windows (PowerShell)
docker-compose down
docker-compose build
docker-compose up -d
```

This will:

- Build the Docker images
- Start the PostgreSQL database
- Start the Dodo Payments application

The API will be available at: http://localhost:8080
PostgreSQL is available at: localhost:5433 (User: postgres, Password: password, Database: dodo_payments)

## Manual Setup

If you prefer to set up manually:

1. Build and start the containers:

```bash
docker-compose up -d
```

2. Check the application logs:

```bash
docker-compose logs -f app
```

3. To stop the application:

```bash
docker-compose down
```

## Using Production-Ready Dockerfile

For production use, we provide an optimized Dockerfile:

```bash
# Build with the production Dockerfile
docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
```

## Testing the API

You can use the included test script to test the API endpoints:

```bash
# For Linux/macOS
chmod +x test_api.sh
./test_api.sh

# For Windows (Git Bash or similar)
chmod +x test_api.sh
./test_api.sh
```

## Environment Variables

The following environment variables can be configured in docker-compose.yml:

- `DATABASE_URL`: PostgreSQL connection string (default: postgres://postgres:password@db:5432/dodo_payments)
- `SERVER_ADDR`: Server address and port (default: 0.0.0.0:8080)
- `RUST_LOG`: Logging level (default: info)
- `SQLX_OFFLINE`: Use SQLx offline mode (default: true)

## Project Structure

- `src/`: Source code
- `migrations/`: Database migrations
- `tests/`: Integration tests
- `docker-compose.yml`: Docker Compose configuration
- `Dockerfile`: Docker build configuration
- `Dockerfile.new`: Production-optimized Docker build configuration
- `start.sh`: Script to start the application
- `test_api.sh`: Script to test the API endpoints
- `wait-for-db.sh`: Script to ensure the app waits for the database to be ready



================================================
File: TESTING.md
================================================
# Dodo Payments Testing Guide

This document provides instructions on how to test the Dodo Payments API, including setting up the environment, running the application, and testing API routes and JWT authentication.

## Setting Up the Environment

### Prerequisites

- Rust and Cargo installed (latest stable version)
- PostgreSQL (version 12 or newer)
- [Optional] Docker and Docker Compose for containerized setup

### Database Setup

1. Install PostgreSQL (if not already installed):

```bash
sudo apt update
sudo apt install postgresql postgresql-contrib
```

2. Start PostgreSQL service:

```bash
sudo service postgresql start
```

3. Create database user and database:

```bash
sudo -u postgres psql -c "CREATE USER dodo WITH PASSWORD 'dodo_payments';"
sudo -u postgres psql -c "CREATE DATABASE dodo_payments OWNER dodo;"
sudo -u postgres psql -c "ALTER USER dodo WITH SUPERUSER;"
```

4. Configure connection string:

Create or edit the `.env` file in the project root directory:

```
DATABASE_URL=postgres://dodo:dodo_payments@localhost/dodo_payments
SQLX_OFFLINE=true
JWT_SECRET=your_secure_jwt_secret_key
SERVER_ADDR=127.0.0.1:8080
```

### Running Database Migrations

Apply the database schema:

```bash
cd /home/maheen/Desktop/dodo-payments
sqlx database create
sqlx migrate run
```

## Running the Application

### Method 1: Using Cargo

Run the application directly with Cargo:

```bash
cd /home/maheen/Desktop/dodo-payments
cargo run
```

### Method 2: Using the Run Script

Use the provided run script:

```bash
cd /home/maheen/Desktop/dodo-payments
chmod +x run.sh
./run.sh
```

### Method 3: Using Docker Compose

Run the application using Docker Compose:

```bash
cd /home/maheen/Desktop/dodo-payments
docker-compose up
```

## Running Tests

### Running All Tests

Run all tests using Cargo:

```bash
cd /home/maheen/Desktop/dodo-payments
cargo test
```

To see detailed output:

```bash
cargo test -- --nocapture
```

### Running Specific Tests

Run specific test files:

```bash
# Run user API tests
cargo test user_api_test

# Run authentication tests
cargo test auth_test
```

### Testing Specific Functions

Run specific test functions:

```bash
# Test user registration functionality
cargo test user_api_test::test_register_user

# Test authentication functionality
cargo test auth_test::test_jwt_generation
```

## Manual API Testing

You can test the API endpoints manually using tools like curl or Postman.

### 1. User Registration

```bash
curl -X POST http://localhost:8080/api/users/register \
  -H "Content-Type: application/json" \
  -d '{
    "username": "testuser",
    "email": "test@example.com",
    "password": "password123"
  }'
```

### 2. User Login (to get JWT token)

```bash
curl -X POST http://localhost:8080/api/users/login \
  -H "Content-Type: application/json" \
  -d '{
    "username": "testuser",
    "password": "password123"
  }'
```

Save the token received in the response:

```json
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

### 3. Get User Profile (with JWT Token)

```bash
curl -X GET http://localhost:8080/api/users/profile \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
```

### 4. Get Account Balance

```bash
curl -X GET http://localhost:8080/api/accounts/balance \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
```

### 5. Create Transaction

First, register a second user:

```bash
curl -X POST http://localhost:8080/api/users/register \
  -H "Content-Type: application/json" \
  -d '{
    "username": "recipient",
    "email": "recipient@example.com",
    "password": "password123"
  }'
```

Then, create a transaction:

```bash
curl -X POST http://localhost:8080/api/transactions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." \
  -d '{
    "recipient_username": "recipient",
    "amount": "10.00",
    "description": "Test payment"
  }'
```

### 6. List Transactions

```bash
curl -X GET http://localhost:8080/api/transactions \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
```

## Testing JWT Authentication

### Valid Token Test

1. Get a valid token by logging in
2. Use the token to access a protected endpoint
3. Verify you get a successful response

### Invalid Token Tests

1. **Missing Token Test:**

   ```bash
   curl -X GET http://localhost:8080/api/users/profile
   ```

   Expected result: 401 Unauthorized

2. **Invalid Token Format Test:**

   ```bash
   curl -X GET http://localhost:8080/api/users/profile \
     -H "Authorization: Bearer invalid.token.format"
   ```

   Expected result: 401 Unauthorized

3. **Expired Token Test:**
   Use an expired token (you'll need to modify the JWT secret or wait for token expiration)

   ```bash
   curl -X GET http://localhost:8080/api/users/profile \
     -H "Authorization: Bearer expired.token.here"
   ```

   Expected result: 401 Unauthorized

4. **Token with Invalid Signature:**
   Modify a valid token by changing its signature
   ```bash
   curl -X GET http://localhost:8080/api/users/profile \
     -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.INVALID_SIGNATURE"
   ```
   Expected result: 401 Unauthorized

## Automated Test Cases

The Dodo Payments system includes automated tests for critical components:

### User API Tests

- User registration
- User login and JWT generation
- User profile retrieval
- User profile update

### Authentication Tests

- JWT token generation
- JWT token validation
- Authentication middleware

### Transaction Tests

- Transaction creation
- Transaction retrieval
- Transaction listing
- Transaction validation (e.g., insufficient funds)

### Account Tests

- Account balance retrieval
- Account balance updates after transactions

All these tests ensure that the Dodo Payments backend meets the specified requirements and functions correctly.



================================================
File: backup-db.sh
================================================
#!/bin/bash
# backup-db.sh - Script to backup the Dodo Payments database

set -e

# Default values
BACKUP_DIR="./backups"
BACKUP_FILE="dodo_payments_$(date +%Y%m%d_%H%M%S).sql"
DB_USER="postgres"
DB_PASS="password"
DB_NAME="dodo_payments"
DB_HOST="localhost"
DB_PORT="5433"

# Create backup directory if it doesn't exist
mkdir -p $BACKUP_DIR

echo "Creating backup of database $DB_NAME to $BACKUP_DIR/$BACKUP_FILE"

# Set PGPASSWORD environment variable
export PGPASSWORD=$DB_PASS

# Perform the backup using pg_dump
pg_dump -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -F c -f "$BACKUP_DIR/$BACKUP_FILE"

# Check if backup was successful
if [ $? -eq 0 ]; then
  echo "✅ Backup completed successfully: $BACKUP_DIR/$BACKUP_FILE"
  echo "Backup size: $(du -h "$BACKUP_DIR/$BACKUP_FILE" | cut -f1)"
else
  echo "❌ Backup failed"
  exit 1
fi

# List existing backups
echo "Available backups:"
ls -lh $BACKUP_DIR

# Unset PGPASSWORD for security
unset PGPASSWORD



================================================
File: debug_token.sh
================================================
#!/bin/bash
# Script to debug the token validation issues

# Define server URL
API_URL="http://localhost:8082"

# Colors for better output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=== Dodo Payments JWT Token Debugging ===${NC}"

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error: jq is not installed. Please install jq to run this script.${NC}"
    exit 1
fi

# Login to get token
echo -e "1. ${BLUE}Logging in to get JWT token...${NC}"
login_response=$(curl -s -X POST "$API_URL/api/users/login" \
    -H "Content-Type: application/json" \
    -d '{"username":"testuser1","password":"password123"}')

echo "Raw login response:"
echo "$login_response"
echo ""

if echo "$login_response" | jq -e . > /dev/null 2>&1; then
    echo "Parsed JSON response:"
    echo "$login_response" | jq .
    
    token=$(echo "$login_response" | jq -r .token)
    if [ -n "$token" ] && [ "$token" != "null" ]; then
        echo -e "${GREEN}Successfully obtained token:${NC}"
        echo "$token"
        
        # Save token to file for examination
        echo "$token" > token.txt
        echo -e "${GREEN}Token saved to token.txt${NC}"
    else
        echo -e "${RED}Failed to get token from response${NC}"
        exit 1
    fi
else
    echo -e "${RED}Failed to parse login response as JSON${NC}"
    exit 1
fi
echo ""

# Test with explicit token header format
echo -e "2. ${BLUE}Testing user profile with verbose token debugging...${NC}"
echo "Using token: $token"
echo "Header: Authorization: Bearer $token"

profile_response=$(curl -v -X GET "$API_URL/api/users/profile" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $token" 2>&1)

echo "Raw profile response with verbose output:"
echo "$profile_response"
echo ""

# Test simple health endpoint
echo -e "3. ${BLUE}Testing health endpoint for comparison...${NC}"
health_response=$(curl -s "$API_URL/health")
echo "Health endpoint response:"
echo "$health_response" | jq .
echo ""

echo -e "${GREEN}Token debugging completed!${NC}"



================================================
File: docker-compose.prod.yml
================================================
version: "3.8"

# Production configuration for Dodo Payments
# Uses named volumes for data persistence and sets up a network

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD:-password}@db:5432/dodo_payments
    depends_on:
      db:
        condition: service_healthy
    restart: always
    command: ["./wait-for-db.sh", "db", "5432", "/app/dodo-payments"]
    networks:
      - dodo-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M
    healthcheck:
      test: ["CMD", "./health-check.sh", "localhost", "8080", "3"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 15s

  db:
    image: postgres:15
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - dodo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M

volumes:
  postgres_data:
    name: dodo_payments_postgres_data

networks:
  dodo-network:
    driver: bridge



================================================
File: docker-compose.yml
================================================
version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    environment:
      - DATABASE_URL=postgres://postgres:password@db:5432/dodo_payments
      - SERVER_ADDR=0.0.0.0:8080
      - RUST_LOG=info
      - SQLX_OFFLINE=true
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=dodo_payments
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "./health-check.sh", "localhost", "8080"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: ["./wait-for-db.sh", "db", "5432", "/app/dodo-payments"]

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=dodo_payments
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    name: dodo_payments_postgres_data



================================================
File: health-check.sh
================================================
#!/bin/bash
# health-check.sh: Health check script for Dodo Payments

set -e

HOST=${1:-"localhost"}
PORT=${2:-"8080"}
TIMEOUT=${3:-"5"}

echo "Checking health of Dodo Payments at $HOST:$PORT..."

# Try to access the health endpoint with timeout
if curl --max-time $TIMEOUT -s "http://$HOST:$PORT/health" | grep -q "healthy"; then
  echo "✅ Service is healthy"
  exit 0
else
  echo "❌ Service is unhealthy"
  exit 1
fi



================================================
File: init-db.sh
================================================
#!/bin/bash
# File for initializing the database correctly in Docker

set -e

# Wait for PostgreSQL to be ready
until PGPASSWORD=$POSTGRES_PASSWORD psql -h "db" -U "$POSTGRES_USER" -p "5432" -d "$POSTGRES_DB" -c '\q'; do
  >&2 echo "PostgreSQL is unavailable - sleeping"
  sleep 1
done

>&2 echo "PostgreSQL is up - applying migrations"

# Apply the schema file
PGPASSWORD=$POSTGRES_PASSWORD psql -h "db" -U "$POSTGRES_USER" -p "5432" -d "$POSTGRES_DB" -f "/app/migrations/schema.sql"

# If there was a sample data file, apply it too
if [ -f "/app/migrations/20250521000002_sample_data.sql" ]; then
  >&2 echo "Applying sample data"
  PGPASSWORD=$POSTGRES_PASSWORD psql -h "db" -U "$POSTGRES_USER" -p "5432" -d "$POSTGRES_DB" -f "/app/migrations/20250521000002_sample_data.sql"
fi

>&2 echo "Database initialization completed"



================================================
File: profile_response.json
================================================
Missing expected request extension data


================================================
File: restore-db.sh
================================================
#!/bin/bash
# restore-db.sh - Script to restore a Dodo Payments database backup

set -e

# Check if backup file was provided
if [ $# -lt 1 ]; then
  echo "Usage: $0 <backup_file>"
  echo "Example: $0 ./backups/dodo_payments_20250522_120000.sql"
  exit 1
fi

BACKUP_FILE=$1
DB_USER="postgres"
DB_PASS="password"
DB_NAME="dodo_payments"
DB_HOST="localhost"
DB_PORT="5433"

# Check if backup file exists
if [ ! -f "$BACKUP_FILE" ]; then
  echo "❌ Backup file not found: $BACKUP_FILE"
  exit 1
fi

echo "Restoring database $DB_NAME from $BACKUP_FILE"
echo "⚠️ WARNING: This will overwrite the current database!"
echo "Press CTRL+C to cancel or ENTER to continue..."
read

# Set PGPASSWORD environment variable
export PGPASSWORD=$DB_PASS

# First, terminate all connections to the database
psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d "postgres" -c "
SELECT pg_terminate_backend(pg_stat_activity.pid)
FROM pg_stat_activity
WHERE pg_stat_activity.datname = '$DB_NAME'
  AND pid <> pg_backend_pid();"

# Drop and recreate the database
psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d "postgres" -c "DROP DATABASE IF EXISTS $DB_NAME;"
psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d "postgres" -c "CREATE DATABASE $DB_NAME;"

# Restore the backup
pg_restore -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "$BACKUP_FILE"

# Check if restore was successful
if [ $? -eq 0 ]; then
  echo "✅ Database restore completed successfully"
else
  echo "❌ Database restore failed"
  exit 1
fi

# Unset PGPASSWORD for security
unset PGPASSWORD



================================================
File: sqlx-data.json
================================================
{
  "db": "PostgreSQL"
}



================================================
File: start.sh
================================================
#!/bin/bash
# Script to build and run Dodo Payments

# Functions for colored output
function print_success() {
  echo -e "\033[0;32m✅ $1\033[0m"
}

function print_info() {
  echo -e "\033[0;34m🔷 $1\033[0m"
}

function print_error() {
  echo -e "\033[0;31m❌ $1\033[0m"
}

print_info "=== Building and starting Dodo Payments ==="

# Check for Docker and Docker Compose
if ! command -v docker &> /dev/null; then
  print_error "Docker is not installed. Please install Docker first."
  exit 1
fi

if ! docker info &> /dev/null; then
  print_error "Docker is not running. Please start Docker first."
  exit 1
fi

# Stop any existing containers
print_info "Stopping any existing containers..."
docker compose down

# Build and start the services
print_info "Building and starting services..."
docker compose build
docker compose up -d

print_info "Waiting for services to start..."
sleep 5

# Check if services are running
if docker compose ps | grep -q "Up"; then
  print_success "Dodo Payments is running successfully!"
  echo "API will be available at http://localhost:8081"
  echo "PostgreSQL is available at: localhost:5433"
  echo "PostgreSQL credentials: User: postgres, Password: password, Database: dodo_payments"
  echo ""
  echo "To check logs: docker compose logs -f app"
  echo "To stop: docker compose down"
else
  print_error "There was an issue starting the services. Check logs with: docker compose logs"
fi



================================================
File: test_api.sh
================================================
#!/bin/bash
# Script to test the Dodo Payments API

set -e

echo "=== API Testing Script for Dodo Payments ==="

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Define server URL - use port 8082 as in docker-compose
API_URL="http://localhost:8082"

# Check if the API is running
echo -e "${BLUE}Checking if API is running...${NC}"
if ! curl -s "${API_URL}/health" > /dev/null; then
    echo -e "${RED}The API is not running. Make sure the Docker containers are up.${NC}"
    exit 1
fi
echo -e "${GREEN}API is up and running${NC}"
echo ""

# Function to make API requests and display results
make_request() {
    local method=$1
    local endpoint=$2
    local data=$3
    local auth_token=$4

    echo -e "${BLUE}Making ${method} request to ${endpoint}${NC}"

    local curl_args=(-s -X "$method" "${API_URL}${endpoint}" -H "Content-Type: application/json")
    if [ -n "$auth_token" ]; then
        curl_args+=(-H "Authorization: Bearer ${auth_token}")
    fi
    if [ -n "$data" ]; then
        curl_args+=(-d "$data")
    fi

    local response
    response=$(curl "${curl_args[@]}")
    local status=$?

    if [ $status -ne 0 ]; then
        echo -e "${RED}Curl command failed with status $status${NC}"
        exit 1
    fi

    if echo "$response" | jq . > /dev/null 2>&1; then
        echo -e "${GREEN}Response:${NC}"
        echo "$response" | jq .
    else
        echo -e "${RED}Response (not valid JSON):${NC}"
        echo "$response"
    fi

    echo ""

    # Output pure JSON to fd 3 so caller can capture
    echo "$response" >&3
}

# Step 1: Test the health endpoint
echo -e "${BLUE}Step 1: Testing health endpoint${NC}"
make_request "GET" "/health" "" 3>&1 1>&2

# Step 2: Register a test user
echo -e "${BLUE}Step 2: Registering a test user${NC}"
register_data='{"username":"testuser1","email":"testuser1@example.com","password":"password123"}'
register_response=$(make_request "POST" "/api/users/register" "$register_data" 3>&1 1>&2)

# Step 3: Try to login with the registered user
echo -e "${BLUE}Step 3: Logging in to get JWT token${NC}"
login_data='{"username":"testuser1","password":"password123"}'
login_response=$(make_request "POST" "/api/users/login" "$login_data" 3>&1 1>&2)

# Extract token from response
echo -e "${BLUE}Extracting token from login response...${NC}"
if echo "$login_response" | jq -e '.token' > /dev/null 2>&1; then
    token=$(echo "$login_response" | jq -r '.token')
    if [ "$token" == "null" ] || [ -z "$token" ]; then
        echo -e "${RED}Failed to get token. Token is null or empty. Aborting further tests.${NC}"
        exit 1
    fi
else
    echo -e "${RED}Failed to parse token from response. Response might not be valid JSON or doesn't contain a token field.${NC}"
    echo -e "${RED}Raw response:${NC}"
    echo "$login_response"
    exit 1
fi

echo -e "${GREEN}Successfully obtained JWT token: ${token:0:15}...${NC}"
echo ""

# Step 4: Get user profile
echo -e "${BLUE}Step 4: Getting user profile${NC}"
make_request "GET" "/api/users/profile" "" "$token" 3>&1 1>&2

# Step 5: Get account balance
echo -e "${BLUE}Step 5: Getting account balance${NC}"
make_request "GET" "/api/accounts/balance" "" "$token" 3>&1 1>&2

# Step 6: Register a second user (recipient)
echo -e "${BLUE}Step 6: Registering a recipient user${NC}"
recipient_data='{"username":"recipient1","email":"recipient1@example.com","password":"password123"}'
make_request "POST" "/api/users/register" "$recipient_data" 3>&1 1>&2

# Step 7: Create a transaction
echo -e "${BLUE}Step 7: Creating a transaction${NC}"
transaction_data='{"recipient_username":"recipient1","amount":"10.00","currency":"USD","description":"Test payment"}'
transaction_response=$(make_request "POST" "/api/transactions" "$transaction_data" "$token" 3>&1 1>&2)

# Step 8: Extract transaction ID if present
transaction_id=$(echo "$transaction_response" | jq -r '.id // empty')

# Step 9: Get specific transaction details if available
if [ -n "$transaction_id" ]; then
    echo -e "${BLUE}Step 9: Getting transaction details${NC}"
    make_request "GET" "/api/transactions/$transaction_id" "" "$token" 3>&1 1>&2
fi

# Step 10: Test with invalid token
echo -e "${BLUE}Step 10: Testing authentication with invalid token${NC}"
make_request "GET" "/api/users/profile" "" "invalid.token.here" 3>&1 1>&2

echo -e "${GREEN}API testing completed!${NC}"



================================================
File: test_api_fixed.sh
================================================
#!/bin/bash
# Enhanced test script for Dodo Payments API with reliable token handling

# Define server URL
API_URL="http://localhost:8082"

# Colors for better output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m'

echo -e "${BLUE}=== Dodo Payments API Testing Suite ===${NC}"

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error: jq is not installed. Please install jq to run this script.${NC}"
    exit 1
fi

# Function to generate a unique test username
generate_username() {
    echo "testuser_$(date +%s%N | md5sum | head -c 8)"
}

# Function to make request and handle response
make_request() {
    local method=$1
    local endpoint=$2
    local data=$3
    local auth_header=$4

    # Build the curl command
    if [ -n "$data" ]; then
        if [ -n "$auth_header" ]; then
            curl -s -X "$method" "${API_URL}${endpoint}" \
                -H "Content-Type: application/json" \
                -H "Authorization: $auth_header" \
                -d "$data"
        else
            curl -s -X "$method" "${API_URL}${endpoint}" \
                -H "Content-Type: application/json" \
                -d "$data"
        fi
    else
        if [ -n "$auth_header" ]; then
            curl -s -X "$method" "${API_URL}${endpoint}" \
                -H "Content-Type: application/json" \
                -H "Authorization: $auth_header"
        else
            curl -s -X "$method" "${API_URL}${endpoint}" \
                -H "Content-Type: application/json"
        fi
    fi
}

# Test health endpoint
echo -e "${BLUE}Step 1: Testing health endpoint${NC}"
health_response=$(make_request "GET" "/health" "" "")
echo -e "${YELLOW}Response:${NC}"
echo "$health_response" | jq .
echo ""

# Register a new user with unique username
USERNAME=$(generate_username)
EMAIL="${USERNAME}@example.com"
PASSWORD="password123"

echo -e "${BLUE}Step 2: Registering a new user (${USERNAME})${NC}"
register_data="{\"username\":\"${USERNAME}\",\"email\":\"${EMAIL}\",\"password\":\"${PASSWORD}\"}"
register_response=$(make_request "POST" "/api/users/register" "$register_data" "")
echo -e "${YELLOW}Response:${NC}"
echo "$register_response" | jq .
echo ""

# Login user to get JWT token
echo -e "${BLUE}Step 3: Logging in to get JWT token${NC}"
login_data="{\"username\":\"${USERNAME}\",\"password\":\"${PASSWORD}\"}"
login_response=$(make_request "POST" "/api/users/login" "$login_data" "")
echo -e "${YELLOW}Raw login response:${NC}"
echo "$login_response"
echo ""

# Save response to file for better token extraction
echo "$login_response" > login_response.tmp

# Extract token using grep to avoid line break issues
token=$(grep -o '"token":"[^"]*' login_response.tmp | sed 's/"token":"//' | tr -d '\n' | tr -d ' ')
if [ -z "$token" ]; then
    echo -e "${RED}Failed to extract token from response${NC}"
    exit 1
else
    echo -e "${GREEN}Successfully extracted JWT token: ${token:0:20}...${NC}"
    echo ""
fi

# Test user profile endpoint
echo -e "${BLUE}Step 4: Getting user profile${NC}"
profile_response=$(make_request "GET" "/api/users/profile" "" "Bearer $token")
echo -e "${YELLOW}Response:${NC}"
echo "$profile_response" | jq .
echo ""

# Test account balance endpoint
echo -e "${BLUE}Step 5: Getting account balance${NC}"
balance_response=$(make_request "GET" "/api/accounts/balance" "" "Bearer $token")
echo -e "${YELLOW}Response:${NC}"
echo "$balance_response" | jq .
echo ""

# Register a recipient user
RECIPIENT_USERNAME=$(generate_username)
RECIPIENT_EMAIL="${RECIPIENT_USERNAME}@example.com"

echo -e "${BLUE}Step 6: Registering a recipient user (${RECIPIENT_USERNAME})${NC}"
recipient_data="{\"username\":\"${RECIPIENT_USERNAME}\",\"email\":\"${RECIPIENT_EMAIL}\",\"password\":\"${PASSWORD}\"}"
recipient_response=$(make_request "POST" "/api/users/register" "$recipient_data" "")
echo -e "${YELLOW}Response:${NC}"
echo "$recipient_response" | jq .
echo ""

# Create a transaction
echo -e "${BLUE}Step 7: Creating a transaction${NC}"
transaction_data="{\"recipient_username\":\"${RECIPIENT_USERNAME}\",\"amount\":\"10.00\",\"description\":\"Test payment\"}"
transaction_response=$(make_request "POST" "/api/transactions" "$transaction_data" "Bearer $token")
echo -e "${YELLOW}Response:${NC}"
echo "$transaction_response" | jq .
echo ""

# Extract transaction ID
transaction_id=$(echo "$transaction_response" | jq -r '.id // empty')
if [ -n "$transaction_id" ]; then
    echo -e "${GREEN}Transaction created with ID: $transaction_id${NC}"
    
    # Get transaction details
    echo -e "${BLUE}Step 8: Getting transaction details${NC}"
    tx_details=$(make_request "GET" "/api/transactions/$transaction_id" "" "Bearer $token")
    echo -e "${YELLOW}Response:${NC}"
    echo "$tx_details" | jq .
    echo ""
    
    # List all transactions
    echo -e "${BLUE}Step 9: Listing all transactions${NC}"
    all_tx=$(make_request "GET" "/api/transactions" "" "Bearer $token")
    echo -e "${YELLOW}Response:${NC}"
    echo "$all_tx" | jq .
    echo ""
else
    echo -e "${RED}Could not extract transaction ID from response${NC}"
fi

# Clean up temporary files
rm -f login_response.tmp

echo -e "${GREEN}API testing completed!${NC}"



================================================
File: test_api_improved.sh
================================================
#!/bin/bash
# Script to test the Dodo Payments API with improved JSON handling and error reporting

set -e

echo "=== Improved API Testing Script for Dodo Payments ==="

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Define server URL - use port 8082 as in docker-compose
API_URL="http://localhost:8082"

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error: jq is not installed. Please install jq to run this script.${NC}"
    exit 1
fi

# Check if the API is running
echo -e "${BLUE}Checking if API is running...${NC}"
if ! curl -s "${API_URL}/health" > /dev/null; then
    echo -e "${RED}The API is not running. Make sure the Docker containers are up.${NC}"
    exit 1
fi
echo -e "${GREEN}API is up and running${NC}"
echo ""

# Function to make API requests and display results
make_request() {
    local method=$1
    local endpoint=$2
    local data=$3
    local auth_token=$4

    echo -e "${BLUE}Making ${method} request to ${endpoint}${NC}"

    local curl_args=(-s -X "$method" "${API_URL}${endpoint}" -H "Content-Type: application/json")
    
    # Handle authorization properly
    if [ -n "$auth_token" ]; then
        echo -e "${YELLOW}Using auth token: ${auth_token:0:15}...${NC}"
        curl_args+=(-H "Authorization: Bearer ${auth_token}")
    fi

    if [ -n "$data" ]; then
        echo -e "${YELLOW}Request data: ${data}${NC}"
        curl_args+=(-d "$data")
    fi

    # Make the request and capture both stdout and stderr
    local response
    local err_output
    response=$(curl "${curl_args[@]}" 2> >(err_output=$(cat); return 0))
    local status=$?

    if [ $status -ne 0 ]; then
        echo -e "${RED}Curl command failed with status $status${NC}"
        echo -e "${RED}Error: $err_output${NC}"
        return 1
    fi

    # Print raw response for debugging
    echo -e "${YELLOW}Raw response: $response${NC}"

    # Try to parse as JSON
    if echo "$response" | jq -e . > /dev/null 2>&1; then
        # It's valid JSON
        echo -e "${GREEN}Response (JSON):${NC}"
        echo "$response" | jq .
        echo "$response" # Return the response for capturing
    else
        # Not JSON
        echo -e "${RED}Response (not valid JSON):${NC}"
        echo "$response"
        # Try to identify common JSON parsing issues
        if [[ "$response" == *"Invalid numeric literal"* ]]; then
            echo -e "${RED}Error suggests a numeric parsing issue. Check decimal values in responses.${NC}"
        elif [[ "$response" == *"Unexpected token"* ]]; then
            echo -e "${RED}Error suggests malformed JSON. Check response format.${NC}"
        fi
        echo "$response" # Return the response for capturing
    fi
    
    echo ""
}

# Step 1: Test the health endpoint
echo -e "${BLUE}Step 1: Testing health endpoint${NC}"
make_request "GET" "/health" ""

# Step 2: Register a test user
echo -e "${BLUE}Step 2: Registering a test user${NC}"
register_data='{"username":"testuser1","email":"testuser1@example.com","password":"password123"}'
register_response=$(make_request "POST" "/api/users/register" "$register_data")

# Step 3: Try to login with the registered user
echo -e "${BLUE}Step 3: Logging in to get JWT token${NC}"
login_data='{"username":"testuser1","password":"password123"}'
login_response=$(make_request "POST" "/api/users/login" "$login_data")

# Extract token from login response with improved error handling
if echo "$login_response" | jq -e . > /dev/null 2>&1; then
    # JSON is valid, extract token
    if echo "$login_response" | jq -e '.token' > /dev/null 2>&1; then
        token=$(echo "$login_response" | jq -r '.token')
        if [ "$token" == "null" ] || [ -z "$token" ]; then
            echo -e "${RED}Failed to get token. Token is null or empty. Aborting further tests.${NC}"
            exit 1
        fi
        echo -e "${GREEN}Successfully obtained JWT token: ${token:0:15}...${NC}"
        # For debugging, show token structure
        echo -e "${YELLOW}Token has $(echo "$token" | tr -dc '.' | wc -c) dots, which should be 2 for a valid JWT.${NC}"
    else
        echo -e "${RED}Response is valid JSON but doesn't contain a 'token' field.${NC}"
        echo -e "${RED}Response fields: $(echo "$login_response" | jq 'keys')${NC}"
        exit 1
    fi
else
    echo -e "${RED}Failed to parse login response as JSON.${NC}"
    echo -e "${RED}Raw response: $login_response${NC}"
    exit 1
fi
echo ""

# Step 4: Get user profile
echo -e "${BLUE}Step 4: Getting user profile${NC}"
profile_response=$(make_request "GET" "/api/users/profile" "" "$token")

# Step 5: Get account balance
echo -e "${BLUE}Step 5: Getting account balance${NC}"
balance_response=$(make_request "GET" "/api/accounts/balance" "" "$token")

# Step 6: Register a second user (recipient)
echo -e "${BLUE}Step 6: Registering a recipient user${NC}"
recipient_data='{"username":"recipient1","email":"recipient1@example.com","password":"password123"}'
make_request "POST" "/api/users/register" "$recipient_data"

# Step 7: Create a transaction
echo -e "${BLUE}Step 7: Creating a transaction${NC}"
transaction_data='{"recipient_username":"recipient1","amount":"10.00","description":"Test payment"}'
transaction_response=$(make_request "POST" "/api/transactions" "$transaction_data" "$token")

# Step 8: Extract transaction ID if present
if echo "$transaction_response" | jq -e . > /dev/null 2>&1 && echo "$transaction_response" | jq -e '.id' > /dev/null 2>&1; then
    transaction_id=$(echo "$transaction_response" | jq -r '.id')
    
    # Step 9: Get specific transaction details if available
    echo -e "${BLUE}Step 8: Getting transaction details${NC}"
    make_request "GET" "/api/transactions/$transaction_id" "" "$token"
    
    # Step 10: List all transactions
    echo -e "${BLUE}Step 9: Listing all transactions${NC}"
    make_request "GET" "/api/transactions" "" "$token"
else
    echo -e "${RED}Could not extract transaction ID from response.${NC}"
    echo -e "${RED}Raw response: $transaction_response${NC}"
fi

# Step 10: Test with invalid token
echo -e "${BLUE}Step 10: Testing authentication with invalid token${NC}"
make_request "GET" "/api/users/profile" "" "invalid.token.here"

echo -e "${GREEN}API testing completed!${NC}"



================================================
File: test_api_no_auth.sh
================================================
#!/bin/bash
# Complete API testing script focused on working endpoints

# Define server URL
API_URL="http://localhost:8082"

# Colors for better output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=== Dodo Payments API Testing (No Auth Required) ===${NC}"

# Test 1: Health endpoint
echo -e "${BLUE}1. Testing health endpoint...${NC}"
health_response=$(curl -s "$API_URL/health")
echo "Response: $health_response"
echo

# Test 2: Register a new user
echo -e "${BLUE}2. Registering a test user with unique name...${NC}"
username="testuser_$(date +%s)"
register_response=$(curl -s -X POST "$API_URL/api/users/register" \
    -H "Content-Type: application/json" \
    -d "{\"username\":\"$username\",\"email\":\"$username@example.com\",\"password\":\"password123\"}")

echo "Response: $register_response"
echo

# Test 3: Login with the new user 
echo -e "${BLUE}3. Logging in with the new user...${NC}"
login_response=$(curl -s -X POST "$API_URL/api/users/login" \
    -H "Content-Type: application/json" \
    -d "{\"username\":\"$username\",\"password\":\"password123\"}")

echo "Raw login response:"
echo "$login_response"
echo

echo -e "${GREEN}API testing complete for endpoints that don't require authentication${NC}"
echo -e "${RED}Note: Authentication is not working correctly due to malformed token response${NC}"



================================================
File: test_api_simple.sh
================================================
#!/bin/bash
# Simple script to test the Dodo Payments API

# Define server URL
API_URL="http://localhost:8082"

# Colors for better output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=== Dodo Payments API Testing ===${NC}"

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error: jq is not installed. Please install jq to run this script.${NC}"
    exit 1
fi

# Check if the API is running
echo -e "1. ${BLUE}Checking if API is running...${NC}"
health_response=$(curl -s "$API_URL/health")
echo "$health_response" | jq .
echo ""

# Register a test user
echo -e "2. ${BLUE}Registering a test user...${NC}"
register_response=$(curl -s -X POST "$API_URL/api/users/register" \
    -H "Content-Type: application/json" \
    -d '{"username":"testuser1","email":"testuser1@example.com","password":"password123"}')

if echo "$register_response" | jq . > /dev/null 2>&1; then
    echo "$register_response" | jq .
else
    echo "Error: $register_response"
fi
echo ""

# Login to get token
echo -e "3. ${BLUE}Logging in to get JWT token...${NC}"
login_response=$(curl -s -X POST "$API_URL/api/users/login" \
    -H "Content-Type: application/json" \
    -d '{"username":"testuser1","password":"password123"}')

if echo "$login_response" | jq -e . > /dev/null 2>&1; then
    echo "$login_response" | jq .
    token=$(echo "$login_response" | jq -r .token)
    if [ -n "$token" ]; then
        echo -e "${GREEN}Successfully obtained token${NC}"
    else
        echo -e "${RED}Failed to get token from response${NC}"
        exit 1
    fi
else
    echo -e "${RED}Failed to parse login response: $login_response${NC}"
    exit 1
fi
echo ""

# Get user profile
echo -e "4. ${BLUE}Getting user profile...${NC}"
profile_response=$(curl -s -X GET "$API_URL/api/users/profile" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $token")

echo "Raw response: $profile_response"
if echo "$profile_response" | jq -e . > /dev/null 2>&1; then
    echo "$profile_response" | jq .
else
    echo "Error parsing JSON"
fi
echo ""

# Get account balance
echo -e "5. ${BLUE}Getting account balance...${NC}"
balance_response=$(curl -s -X GET "$API_URL/api/accounts/balance" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $token")

echo "Raw response: $balance_response"
if echo "$balance_response" | jq -e . > /dev/null 2>&1; then
    echo "$balance_response" | jq .
else
    echo "Error parsing JSON"
fi
echo ""

# Register a second user (recipient)
echo -e "6. ${BLUE}Registering a recipient user...${NC}"
recipient_response=$(curl -s -X POST "$API_URL/api/users/register" \
    -H "Content-Type: application/json" \
    -d '{"username":"recipient1","email":"recipient1@example.com","password":"password123"}')

echo "$recipient_response" | jq .
echo ""

# Create a transaction
echo -e "7. ${BLUE}Creating a transaction...${NC}"
transaction_response=$(curl -s -X POST "$API_URL/api/transactions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $token" \
    -d '{"recipient_username":"recipient1","amount":"10.00","currency":"USD","description":"Test payment"}')

echo "$transaction_response" | jq .

# Extract transaction ID
if transaction_id=$(echo "$transaction_response" | jq -r .id 2>/dev/null) && [ "$transaction_id" != "null" ] && [ -n "$transaction_id" ]; then
    echo -e "${GREEN}Transaction created with ID: $transaction_id${NC}"
    echo ""
    
    # Get transaction details
    echo -e "8. ${BLUE}Getting transaction details...${NC}"
    tx_details=$(curl -s -X GET "$API_URL/api/transactions/$transaction_id" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $token")
    
    echo "$tx_details" | jq .
    echo ""
    
    # List all transactions
    echo -e "9. ${BLUE}Listing all transactions...${NC}"
    all_tx=$(curl -s -X GET "$API_URL/api/transactions" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $token")
    
    echo "$all_tx" | jq .
    echo ""
else
    echo -e "${RED}Could not extract transaction ID from response${NC}"
fi

# Test invalid authentication
echo -e "10. ${BLUE}Testing with invalid token...${NC}"
invalid_auth=$(curl -s -X GET "$API_URL/api/users/profile" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer invalid.token.here")

echo "$invalid_auth" | jq .
echo ""

echo -e "${GREEN}API testing completed!${NC}"



================================================
File: test_endpoint.sh
================================================
#!/bin/bash
# Script for endpoint-by-endpoint testing of the Dodo Payments API

set -e

echo "=== Endpoint Tester for Dodo Payments API ==="

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Define server URL
API_URL="http://localhost:8082"

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error: jq is not installed. Please install jq to run this script.${NC}"
    exit 1
fi

# Functions to test each endpoint separately
test_health() {
    echo -e "${BLUE}Testing: Health Check Endpoint${NC}"
    curl -s "${API_URL}/health" | jq .
}

test_register() {
    echo -e "${BLUE}Testing: User Registration${NC}"
    username="testuser$(date +%s)"
    echo -e "${YELLOW}Using username: $username${NC}"
    
    register_data="{\"username\":\"$username\",\"email\":\"$username@example.com\",\"password\":\"password123\"}"
    curl -s -X POST "${API_URL}/api/users/register" \
        -H "Content-Type: application/json" \
        -d "$register_data" | jq .
        
    echo -e "${YELLOW}Username $username can be used for further tests${NC}"
    echo "$username" > last_username.txt
}

test_login() {
    echo -e "${BLUE}Testing: User Login${NC}"
    
    # Use the last registered username or a default
    username=$(cat last_username.txt 2>/dev/null || echo "testuser1")
    echo -e "${YELLOW}Using username: $username${NC}"
    
    login_data="{\"username\":\"$username\",\"password\":\"password123\"}"
    login_response=$(curl -s -X POST "${API_URL}/api/users/login" \
        -H "Content-Type: application/json" \
        -d "$login_data")
    
    echo "$login_response" | jq .
    
    # Extract token
    if echo "$login_response" | jq -e '.token' > /dev/null 2>&1; then
        token=$(echo "$login_response" | jq -r '.token')
        echo "$token" > token.txt
        echo -e "${GREEN}Token saved to token.txt${NC}"
    else
        echo -e "${RED}Failed to get token${NC}"
    fi
}

test_profile() {
    echo -e "${BLUE}Testing: Get User Profile${NC}"
    
    if [ ! -f token.txt ]; then
        echo -e "${RED}No token found. Run login test first.${NC}"
        return 1
    fi
    
    token=$(cat token.txt)
    curl -s -X GET "${API_URL}/api/users/profile" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $token" | jq .
}

test_balance() {
    echo -e "${BLUE}Testing: Get Account Balance${NC}"
    
    if [ ! -f token.txt ]; then
        echo -e "${RED}No token found. Run login test first.${NC}"
        return 1
    fi
    
    token=$(cat token.txt)
    curl -s -X GET "${API_URL}/api/accounts/balance" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $token" | jq .
}

test_transaction() {
    echo -e "${BLUE}Testing: Create Transaction${NC}"
    
    if [ ! -f token.txt ]; then
        echo -e "${RED}No token found. Run login test first.${NC}"
        return 1
    fi
    
    # Check if we have a recipient username
    if [ ! -f recipient.txt ]; then
        echo -e "${YELLOW}No recipient found. Creating one...${NC}"
        recipient="recipient$(date +%s)"
        register_data="{\"username\":\"$recipient\",\"email\":\"$recipient@example.com\",\"password\":\"password123\"}"
        curl -s -X POST "${API_URL}/api/users/register" \
            -H "Content-Type: application/json" \
            -d "$register_data" > /dev/null
        echo "$recipient" > recipient.txt
    fi
    
    recipient=$(cat recipient.txt)
    token=$(cat token.txt)
    
    transaction_data="{\"recipient_username\":\"$recipient\",\"amount\":\"5.00\",\"currency\":\"USD\",\"description\":\"Test payment\"}"
    tx_response=$(curl -s -X POST "${API_URL}/api/transactions" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $token" \
        -d "$transaction_data")
    
    echo "$tx_response" | jq .
    
    # Extract transaction ID if available
    if echo "$tx_response" | jq -e '.id' > /dev/null 2>&1; then
        tx_id=$(echo "$tx_response" | jq -r '.id')
        echo "$tx_id" > transaction_id.txt
        echo -e "${GREEN}Transaction ID saved to transaction_id.txt${NC}"
    fi
}

test_get_transaction() {
    echo -e "${BLUE}Testing: Get Transaction Details${NC}"
    
    if [ ! -f token.txt ] || [ ! -f transaction_id.txt ]; then
        echo -e "${RED}Missing token or transaction ID. Run login and transaction test first.${NC}"
        return 1
    fi
    
    token=$(cat token.txt)
    tx_id=$(cat transaction_id.txt)
    
    curl -s -X GET "${API_URL}/api/transactions/$tx_id" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $token" | jq .
}

test_list_transactions() {
    echo -e "${BLUE}Testing: List Transactions${NC}"
    
    if [ ! -f token.txt ]; then
        echo -e "${RED}No token found. Run login test first.${NC}"
        return 1
    fi
    
    token=$(cat token.txt)
    
    curl -s -X GET "${API_URL}/api/transactions" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $token" | jq .
}

# Main menu
echo "Please select an endpoint to test:"
echo "1) Health Check"
echo "2) Register User"
echo "3) Login User"
echo "4) Get User Profile"
echo "5) Get Account Balance"
echo "6) Create Transaction"
echo "7) Get Transaction Details"
echo "8) List Transactions"
echo "9) Run All Tests Sequentially"
echo "0) Exit"

read -p "Enter your choice: " choice

case $choice in
    1) test_health ;;
    2) test_register ;;
    3) test_login ;;
    4) test_profile ;;
    5) test_balance ;;
    6) test_transaction ;;
    7) test_get_transaction ;;
    8) test_list_transactions ;;
    9)
        test_health
        test_register
        test_login
        test_profile
        test_balance
        test_transaction
        test_get_transaction
        test_list_transactions
        ;;
    0) echo "Exiting." ;;
    *) echo -e "${RED}Invalid choice${NC}" ;;
esac



================================================
File: test_fixed_token.sh
================================================
#!/bin/bash
# Script to test the Dodo Payments API with a fixed token mechanism

# Define server URL
API_URL="http://localhost:8082"

# Colors for better output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=== Dodo Payments API Testing (Fixed Token) ===${NC}"

# Check if the API is running
echo -e "1. ${BLUE}Checking if API is running...${NC}"
health_response=$(curl -s "$API_URL/health")
echo "$health_response"
echo ""

# Register a test user with a unique name to avoid conflicts
echo -e "2. ${BLUE}Registering a test user...${NC}"
current_time=$(date +%s)
test_username="testuser_${current_time}"
register_response=$(curl -s -X POST "$API_URL/api/users/register" \
    -H "Content-Type: application/json" \
    -d "{\"username\":\"$test_username\",\"email\":\"$test_username@example.com\",\"password\":\"password123\"}")

echo "Registration response:"
echo "$register_response"
echo ""

# Login to get token - using a different approach
echo -e "3. ${BLUE}Logging in to get JWT token...${NC}"
login_response=$(curl -s -X POST "$API_URL/api/users/login" \
    -H "Content-Type: application/json" \
    -d "{\"username\":\"$test_username\",\"password\":\"password123\"}")

echo "Raw login response:"
echo "$login_response"
echo ""

# Special token extraction that handles potential line breaks
echo -e "4. ${BLUE}Extracting token using custom method...${NC}"
# Save response to a temporary file
echo "$login_response" > login_response.txt

# Extract token using grep and removing line breaks
token=$(grep -o '"token":"[^"]*' login_response.txt | sed 's/"token":"//' | tr -d '\n' | tr -d ' ')

if [ -z "$token" ]; then
    echo -e "${RED}Failed to extract token${NC}"
    exit 1
else
    echo -e "${GREEN}Successfully extracted token${NC}"
    # Save token to a file for inspection
    echo "$token" > clean_token.txt
    echo -e "${GREEN}Clean token saved to clean_token.txt${NC}"
fi
echo ""

# Use the clean token to test an authenticated endpoint
echo -e "5. ${BLUE}Testing profile endpoint with clean token...${NC}"
profile_response=$(curl -s -X GET "$API_URL/api/users/profile" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $token")

echo "Profile response:"
echo "$profile_response"
echo ""

echo -e "${GREEN}API testing complete${NC}"



================================================
File: token.txt
================================================
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlNTZkNTIyNS1jY2IyLTQxZjktODg1ZC0wM2U2YmI1NjkzMWYiLCJleHAiOjE3NDgwMTM0MTQsImlhdCI6MTc0NzkyNzAxNH0.1aRo2AF16UD1GrMcOoaVZaQbWMCVpcO2YBw_rXgzMVU



================================================
File: token_compact_test.sh
================================================
#!/bin/bash
# Simple tool to test token with proper formatting

# Define server URL
API_URL="http://localhost:8082"

# Login with a hardcoded user
echo "Logging in to get token..."
token_response=$(curl -s -X POST "$API_URL/api/users/login" \
    -H "Content-Type: application/json" \
    -d '{"username":"testuser1","password":"password123"}')

echo "Raw token response:"
echo "$token_response"
echo 

# Extract token manually avoiding jq
token=$(echo "$token_response" | grep -o '"token":"[^"]*"' | cut -d':' -f2 | tr -d '"' | tr -d '\n' | tr -d ' ')
echo "Extracted token (manual method):"
echo "$token"
echo

# Test the token
echo "Testing profile endpoint with clean token..."
curl -s -X GET "$API_URL/api/users/profile" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $token"
echo



================================================
File: token_debug.sh
================================================
#!/bin/bash
# Debug script to test token format and JSON parsing issues

# Define server URL
API_URL="http://localhost:8082"

# Colors for better output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=== Dodo Payments API Token Debugging ===${NC}"

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error: jq is not installed. Please install jq to run this script.${NC}"
    exit 1
fi

# Login to get token
echo -e "${BLUE}Logging in to get JWT token...${NC}"
login_response=$(curl -s -X POST "$API_URL/api/users/login" \
    -H "Content-Type: application/json" \
    -d '{"username":"testuser1","password":"password123"}')

echo -e "${BLUE}Raw login response:${NC}"
echo "$login_response"
echo ""

# Attempt to parse response
if echo "$login_response" | jq -e . > /dev/null 2>&1; then
    echo -e "${GREEN}JSON parsing successful${NC}"
    token=$(echo "$login_response" | jq -r .token)
    if [ -n "$token" ]; then
        echo -e "${GREEN}Token extracted: ${NC}"
        echo "$token"
        echo ""
        echo -e "${BLUE}Saving token to file...${NC}"
        echo "$token" > token.txt
        
        # Test profile endpoint with token
        echo -e "${BLUE}Testing profile endpoint...${NC}"
        profile_response=$(curl -v -X GET "$API_URL/api/users/profile" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $token")
        
        echo -e "${BLUE}Raw profile response:${NC}"
        echo "$profile_response"
    else
        echo -e "${RED}Failed to extract token from response${NC}"
    fi
else
    echo -e "${RED}Failed to parse login response as JSON${NC}"
    echo "Error details:"
    echo "$login_response" | jq . 2>&1
fi

echo -e "${GREEN}Debugging completed!${NC}"



================================================
File: token_raw_test.sh
================================================
#!/bin/bash
# Advanced token test script that handles malformed tokens

# Define server URL
API_URL="http://localhost:8082"

# Colors for better output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=== Dodo Payments Token Fix Test ===${NC}"

# Test login endpoint first without trying to parse the response as JSON
echo -e "${BLUE}1. Testing login endpoint (raw response)...${NC}"
login_raw=$(curl -s -X POST "$API_URL/api/users/login" \
    -H "Content-Type: application/json" \
    -d '{"username":"testuser1","password":"password123"}')

echo "Raw login response:"
echo "$login_raw"
echo

# Store the raw login response for analysis
echo "$login_raw" > token_response.json
echo -e "${GREEN}Raw response saved to token_response.json${NC}"
echo

# Check specific endpoints that don't require authentication
echo -e "${BLUE}2. Testing health endpoint...${NC}"
health_response=$(curl -s "$API_URL/health")
echo "$health_response"
echo

# Registering a new test user
echo -e "${BLUE}3. Registering a new test user...${NC}"
register_response=$(curl -s -X POST "$API_URL/api/users/register" \
    -H "Content-Type: application/json" \
    -d '{"username":"testuser_new","email":"testuser_new@example.com","password":"password123"}')

echo "Raw registration response:"
echo "$register_response"
echo

echo -e "${GREEN}Token testing complete. Check token_response.json for token analysis${NC}"



================================================
File: token_response.json
================================================
{"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlNTZkNTIyNS1jY2IyLTQxZjktODg1ZC0wM2U2YmI1NjkzMWYiLCJleHAiOjE3NDgwMTM1MDAsImlhdCI6MTc0NzkyNzEwMH0.BHYc0BPn2YBpn00HKFVtWO6iKW7F9S5mr9HNhcGa6Gg","token_type":"Bearer"}



================================================
File: token_test.sh
================================================
#!/bin/bash
# Script for minimal API testing focusing on the JWT token issue

set -e

echo "=== Minimal Token Test for Dodo Payments API ==="

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Define server URL - use port 8082 as in docker-compose
API_URL="http://localhost:8082"

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error: jq is not installed. Please install jq to run this script.${NC}"
    exit 1
fi

echo -e "${BLUE}Checking if API is running...${NC}"
health_response=$(curl -s "${API_URL}/health")
echo "$health_response" | jq .
echo ""

# Register a test user
echo -e "${BLUE}Registering a test user...${NC}"
register_data='{"username":"testuser2","email":"testuser2@example.com","password":"password123"}'
register_response=$(curl -s -X POST "${API_URL}/api/users/register" \
    -H "Content-Type: application/json" \
    -d "$register_data")
echo "$register_response" | jq .
echo ""

# Login to get token with explicit output redirection
echo -e "${BLUE}Logging in to get JWT token...${NC}"
login_data='{"username":"testuser2","password":"password123"}'
login_response=$(curl -s -X POST "${API_URL}/api/users/login" \
    -H "Content-Type: application/json" \
    -d "$login_data" -o token_response.json)

echo -e "${YELLOW}Token response saved to token_response.json${NC}"
echo -e "${YELLOW}Analyzing token response...${NC}"

# Check the file and try to extract token
if [ -f "token_response.json" ]; then
    file_size=$(wc -c < token_response.json)
    echo -e "${BLUE}Response file size: $file_size bytes${NC}"
    
    # Try to parse as JSON
    if cat token_response.json | jq -e . > /dev/null 2>&1; then
        echo -e "${GREEN}Response is valid JSON${NC}"
        cat token_response.json | jq .
        
        # Extract token
        token=$(cat token_response.json | jq -r '.token')
        if [ "$token" == "null" ] || [ -z "$token" ]; then
            echo -e "${RED}Token is null or empty${NC}"
        else
            echo -e "${GREEN}Token extracted: ${token:0:15}...${NC}"
            
            # Save token to a file for inspection
            echo "$token" > token.txt
            echo -e "${YELLOW}Token saved to token.txt${NC}"
            
            # Use hexdump to check for any binary or non-printable characters
            echo -e "${YELLOW}Hexdump of token:${NC}"
            hexdump -C token.txt | head -10
            
            # Try to make a request with this token
            echo -e "${BLUE}Testing token with a profile request...${NC}"
            profile_response=$(curl -s -X GET "${API_URL}/api/users/profile" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $token" \
                -o profile_response.json)
                
            echo -e "${YELLOW}Profile response saved to profile_response.json${NC}"
            
            if [ -f "profile_response.json" ]; then
                if cat profile_response.json | jq -e . > /dev/null 2>&1; then
                    echo -e "${GREEN}Profile response is valid JSON${NC}"
                    cat profile_response.json | jq .
                else
                    echo -e "${RED}Profile response is not valid JSON${NC}"
                    cat profile_response.json
                fi
            fi
        fi
    else
        echo -e "${RED}Response is not valid JSON${NC}"
        cat token_response.json
        
        # Check for encoding issues
        echo -e "${YELLOW}First 100 bytes of response (hex):${NC}"
        hexdump -C token_response.json | head -5
    fi
else
    echo -e "${RED}Response file was not created${NC}"
fi

echo -e "${GREEN}Test completed${NC}"



================================================
File: wait-for-db.sh
================================================
#!/bin/bash
# wait-for-db.sh: Wait for PostgreSQL to be ready

set -e

host="$1"
port="$2"
shift 2
cmd="$@"

echo "Waiting for PostgreSQL at $host:$port..."
until PGPASSWORD=$POSTGRES_PASSWORD psql -h "$host" -U "$POSTGRES_USER" -p "$port" -d "$POSTGRES_DB" -c '\q'; do
  >&2 echo "PostgreSQL is unavailable - sleeping"
  sleep 1
done

>&2 echo "PostgreSQL is up - executing command"
exec $cmd


================================================
File: .env.template
================================================
# Environment variables for Dodo Payments
# Copy this file to .env and adjust as needed

# Database connection
DATABASE_URL=postgres://postgres:password@db:5432/dodo_payments
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_DB=dodo_payments

# Server configuration
SERVER_ADDR=0.0.0.0:8080
RUST_LOG=info

# Features
SQLX_OFFLINE=true

# Security
# JWT_SECRET=your_secret_key_here
# If not provided, the app will look for jwt_secret.txt



================================================
File: migrations/20250521000001_initial_schema.sql
================================================
-- -- Create users table
-- CREATE TABLE IF NOT EXISTS users (
--     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--     username VARCHAR(50) NOT NULL UNIQUE,
--     email VARCHAR(255) NOT NULL UNIQUE,
--     password_hash VARCHAR(255) NOT NULL,
--     created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
--     updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
-- );

-- -- Create accounts table
-- CREATE TABLE IF NOT EXISTS accounts (
--     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--     user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
--     balance NUMERIC(19, 4) NOT NULL DEFAULT 0,
--     currency VARCHAR(3) NOT NULL DEFAULT 'USD',
--     created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
--     updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
--     UNIQUE(user_id, currency)
-- );

-- -- Create transaction status enum
-- DO $$ 
-- BEGIN 
--     IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'transaction_status') THEN
--         CREATE TYPE transaction_status AS ENUM ('pending', 'completed', 'failed');
--     END IF;
-- END $$;

-- -- Create transactions table
-- CREATE TABLE IF NOT EXISTS transactions (
--     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--     sender_id UUID NOT NULL REFERENCES users(id),
--     recipient_id UUID NOT NULL REFERENCES users(id),
--     amount NUMERIC(19, 4) NOT NULL,
--     currency VARCHAR(3) NOT NULL,
--     status transaction_status NOT NULL DEFAULT 'pending',
--     created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
--     updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
-- );

-- -- Create trigger to update the updated_at timestamp automatically
-- CREATE OR REPLACE FUNCTION update_updated_at_column()
-- RETURNS TRIGGER AS $$
-- BEGIN
--     NEW.updated_at = NOW();
--     RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;

-- -- Apply trigger to users table
-- DROP TRIGGER IF EXISTS update_users_updated_at ON users;
-- CREATE TRIGGER update_users_updated_at
-- BEFORE UPDATE ON users
-- FOR EACH ROW
-- EXECUTE FUNCTION update_updated_at_column();

-- -- Apply trigger to accounts table
-- DROP TRIGGER IF EXISTS update_accounts_updated_at ON accounts;
-- CREATE TRIGGER update_accounts_updated_at
-- BEFORE UPDATE ON accounts
-- FOR EACH ROW
-- EXECUTE FUNCTION update_updated_at_column();

-- -- Apply trigger to transactions table
-- DROP TRIGGER IF EXISTS update_transactions_updated_at ON transactions;
-- CREATE TRIGGER update_transactions_updated_at
-- BEFORE UPDATE ON transactions
-- FOR EACH ROW
-- EXECUTE FUNCTION update_updated_at_column();

-- -- Create indexes for better performance
-- CREATE INDEX IF NOT EXISTS idx_transactions_sender_id ON transactions(sender_id);
-- CREATE INDEX IF NOT EXISTS idx_transactions_recipient_id ON transactions(recipient_id);
-- CREATE INDEX IF NOT EXISTS idx_accounts_user_id ON accounts(user_id);



-- Initial schema for Dodo Payments

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Create indices for users
CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);

-- Accounts table
CREATE TABLE IF NOT EXISTS accounts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    balance NUMERIC(15, 2) NOT NULL DEFAULT 0.00,
    currency VARCHAR(3) NOT NULL DEFAULT 'USD',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Create indices for accounts
CREATE INDEX IF NOT EXISTS idx_accounts_user_id ON accounts(user_id);

-- Transactions table
CREATE TABLE IF NOT EXISTS transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sender_id UUID NOT NULL REFERENCES users(id),
    receiver_id UUID NOT NULL REFERENCES users(id),
    amount NUMERIC(15, 2) NOT NULL,
    description TEXT,
    status VARCHAR(20) NOT NULL DEFAULT 'pending',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Create indices for transactions
CREATE INDEX IF NOT EXISTS idx_transactions_sender_id ON transactions(sender_id);
CREATE INDEX IF NOT EXISTS idx_transactions_receiver_id ON transactions(receiver_id);
CREATE INDEX IF NOT EXISTS idx_transactions_status ON transactions(status);
CREATE INDEX IF NOT EXISTS idx_transactions_created_at ON transactions(created_at DESC);


================================================
File: migrations/20250521000002_sample_data.sql
================================================
-- Sample data for development

-- Create extension if it doesn't exist
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- Insert sample users (password is 'password123')
INSERT INTO users (username, email, password_hash)
VALUES 
    ('user1', 'user1@example.com', '$argon2id$v=19$m=16,t=2,p=1$cGFzc3dvcmQxMjM$ZyQUfIT6WJGk+p8WAZ6uOA'),
    ('user2', 'user2@example.com', '$argon2id$v=19$m=16,t=2,p=1$cGFzc3dvcmQxMjM$ZyQUfIT6WJGk+p8WAZ6uOA')
ON CONFLICT (username) DO NOTHING;

-- Insert initial account balances
INSERT INTO accounts (user_id, balance, currency)
SELECT id, 1000.00, 'USD' FROM users WHERE username = 'user1'
ON CONFLICT (id) DO NOTHING;

INSERT INTO accounts (user_id, balance, currency)
SELECT id, 500.00, 'USD' FROM users WHERE username = 'user2'
ON CONFLICT (id) DO NOTHING;

-- Insert sample transaction
INSERT INTO transactions (sender_id, receiver_id, amount, description, status)
SELECT 
    (SELECT id FROM users WHERE username = 'user1'),
    (SELECT id FROM users WHERE username = 'user2'),
    100.00,
    'Sample payment',
    'completed'
WHERE EXISTS (SELECT 1 FROM users WHERE username = 'user1')
  AND EXISTS (SELECT 1 FROM users WHERE username = 'user2')
  AND NOT EXISTS (
      SELECT 1 FROM transactions 
      WHERE description = 'Sample payment' 
      AND sender_id = (SELECT id FROM users WHERE username = 'user1')
      AND receiver_id = (SELECT id FROM users WHERE username = 'user2')
  );


================================================
File: migrations/20250521110000_create_initial_schema.sql
================================================



================================================
File: migrations/schema.sql
================================================
-- Create extension for UUID generation
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Create users table
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create accounts table
CREATE TABLE IF NOT EXISTS accounts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    balance NUMERIC(19, 4) NOT NULL DEFAULT 0,
    currency VARCHAR(3) NOT NULL DEFAULT 'USD',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE(user_id, currency)
);

-- Create transactions table
CREATE TABLE IF NOT EXISTS transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sender_id UUID NOT NULL REFERENCES users(id),
    recipient_id UUID NOT NULL REFERENCES users(id),
    amount NUMERIC(19, 4) NOT NULL,
    currency VARCHAR(3) NOT NULL,
    status INTEGER NOT NULL DEFAULT 0, -- 0: pending, 1: completed, 2: failed
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create trigger to update the updated_at timestamp automatically
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply trigger to users table
CREATE TRIGGER update_users_updated_at
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Apply trigger to accounts table
CREATE TRIGGER update_accounts_updated_at
BEFORE UPDATE ON accounts
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Apply trigger to transactions table
CREATE TRIGGER update_transactions_updated_at
BEFORE UPDATE ON transactions
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Create indexes for faster lookups
CREATE INDEX IF NOT EXISTS idx_accounts_user_id ON accounts(user_id);
CREATE INDEX IF NOT EXISTS idx_transactions_sender_id ON transactions(sender_id);
CREATE INDEX IF NOT EXISTS idx_transactions_recipient_id ON transactions(recipient_id);
CREATE INDEX IF NOT EXISTS idx_transactions_created_at ON transactions(created_at DESC);



================================================
File: postgres-data/PG_VERSION
================================================
13



================================================
File: postgres-data/pg_hba.conf
================================================
# PostgreSQL Client Authentication Configuration File
# ===================================================
#
# Refer to the "Client Authentication" section in the PostgreSQL
# documentation for a complete description of this file.  A short
# synopsis follows.
#
# This file controls: which hosts are allowed to connect, how clients
# are authenticated, which PostgreSQL user names they can use, which
# databases they can access.  Records take one of these forms:
#
# local         DATABASE  USER  METHOD  [OPTIONS]
# host          DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostssl       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnossl     DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostgssenc    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnogssenc  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
#
# (The uppercase items must be replaced by actual values.)
#
# The first field is the connection type: "local" is a Unix-domain
# socket, "host" is either a plain or SSL-encrypted TCP/IP socket,
# "hostssl" is an SSL-encrypted TCP/IP socket, and "hostnossl" is a
# non-SSL TCP/IP socket.  Similarly, "hostgssenc" uses a
# GSSAPI-encrypted TCP/IP socket, while "hostnogssenc" uses a
# non-GSSAPI socket.
#
# DATABASE can be "all", "sameuser", "samerole", "replication", a
# database name, or a comma-separated list thereof. The "all"
# keyword does not match "replication". Access to replication
# must be enabled in a separate record (see example below).
#
# USER can be "all", a user name, a group name prefixed with "+", or a
# comma-separated list thereof.  In both the DATABASE and USER fields
# you can also write a file name prefixed with "@" to include names
# from a separate file.
#
# ADDRESS specifies the set of hosts the record matches.  It can be a
# host name, or it is made up of an IP address and a CIDR mask that is
# an integer (between 0 and 32 (IPv4) or 128 (IPv6) inclusive) that
# specifies the number of significant bits in the mask.  A host name
# that starts with a dot (.) matches a suffix of the actual host name.
# Alternatively, you can write an IP address and netmask in separate
# columns to specify the set of hosts.  Instead of a CIDR-address, you
# can write "samehost" to match any of the server's own IP addresses,
# or "samenet" to match any address in any subnet that the server is
# directly connected to.
#
# METHOD can be "trust", "reject", "md5", "password", "scram-sha-256",
# "gss", "sspi", "ident", "peer", "pam", "ldap", "radius" or "cert".
# Note that "password" sends passwords in clear text; "md5" or
# "scram-sha-256" are preferred since they send encrypted passwords.
#
# OPTIONS are a set of options for the authentication in the format
# NAME=VALUE.  The available options depend on the different
# authentication methods -- refer to the "Client Authentication"
# section in the documentation for a list of which options are
# available for which authentication methods.
#
# Database and user names containing spaces, commas, quotes and other
# special characters must be quoted.  Quoting one of the keywords
# "all", "sameuser", "samerole" or "replication" makes the name lose
# its special character, and just match a database or username with
# that name.
#
# This file is read on server startup and when the server receives a
# SIGHUP signal.  If you edit the file on a running system, you have to
# SIGHUP the server for the changes to take effect, run "pg_ctl reload",
# or execute "SELECT pg_reload_conf()".
#
# Put your actual configuration here
# ----------------------------------
#
# If you want to allow non-local connections, you need to add more
# "host" records.  In that case you will also need to make PostgreSQL
# listen on a non-local interface via the listen_addresses
# configuration parameter, or via the -i or -h command line switches.

# CAUTION: Configuring the system for local "trust" authentication
# allows any local user to connect as any PostgreSQL user, including
# the database superuser.  If you do not trust all your local users,
# use another authentication method.


# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
# IPv6 local connections:
host    all             all             ::1/128                 trust
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     trust
host    replication     all             127.0.0.1/32            trust
host    replication     all             ::1/128                 trust

host all all all md5



================================================
File: postgres-data/pg_ident.conf
================================================
# PostgreSQL User Name Maps
# =========================
#
# Refer to the PostgreSQL documentation, chapter "Client
# Authentication" for a complete description.  A short synopsis
# follows.
#
# This file controls PostgreSQL user name mapping.  It maps external
# user names to their corresponding PostgreSQL user names.  Records
# are of the form:
#
# MAPNAME  SYSTEM-USERNAME  PG-USERNAME
#
# (The uppercase quantities must be replaced by actual values.)
#
# MAPNAME is the (otherwise freely chosen) map name that was used in
# pg_hba.conf.  SYSTEM-USERNAME is the detected user name of the
# client.  PG-USERNAME is the requested PostgreSQL user name.  The
# existence of a record specifies that SYSTEM-USERNAME may connect as
# PG-USERNAME.
#
# If SYSTEM-USERNAME starts with a slash (/), it will be treated as a
# regular expression.  Optionally this can contain a capture (a
# parenthesized subexpression).  The substring matching the capture
# will be substituted for \1 (backslash-one) if present in
# PG-USERNAME.
#
# Multiple maps may be specified in this file and used by pg_hba.conf.
#
# No map names are defined in the default configuration.  If all
# system user names and PostgreSQL user names are the same, you don't
# need anything in this file.
#
# This file is read on server startup and when the postmaster receives
# a SIGHUP signal.  If you edit the file on a running system, you have
# to SIGHUP the postmaster for the changes to take effect.  You can
# use "pg_ctl reload" to do that.

# Put your actual configuration here
# ----------------------------------

# MAPNAME       SYSTEM-USERNAME         PG-USERNAME



================================================
File: postgres-data/postgresql.auto.conf
================================================
# Do not edit this file manually!
# It will be overwritten by the ALTER SYSTEM command.



================================================
File: postgres-data/postgresql.conf
================================================
# -----------------------------
# PostgreSQL configuration file
# -----------------------------
#
# This file consists of lines of the form:
#
#   name = value
#
# (The "=" is optional.)  Whitespace may be used.  Comments are introduced with
# "#" anywhere on a line.  The complete list of parameter names and allowed
# values can be found in the PostgreSQL documentation.
#
# The commented-out settings shown in this file represent the default values.
# Re-commenting a setting is NOT sufficient to revert it to the default value;
# you need to reload the server.
#
# This file is read on server startup and when the server receives a SIGHUP
# signal.  If you edit the file on a running system, you have to SIGHUP the
# server for the changes to take effect, run "pg_ctl reload", or execute
# "SELECT pg_reload_conf()".  Some parameters, which are marked below,
# require a server shutdown and restart to take effect.
#
# Any parameter can also be given as a command-line option to the server, e.g.,
# "postgres -c log_connections=on".  Some parameters can be changed at run time
# with the "SET" SQL command.
#
# Memory units:  B  = bytes            Time units:  us  = microseconds
#                kB = kilobytes                     ms  = milliseconds
#                MB = megabytes                     s   = seconds
#                GB = gigabytes                     min = minutes
#                TB = terabytes                     h   = hours
#                                                   d   = days


#------------------------------------------------------------------------------
# FILE LOCATIONS
#------------------------------------------------------------------------------

# The default values of these variables are driven from the -D command-line
# option or PGDATA environment variable, represented here as ConfigDir.

#data_directory = 'ConfigDir'		# use data in another directory
					# (change requires restart)
#hba_file = 'ConfigDir/pg_hba.conf'	# host-based authentication file
					# (change requires restart)
#ident_file = 'ConfigDir/pg_ident.conf'	# ident configuration file
					# (change requires restart)

# If external_pid_file is not explicitly set, no extra PID file is written.
#external_pid_file = ''			# write an extra PID file
					# (change requires restart)


#------------------------------------------------------------------------------
# CONNECTIONS AND AUTHENTICATION
#------------------------------------------------------------------------------

# - Connection Settings -

listen_addresses = '*'
					# comma-separated list of addresses;
					# defaults to 'localhost'; use '*' for all
					# (change requires restart)
#port = 5432				# (change requires restart)
max_connections = 100			# (change requires restart)
#superuser_reserved_connections = 3	# (change requires restart)
#unix_socket_directories = '/var/run/postgresql'	# comma-separated list of directories
					# (change requires restart)
#unix_socket_group = ''			# (change requires restart)
#unix_socket_permissions = 0777		# begin with 0 to use octal notation
					# (change requires restart)
#bonjour = off				# advertise server via Bonjour
					# (change requires restart)
#bonjour_name = ''			# defaults to the computer name
					# (change requires restart)

# - TCP settings -
# see "man tcp" for details

#tcp_keepalives_idle = 0		# TCP_KEEPIDLE, in seconds;
					# 0 selects the system default
#tcp_keepalives_interval = 0		# TCP_KEEPINTVL, in seconds;
					# 0 selects the system default
#tcp_keepalives_count = 0		# TCP_KEEPCNT;
					# 0 selects the system default
#tcp_user_timeout = 0			# TCP_USER_TIMEOUT, in milliseconds;
					# 0 selects the system default

# - Authentication -

#authentication_timeout = 1min		# 1s-600s
#password_encryption = md5		# md5 or scram-sha-256
#db_user_namespace = off

# GSSAPI using Kerberos
#krb_server_keyfile = 'FILE:${sysconfdir}/krb5.keytab'
#krb_caseins_users = off

# - SSL -

#ssl = off
#ssl_ca_file = ''
#ssl_cert_file = 'server.crt'
#ssl_crl_file = ''
#ssl_key_file = 'server.key'
#ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL' # allowed SSL ciphers
#ssl_prefer_server_ciphers = on
#ssl_ecdh_curve = 'prime256v1'
#ssl_min_protocol_version = 'TLSv1.2'
#ssl_max_protocol_version = ''
#ssl_dh_params_file = ''
#ssl_passphrase_command = ''
#ssl_passphrase_command_supports_reload = off


#------------------------------------------------------------------------------
# RESOURCE USAGE (except WAL)
#------------------------------------------------------------------------------

# - Memory -

shared_buffers = 128MB			# min 128kB
					# (change requires restart)
#huge_pages = try			# on, off, or try
					# (change requires restart)
#temp_buffers = 8MB			# min 800kB
#max_prepared_transactions = 0		# zero disables the feature
					# (change requires restart)
# Caution: it is not advisable to set max_prepared_transactions nonzero unless
# you actively intend to use prepared transactions.
#work_mem = 4MB				# min 64kB
#hash_mem_multiplier = 1.0		# 1-1000.0 multiplier on hash table work_mem
#maintenance_work_mem = 64MB		# min 1MB
#autovacuum_work_mem = -1		# min 1MB, or -1 to use maintenance_work_mem
#logical_decoding_work_mem = 64MB	# min 64kB
#max_stack_depth = 2MB			# min 100kB
#shared_memory_type = mmap		# the default is the first option
					# supported by the operating system:
					#   mmap
					#   sysv
					#   windows
					# (change requires restart)
dynamic_shared_memory_type = posix	# the default is the first option
					# supported by the operating system:
					#   posix
					#   sysv
					#   windows
					#   mmap
					# (change requires restart)

# - Disk -

#temp_file_limit = -1			# limits per-process temp file space
					# in kilobytes, or -1 for no limit

# - Kernel Resources -

#max_files_per_process = 1000		# min 64
					# (change requires restart)

# - Cost-Based Vacuum Delay -

#vacuum_cost_delay = 0			# 0-100 milliseconds (0 disables)
#vacuum_cost_page_hit = 1		# 0-10000 credits
#vacuum_cost_page_miss = 10		# 0-10000 credits
#vacuum_cost_page_dirty = 20		# 0-10000 credits
#vacuum_cost_limit = 200		# 1-10000 credits

# - Background Writer -

#bgwriter_delay = 200ms			# 10-10000ms between rounds
#bgwriter_lru_maxpages = 100		# max buffers written/round, 0 disables
#bgwriter_lru_multiplier = 2.0		# 0-10.0 multiplier on buffers scanned/round
#bgwriter_flush_after = 512kB		# measured in pages, 0 disables

# - Asynchronous Behavior -

#effective_io_concurrency = 1		# 1-1000; 0 disables prefetching
#maintenance_io_concurrency = 10	# 1-1000; 0 disables prefetching
#max_worker_processes = 8		# (change requires restart)
#max_parallel_maintenance_workers = 2	# limited by max_parallel_workers
#max_parallel_workers_per_gather = 2	# limited by max_parallel_workers
#parallel_leader_participation = on
#max_parallel_workers = 8		# number of max_worker_processes that
					# can be used in parallel operations
#old_snapshot_threshold = -1		# 1min-60d; -1 disables; 0 is immediate
					# (change requires restart)
#backend_flush_after = 0		# measured in pages, 0 disables


#------------------------------------------------------------------------------
# WRITE-AHEAD LOG
#------------------------------------------------------------------------------

# - Settings -

#wal_level = replica			# minimal, replica, or logical
					# (change requires restart)
#fsync = on				# flush data to disk for crash safety
					# (turning this off can cause
					# unrecoverable data corruption)
#synchronous_commit = on		# synchronization level;
					# off, local, remote_write, remote_apply, or on
#wal_sync_method = fsync		# the default is the first option
					# supported by the operating system:
					#   open_datasync
					#   fdatasync (default on Linux and FreeBSD)
					#   fsync
					#   fsync_writethrough
					#   open_sync
#full_page_writes = on			# recover from partial page writes
#wal_compression = off			# enable compression of full-page writes
#wal_log_hints = off			# also do full page writes of non-critical updates
					# (change requires restart)
#wal_init_zero = on			# zero-fill new WAL files
#wal_recycle = on			# recycle WAL files
#wal_buffers = -1			# min 32kB, -1 sets based on shared_buffers
					# (change requires restart)
#wal_writer_delay = 200ms		# 1-10000 milliseconds
#wal_writer_flush_after = 1MB		# measured in pages, 0 disables
#wal_skip_threshold = 2MB

#commit_delay = 0			# range 0-100000, in microseconds
#commit_siblings = 5			# range 1-1000

# - Checkpoints -

#checkpoint_timeout = 5min		# range 30s-1d
max_wal_size = 1GB
min_wal_size = 80MB
#checkpoint_completion_target = 0.5	# checkpoint target duration, 0.0 - 1.0
#checkpoint_flush_after = 256kB		# measured in pages, 0 disables
#checkpoint_warning = 30s		# 0 disables

# - Archiving -

#archive_mode = off		# enables archiving; off, on, or always
				# (change requires restart)
#archive_command = ''		# command to use to archive a logfile segment
				# placeholders: %p = path of file to archive
				#               %f = file name only
				# e.g. 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
#archive_timeout = 0		# force a logfile segment switch after this
				# number of seconds; 0 disables

# - Archive Recovery -

# These are only used in recovery mode.

#restore_command = ''		# command to use to restore an archived logfile segment
				# placeholders: %p = path of file to restore
				#               %f = file name only
				# e.g. 'cp /mnt/server/archivedir/%f %p'
				# (change requires restart)
#archive_cleanup_command = ''	# command to execute at every restartpoint
#recovery_end_command = ''	# command to execute at completion of recovery

# - Recovery Target -

# Set these only when performing a targeted recovery.

#recovery_target = ''		# 'immediate' to end recovery as soon as a
                                # consistent state is reached
				# (change requires restart)
#recovery_target_name = ''	# the named restore point to which recovery will proceed
				# (change requires restart)
#recovery_target_time = ''	# the time stamp up to which recovery will proceed
				# (change requires restart)
#recovery_target_xid = ''	# the transaction ID up to which recovery will proceed
				# (change requires restart)
#recovery_target_lsn = ''	# the WAL LSN up to which recovery will proceed
				# (change requires restart)
#recovery_target_inclusive = on # Specifies whether to stop:
				# just after the specified recovery target (on)
				# just before the recovery target (off)
				# (change requires restart)
#recovery_target_timeline = 'latest'	# 'current', 'latest', or timeline ID
				# (change requires restart)
#recovery_target_action = 'pause'	# 'pause', 'promote', 'shutdown'
				# (change requires restart)


#------------------------------------------------------------------------------
# REPLICATION
#------------------------------------------------------------------------------

# - Sending Servers -

# Set these on the master and on any standby that will send replication data.

#max_wal_senders = 10		# max number of walsender processes
				# (change requires restart)
#wal_keep_size = 0		# in megabytes; 0 disables
#max_slot_wal_keep_size = -1	# in megabytes; -1 disables
#wal_sender_timeout = 60s	# in milliseconds; 0 disables

#max_replication_slots = 10	# max number of replication slots
				# (change requires restart)
#track_commit_timestamp = off	# collect timestamp of transaction commit
				# (change requires restart)

# - Master Server -

# These settings are ignored on a standby server.

#synchronous_standby_names = ''	# standby servers that provide sync rep
				# method to choose sync standbys, number of sync standbys,
				# and comma-separated list of application_name
				# from standby(s); '*' = all
#vacuum_defer_cleanup_age = 0	# number of xacts by which cleanup is delayed

# - Standby Servers -

# These settings are ignored on a master server.

#primary_conninfo = ''			# connection string to sending server
#primary_slot_name = ''			# replication slot on sending server
#promote_trigger_file = ''		# file name whose presence ends recovery
#hot_standby = on			# "off" disallows queries during recovery
					# (change requires restart)
#max_standby_archive_delay = 30s	# max delay before canceling queries
					# when reading WAL from archive;
					# -1 allows indefinite delay
#max_standby_streaming_delay = 30s	# max delay before canceling queries
					# when reading streaming WAL;
					# -1 allows indefinite delay
#wal_receiver_create_temp_slot = off	# create temp slot if primary_slot_name
					# is not set
#wal_receiver_status_interval = 10s	# send replies at least this often
					# 0 disables
#hot_standby_feedback = off		# send info from standby to prevent
					# query conflicts
#wal_receiver_timeout = 60s		# time that receiver waits for
					# communication from master
					# in milliseconds; 0 disables
#wal_retrieve_retry_interval = 5s	# time to wait before retrying to
					# retrieve WAL after a failed attempt
#recovery_min_apply_delay = 0		# minimum delay for applying changes during recovery

# - Subscribers -

# These settings are ignored on a publisher.

#max_logical_replication_workers = 4	# taken from max_worker_processes
					# (change requires restart)
#max_sync_workers_per_subscription = 2	# taken from max_logical_replication_workers


#------------------------------------------------------------------------------
# QUERY TUNING
#------------------------------------------------------------------------------

# - Planner Method Configuration -

#enable_bitmapscan = on
#enable_hashagg = on
#enable_hashjoin = on
#enable_indexscan = on
#enable_indexonlyscan = on
#enable_material = on
#enable_mergejoin = on
#enable_nestloop = on
#enable_parallel_append = on
#enable_seqscan = on
#enable_sort = on
#enable_incremental_sort = on
#enable_tidscan = on
#enable_partitionwise_join = off
#enable_partitionwise_aggregate = off
#enable_parallel_hash = on
#enable_partition_pruning = on

# - Planner Cost Constants -

#seq_page_cost = 1.0			# measured on an arbitrary scale
#random_page_cost = 4.0			# same scale as above
#cpu_tuple_cost = 0.01			# same scale as above
#cpu_index_tuple_cost = 0.005		# same scale as above
#cpu_operator_cost = 0.0025		# same scale as above
#parallel_tuple_cost = 0.1		# same scale as above
#parallel_setup_cost = 1000.0	# same scale as above

#jit_above_cost = 100000		# perform JIT compilation if available
					# and query more expensive than this;
					# -1 disables
#jit_inline_above_cost = 500000		# inline small functions if query is
					# more expensive than this; -1 disables
#jit_optimize_above_cost = 500000	# use expensive JIT optimizations if
					# query is more expensive than this;
					# -1 disables

#min_parallel_table_scan_size = 8MB
#min_parallel_index_scan_size = 512kB
#effective_cache_size = 4GB

# - Genetic Query Optimizer -

#geqo = on
#geqo_threshold = 12
#geqo_effort = 5			# range 1-10
#geqo_pool_size = 0			# selects default based on effort
#geqo_generations = 0			# selects default based on effort
#geqo_selection_bias = 2.0		# range 1.5-2.0
#geqo_seed = 0.0			# range 0.0-1.0

# - Other Planner Options -

#default_statistics_target = 100	# range 1-10000
#constraint_exclusion = partition	# on, off, or partition
#cursor_tuple_fraction = 0.1		# range 0.0-1.0
#from_collapse_limit = 8
#join_collapse_limit = 8		# 1 disables collapsing of explicit
					# JOIN clauses
#force_parallel_mode = off
#jit = on				# allow JIT compilation
#plan_cache_mode = auto			# auto, force_generic_plan or
					# force_custom_plan


#------------------------------------------------------------------------------
# REPORTING AND LOGGING
#------------------------------------------------------------------------------

# - Where to Log -

#log_destination = 'stderr'		# Valid values are combinations of
					# stderr, csvlog, syslog, and eventlog,
					# depending on platform.  csvlog
					# requires logging_collector to be on.

# This is used when logging to stderr:
#logging_collector = off		# Enable capturing of stderr and csvlog
					# into log files. Required to be on for
					# csvlogs.
					# (change requires restart)

# These are only used if logging_collector is on:
#log_directory = 'log'			# directory where log files are written,
					# can be absolute or relative to PGDATA
#log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'	# log file name pattern,
					# can include strftime() escapes
#log_file_mode = 0600			# creation mode for log files,
					# begin with 0 to use octal notation
#log_truncate_on_rotation = off		# If on, an existing log file with the
					# same name as the new log file will be
					# truncated rather than appended to.
					# But such truncation only occurs on
					# time-driven rotation, not on restarts
					# or size-driven rotation.  Default is
					# off, meaning append to existing files
					# in all cases.
#log_rotation_age = 1d			# Automatic rotation of logfiles will
					# happen after that time.  0 disables.
#log_rotation_size = 10MB		# Automatic rotation of logfiles will
					# happen after that much log output.
					# 0 disables.

# These are relevant when logging to syslog:
#syslog_facility = 'LOCAL0'
#syslog_ident = 'postgres'
#syslog_sequence_numbers = on
#syslog_split_messages = on

# This is only relevant when logging to eventlog (win32):
# (change requires restart)
#event_source = 'PostgreSQL'

# - When to Log -

#log_min_messages = warning		# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   info
					#   notice
					#   warning
					#   error
					#   log
					#   fatal
					#   panic

#log_min_error_statement = error	# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   info
					#   notice
					#   warning
					#   error
					#   log
					#   fatal
					#   panic (effectively off)

#log_min_duration_statement = -1	# -1 is disabled, 0 logs all statements
					# and their durations, > 0 logs only
					# statements running at least this number
					# of milliseconds

#log_min_duration_sample = -1		# -1 is disabled, 0 logs a sample of statements
					# and their durations, > 0 logs only a sample of
					# statements running at least this number
					# of milliseconds;
					# sample fraction is determined by log_statement_sample_rate

#log_statement_sample_rate = 1.0	# fraction of logged statements exceeding
					# log_min_duration_sample to be logged;
					# 1.0 logs all such statements, 0.0 never logs


#log_transaction_sample_rate = 0.0	# fraction of transactions whose statements
					# are logged regardless of their duration; 1.0 logs all
					# statements from all transactions, 0.0 never logs

# - What to Log -

#debug_print_parse = off
#debug_print_rewritten = off
#debug_print_plan = off
#debug_pretty_print = on
#log_checkpoints = off
#log_connections = off
#log_disconnections = off
#log_duration = off
#log_error_verbosity = default		# terse, default, or verbose messages
#log_hostname = off
#log_line_prefix = '%m [%p] '		# special values:
					#   %a = application name
					#   %u = user name
					#   %d = database name
					#   %r = remote host and port
					#   %h = remote host
					#   %b = backend type
					#   %p = process ID
					#   %t = timestamp without milliseconds
					#   %m = timestamp with milliseconds
					#   %n = timestamp with milliseconds (as a Unix epoch)
					#   %i = command tag
					#   %e = SQL state
					#   %c = session ID
					#   %l = session line number
					#   %s = session start timestamp
					#   %v = virtual transaction ID
					#   %x = transaction ID (0 if none)
					#   %q = stop here in non-session
					#        processes
					#   %% = '%'
					# e.g. '<%u%%%d> '
#log_lock_waits = off			# log lock waits >= deadlock_timeout
#log_parameter_max_length = -1		# when logging statements, limit logged
					# bind-parameter values to N bytes;
					# -1 means print in full, 0 disables
#log_parameter_max_length_on_error = 0	# when logging an error, limit logged
					# bind-parameter values to N bytes;
					# -1 means print in full, 0 disables
#log_statement = 'none'			# none, ddl, mod, all
#log_replication_commands = off
#log_temp_files = -1			# log temporary files equal or larger
					# than the specified size in kilobytes;
					# -1 disables, 0 logs all temp files
log_timezone = 'Etc/UTC'

#------------------------------------------------------------------------------
# PROCESS TITLE
#------------------------------------------------------------------------------

#cluster_name = ''			# added to process titles if nonempty
					# (change requires restart)
#update_process_title = on


#------------------------------------------------------------------------------
# STATISTICS
#------------------------------------------------------------------------------

# - Query and Index Statistics Collector -

#track_activities = on
#track_counts = on
#track_io_timing = off
#track_functions = none			# none, pl, all
#track_activity_query_size = 1024	# (change requires restart)
#stats_temp_directory = 'pg_stat_tmp'


# - Monitoring -

#log_parser_stats = off
#log_planner_stats = off
#log_executor_stats = off
#log_statement_stats = off


#------------------------------------------------------------------------------
# AUTOVACUUM
#------------------------------------------------------------------------------

#autovacuum = on			# Enable autovacuum subprocess?  'on'
					# requires track_counts to also be on.
#log_autovacuum_min_duration = -1	# -1 disables, 0 logs all actions and
					# their durations, > 0 logs only
					# actions running at least this number
					# of milliseconds.
#autovacuum_max_workers = 3		# max number of autovacuum subprocesses
					# (change requires restart)
#autovacuum_naptime = 1min		# time between autovacuum runs
#autovacuum_vacuum_threshold = 50	# min number of row updates before
					# vacuum
#autovacuum_vacuum_insert_threshold = 1000	# min number of row inserts
					# before vacuum; -1 disables insert
					# vacuums
#autovacuum_analyze_threshold = 50	# min number of row updates before
					# analyze
#autovacuum_vacuum_scale_factor = 0.2	# fraction of table size before vacuum
#autovacuum_vacuum_insert_scale_factor = 0.2	# fraction of inserts over table
					# size before insert vacuum
#autovacuum_analyze_scale_factor = 0.1	# fraction of table size before analyze
#autovacuum_freeze_max_age = 200000000	# maximum XID age before forced vacuum
					# (change requires restart)
#autovacuum_multixact_freeze_max_age = 400000000	# maximum multixact age
					# before forced vacuum
					# (change requires restart)
#autovacuum_vacuum_cost_delay = 2ms	# default vacuum cost delay for
					# autovacuum, in milliseconds;
					# -1 means use vacuum_cost_delay
#autovacuum_vacuum_cost_limit = -1	# default vacuum cost limit for
					# autovacuum, -1 means use
					# vacuum_cost_limit


#------------------------------------------------------------------------------
# CLIENT CONNECTION DEFAULTS
#------------------------------------------------------------------------------

# - Statement Behavior -

#client_min_messages = notice		# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   log
					#   notice
					#   warning
					#   error
#search_path = '"$user", public'	# schema names
#row_security = on
#default_tablespace = ''		# a tablespace name, '' uses the default
#temp_tablespaces = ''			# a list of tablespace names, '' uses
					# only default tablespace
#default_table_access_method = 'heap'
#check_function_bodies = on
#default_transaction_isolation = 'read committed'
#default_transaction_read_only = off
#default_transaction_deferrable = off
#session_replication_role = 'origin'
#statement_timeout = 0			# in milliseconds, 0 is disabled
#lock_timeout = 0			# in milliseconds, 0 is disabled
#idle_in_transaction_session_timeout = 0	# in milliseconds, 0 is disabled
#vacuum_freeze_min_age = 50000000
#vacuum_freeze_table_age = 150000000
#vacuum_multixact_freeze_min_age = 5000000
#vacuum_multixact_freeze_table_age = 150000000
#vacuum_cleanup_index_scale_factor = 0.1	# fraction of total number of tuples
						# before index cleanup, 0 always performs
						# index cleanup
#bytea_output = 'hex'			# hex, escape
#xmlbinary = 'base64'
#xmloption = 'content'
#gin_fuzzy_search_limit = 0
#gin_pending_list_limit = 4MB

# - Locale and Formatting -

datestyle = 'iso, mdy'
#intervalstyle = 'postgres'
timezone = 'Etc/UTC'
#timezone_abbreviations = 'Default'     # Select the set of available time zone
					# abbreviations.  Currently, there are
					#   Default
					#   Australia (historical usage)
					#   India
					# You can create your own file in
					# share/timezonesets/.
#extra_float_digits = 1			# min -15, max 3; any value >0 actually
					# selects precise output mode
#client_encoding = sql_ascii		# actually, defaults to database
					# encoding

# These settings are initialized by initdb, but they can be changed.
lc_messages = 'en_US.utf8'			# locale for system error message
					# strings
lc_monetary = 'en_US.utf8'			# locale for monetary formatting
lc_numeric = 'en_US.utf8'			# locale for number formatting
lc_time = 'en_US.utf8'				# locale for time formatting

# default configuration for text search
default_text_search_config = 'pg_catalog.english'

# - Shared Library Preloading -

#shared_preload_libraries = ''	# (change requires restart)
#local_preload_libraries = ''
#session_preload_libraries = ''
#jit_provider = 'llvmjit'		# JIT library to use

# - Other Defaults -

#dynamic_library_path = '$libdir'
#extension_destdir = ''			# prepend path when loading extensions
					# and shared objects (added by Debian)


#------------------------------------------------------------------------------
# LOCK MANAGEMENT
#------------------------------------------------------------------------------

#deadlock_timeout = 1s
#max_locks_per_transaction = 64		# min 10
					# (change requires restart)
#max_pred_locks_per_transaction = 64	# min 10
					# (change requires restart)
#max_pred_locks_per_relation = -2	# negative values mean
					# (max_pred_locks_per_transaction
					#  / -max_pred_locks_per_relation) - 1
#max_pred_locks_per_page = 2            # min 0


#------------------------------------------------------------------------------
# VERSION AND PLATFORM COMPATIBILITY
#------------------------------------------------------------------------------

# - Previous PostgreSQL Versions -

#array_nulls = on
#backslash_quote = safe_encoding	# on, off, or safe_encoding
#escape_string_warning = on
#lo_compat_privileges = off
#operator_precedence_warning = off
#quote_all_identifiers = off
#standard_conforming_strings = on
#synchronize_seqscans = on

# - Other Platforms and Clients -

#transform_null_equals = off


#------------------------------------------------------------------------------
# ERROR HANDLING
#------------------------------------------------------------------------------

#exit_on_error = off			# terminate session on any error?
#restart_after_crash = on		# reinitialize after backend crash?
#data_sync_retry = off			# retry or panic on failure to fsync
					# data?
					# (change requires restart)


#------------------------------------------------------------------------------
# CONFIG FILE INCLUDES
#------------------------------------------------------------------------------

# These options allow settings to be loaded from files other than the
# default postgresql.conf.  Note that these are directives, not variable
# assignments, so they can usefully be given more than once.

#include_dir = '...'			# include files ending in '.conf' from
					# a directory, e.g., 'conf.d'
#include_if_exists = '...'		# include file only if it exists
#include = '...'			# include file


#------------------------------------------------------------------------------
# CUSTOMIZED OPTIONS
#------------------------------------------------------------------------------

# Add settings for extensions here



================================================
File: postgres-data/postmaster.opts
================================================
/usr/lib/postgresql/13/bin/postgres



================================================
File: postgres-data/base/1/112
================================================
[Non-text file]


================================================
File: postgres-data/base/1/113
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1247
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1247_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1247_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1249
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1249_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1249_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1255
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1255_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1255_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1259
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1259_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1259_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13318
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13318_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13318_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13320
================================================



================================================
File: postgres-data/base/1/13322
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13323
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13323_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13323_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13325
================================================



================================================
File: postgres-data/base/1/13327
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13328
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13328_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13328_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13330
================================================



================================================
File: postgres-data/base/1/13332
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13333
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13333_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13333_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/13335
================================================



================================================
File: postgres-data/base/1/13337
================================================
[Non-text file]


================================================
File: postgres-data/base/1/1417
================================================



================================================
File: postgres-data/base/1/1418
================================================



================================================
File: postgres-data/base/1/174
================================================
[Non-text file]


================================================
File: postgres-data/base/1/175
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2187
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2224
================================================



================================================
File: postgres-data/base/1/2328
================================================



================================================
File: postgres-data/base/1/2336
================================================



================================================
File: postgres-data/base/1/2337
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2579
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2600
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2600_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2600_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2601
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2601_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2601_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2602
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2602_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2602_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2603
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2603_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2603_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2604
================================================



================================================
File: postgres-data/base/1/2605
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2605_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2605_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2606
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2606_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2606_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2607
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2607_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2607_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2608
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2608_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2608_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2609
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2609_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2609_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2610
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2610_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2610_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2611
================================================



================================================
File: postgres-data/base/1/2612
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2612_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2612_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2613
================================================



================================================
File: postgres-data/base/1/2615
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2615_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2615_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2616
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2616_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2616_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2617
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2617_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2617_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2618
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2618_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2618_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2619
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2619_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2619_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2620
================================================



================================================
File: postgres-data/base/1/2650
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2651
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2652
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2653
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2654
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2655
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2656
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2657
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2658
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2659
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2660
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2661
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2662
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2663
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2664
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2665
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2666
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2667
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2668
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2669
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2670
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2673
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2674
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2675
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2678
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2679
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2680
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2681
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2682
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2683
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2684
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2685
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2686
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2687
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2688
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2689
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2690
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2691
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2692
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2693
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2696
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2699
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2701
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2702
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2703
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2704
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2753
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2753_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2753_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2754
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2755
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2756
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2757
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2830
================================================



================================================
File: postgres-data/base/1/2831
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2832
================================================



================================================
File: postgres-data/base/1/2833
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2834
================================================



================================================
File: postgres-data/base/1/2835
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2836
================================================



================================================
File: postgres-data/base/1/2837
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2838
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2838_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2838_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2839
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2840
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2840_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2840_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2841
================================================
[Non-text file]


================================================
File: postgres-data/base/1/2995
================================================



================================================
File: postgres-data/base/1/2996
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3079
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3079_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3079_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3080
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3081
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3085
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3118
================================================



================================================
File: postgres-data/base/1/3119
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3164
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3256
================================================



================================================
File: postgres-data/base/1/3257
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3258
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3350
================================================



================================================
File: postgres-data/base/1/3351
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3379
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3380
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3381
================================================



================================================
File: postgres-data/base/1/3394
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3394_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3394_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3395
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3429
================================================



================================================
File: postgres-data/base/1/3430
================================================



================================================
File: postgres-data/base/1/3431
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3433
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3439
================================================



================================================
File: postgres-data/base/1/3440
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3455
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3456
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3456_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3456_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3466
================================================



================================================
File: postgres-data/base/1/3467
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3468
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3501
================================================



================================================
File: postgres-data/base/1/3502
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3503
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3534
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3541
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3541_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3541_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3542
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3574
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3575
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3576
================================================



================================================
File: postgres-data/base/1/3596
================================================



================================================
File: postgres-data/base/1/3597
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3598
================================================



================================================
File: postgres-data/base/1/3599
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3600
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3600_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3600_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3601
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3601_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3601_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3602
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3602_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3602_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3603
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3603_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3603_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3604
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3605
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3606
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3607
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3608
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3609
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3712
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3764
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3764_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3764_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3766
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3767
================================================
[Non-text file]


================================================
File: postgres-data/base/1/3997
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4143
================================================



================================================
File: postgres-data/base/1/4144
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4145
================================================



================================================
File: postgres-data/base/1/4146
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4147
================================================



================================================
File: postgres-data/base/1/4148
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4149
================================================



================================================
File: postgres-data/base/1/4150
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4151
================================================



================================================
File: postgres-data/base/1/4152
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4153
================================================



================================================
File: postgres-data/base/1/4154
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4155
================================================



================================================
File: postgres-data/base/1/4156
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4157
================================================



================================================
File: postgres-data/base/1/4158
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4159
================================================



================================================
File: postgres-data/base/1/4160
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4161
================================================



================================================
File: postgres-data/base/1/4162
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4163
================================================



================================================
File: postgres-data/base/1/4164
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4165
================================================



================================================
File: postgres-data/base/1/4166
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4167
================================================



================================================
File: postgres-data/base/1/4168
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4169
================================================



================================================
File: postgres-data/base/1/4170
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4171
================================================



================================================
File: postgres-data/base/1/4172
================================================
[Non-text file]


================================================
File: postgres-data/base/1/4173
================================================



================================================
File: postgres-data/base/1/4174
================================================
[Non-text file]


================================================
File: postgres-data/base/1/5002
================================================
[Non-text file]


================================================
File: postgres-data/base/1/548
================================================
[Non-text file]


================================================
File: postgres-data/base/1/549
================================================
[Non-text file]


================================================
File: postgres-data/base/1/6102
================================================



================================================
File: postgres-data/base/1/6104
================================================



================================================
File: postgres-data/base/1/6106
================================================



================================================
File: postgres-data/base/1/6110
================================================
[Non-text file]


================================================
File: postgres-data/base/1/6111
================================================
[Non-text file]


================================================
File: postgres-data/base/1/6112
================================================
[Non-text file]


================================================
File: postgres-data/base/1/6113
================================================
[Non-text file]


================================================
File: postgres-data/base/1/6117
================================================
[Non-text file]


================================================
File: postgres-data/base/1/826
================================================



================================================
File: postgres-data/base/1/827
================================================
[Non-text file]


================================================
File: postgres-data/base/1/828
================================================
[Non-text file]


================================================
File: postgres-data/base/1/PG_VERSION
================================================
13



================================================
File: postgres-data/base/13467/112
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/113
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1247
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1247_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1247_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1249
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1249_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1249_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1255
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1255_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1255_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1259
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1259_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1259_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13318
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13318_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13318_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13320
================================================



================================================
File: postgres-data/base/13467/13322
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13323
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13323_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13323_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13325
================================================



================================================
File: postgres-data/base/13467/13327
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13328
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13328_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13328_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13330
================================================



================================================
File: postgres-data/base/13467/13332
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13333
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13333_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13333_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/13335
================================================



================================================
File: postgres-data/base/13467/13337
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/1417
================================================



================================================
File: postgres-data/base/13467/1418
================================================



================================================
File: postgres-data/base/13467/174
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/175
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2187
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2224
================================================



================================================
File: postgres-data/base/13467/2328
================================================



================================================
File: postgres-data/base/13467/2336
================================================



================================================
File: postgres-data/base/13467/2337
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2579
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2600
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2600_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2600_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2601
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2601_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2601_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2602
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2602_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2602_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2603
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2603_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2603_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2604
================================================



================================================
File: postgres-data/base/13467/2605
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2605_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2605_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2606
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2606_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2606_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2607
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2607_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2607_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2608
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2608_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2608_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2609
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2609_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2609_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2610
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2610_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2610_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2611
================================================



================================================
File: postgres-data/base/13467/2612
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2612_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2612_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2613
================================================



================================================
File: postgres-data/base/13467/2615
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2615_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2615_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2616
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2616_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2616_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2617
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2617_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2617_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2618
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2618_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2618_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2619
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2619_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2619_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2620
================================================



================================================
File: postgres-data/base/13467/2650
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2651
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2652
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2653
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2654
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2655
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2656
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2657
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2658
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2659
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2660
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2661
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2662
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2663
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2664
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2665
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2666
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2667
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2668
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2669
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2670
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2673
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2674
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2675
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2678
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2679
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2680
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2681
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2682
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2683
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2684
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2685
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2686
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2687
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2688
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2689
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2690
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2691
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2692
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2693
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2696
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2699
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2701
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2702
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2703
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2704
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2753
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2753_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2753_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2754
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2755
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2756
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2757
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2830
================================================



================================================
File: postgres-data/base/13467/2831
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2832
================================================



================================================
File: postgres-data/base/13467/2833
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2834
================================================



================================================
File: postgres-data/base/13467/2835
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2836
================================================



================================================
File: postgres-data/base/13467/2837
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2838
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2838_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2838_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2839
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2840
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2840_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2840_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2841
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/2995
================================================



================================================
File: postgres-data/base/13467/2996
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3079
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3079_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3079_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3080
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3081
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3085
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3118
================================================



================================================
File: postgres-data/base/13467/3119
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3164
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3256
================================================



================================================
File: postgres-data/base/13467/3257
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3258
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3350
================================================



================================================
File: postgres-data/base/13467/3351
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3379
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3380
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3381
================================================



================================================
File: postgres-data/base/13467/3394
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3394_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3394_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3395
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3429
================================================



================================================
File: postgres-data/base/13467/3430
================================================



================================================
File: postgres-data/base/13467/3431
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3433
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3439
================================================



================================================
File: postgres-data/base/13467/3440
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3455
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3456
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3456_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3456_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3466
================================================



================================================
File: postgres-data/base/13467/3467
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3468
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3501
================================================



================================================
File: postgres-data/base/13467/3502
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3503
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3534
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3541
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3541_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3541_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3542
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3574
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3575
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3576
================================================



================================================
File: postgres-data/base/13467/3596
================================================



================================================
File: postgres-data/base/13467/3597
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3598
================================================



================================================
File: postgres-data/base/13467/3599
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3600
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3600_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3600_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3601
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3601_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3601_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3602
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3602_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3602_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3603
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3603_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3603_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3604
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3605
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3606
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3607
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3608
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3609
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3712
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3764
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3764_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3764_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3766
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3767
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/3997
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4143
================================================



================================================
File: postgres-data/base/13467/4144
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4145
================================================



================================================
File: postgres-data/base/13467/4146
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4147
================================================



================================================
File: postgres-data/base/13467/4148
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4149
================================================



================================================
File: postgres-data/base/13467/4150
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4151
================================================



================================================
File: postgres-data/base/13467/4152
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4153
================================================



================================================
File: postgres-data/base/13467/4154
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4155
================================================



================================================
File: postgres-data/base/13467/4156
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4157
================================================



================================================
File: postgres-data/base/13467/4158
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4159
================================================



================================================
File: postgres-data/base/13467/4160
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4161
================================================



================================================
File: postgres-data/base/13467/4162
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4163
================================================



================================================
File: postgres-data/base/13467/4164
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4165
================================================



================================================
File: postgres-data/base/13467/4166
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4167
================================================



================================================
File: postgres-data/base/13467/4168
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4169
================================================



================================================
File: postgres-data/base/13467/4170
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4171
================================================



================================================
File: postgres-data/base/13467/4172
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/4173
================================================



================================================
File: postgres-data/base/13467/4174
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/5002
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/548
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/549
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/6102
================================================



================================================
File: postgres-data/base/13467/6104
================================================



================================================
File: postgres-data/base/13467/6106
================================================



================================================
File: postgres-data/base/13467/6110
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/6111
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/6112
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/6113
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/6117
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/826
================================================



================================================
File: postgres-data/base/13467/827
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/828
================================================
[Non-text file]


================================================
File: postgres-data/base/13467/PG_VERSION
================================================
13



================================================
File: postgres-data/base/13468/112
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/113
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1247
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1247_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1247_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1249
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1249_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1249_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1255
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1255_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1255_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1259
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1259_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1259_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13318
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13318_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13318_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13320
================================================



================================================
File: postgres-data/base/13468/13322
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13323
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13323_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13323_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13325
================================================



================================================
File: postgres-data/base/13468/13327
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13328
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13328_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13328_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13330
================================================



================================================
File: postgres-data/base/13468/13332
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13333
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13333_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13333_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/13335
================================================



================================================
File: postgres-data/base/13468/13337
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/1417
================================================



================================================
File: postgres-data/base/13468/1418
================================================



================================================
File: postgres-data/base/13468/174
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/175
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2187
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2224
================================================



================================================
File: postgres-data/base/13468/2328
================================================



================================================
File: postgres-data/base/13468/2336
================================================



================================================
File: postgres-data/base/13468/2337
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2579
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2600
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2600_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2600_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2601
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2601_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2601_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2602
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2602_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2602_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2603
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2603_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2603_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2604
================================================



================================================
File: postgres-data/base/13468/2605
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2605_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2605_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2606
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2606_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2606_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2607
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2607_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2607_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2608
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2608_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2608_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2609
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2609_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2609_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2610
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2610_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2610_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2611
================================================



================================================
File: postgres-data/base/13468/2612
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2612_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2612_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2613
================================================



================================================
File: postgres-data/base/13468/2615
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2615_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2615_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2616
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2616_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2616_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2617
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2617_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2617_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2618
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2618_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2618_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2619
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2619_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2619_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2620
================================================



================================================
File: postgres-data/base/13468/2650
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2651
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2652
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2653
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2654
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2655
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2656
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2657
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2658
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2659
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2660
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2661
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2662
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2663
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2664
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2665
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2666
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2667
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2668
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2669
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2670
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2673
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2674
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2675
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2678
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2679
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2680
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2681
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2682
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2683
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2684
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2685
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2686
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2687
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2688
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2689
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2690
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2691
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2692
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2693
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2696
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2699
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2701
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2702
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2703
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2704
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2753
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2753_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2753_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2754
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2755
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2756
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2757
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2830
================================================



================================================
File: postgres-data/base/13468/2831
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2832
================================================



================================================
File: postgres-data/base/13468/2833
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2834
================================================



================================================
File: postgres-data/base/13468/2835
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2836
================================================



================================================
File: postgres-data/base/13468/2837
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2838
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2838_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2838_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2839
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2840
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2840_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2840_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2841
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/2995
================================================



================================================
File: postgres-data/base/13468/2996
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3079
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3079_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3079_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3080
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3081
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3085
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3118
================================================



================================================
File: postgres-data/base/13468/3119
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3164
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3256
================================================



================================================
File: postgres-data/base/13468/3257
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3258
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3350
================================================



================================================
File: postgres-data/base/13468/3351
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3379
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3380
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3381
================================================



================================================
File: postgres-data/base/13468/3394
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3394_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3394_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3395
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3429
================================================



================================================
File: postgres-data/base/13468/3430
================================================



================================================
File: postgres-data/base/13468/3431
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3433
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3439
================================================



================================================
File: postgres-data/base/13468/3440
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3455
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3456
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3456_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3456_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3466
================================================



================================================
File: postgres-data/base/13468/3467
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3468
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3501
================================================



================================================
File: postgres-data/base/13468/3502
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3503
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3534
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3541
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3541_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3541_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3542
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3574
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3575
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3576
================================================



================================================
File: postgres-data/base/13468/3596
================================================



================================================
File: postgres-data/base/13468/3597
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3598
================================================



================================================
File: postgres-data/base/13468/3599
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3600
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3600_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3600_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3601
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3601_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3601_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3602
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3602_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3602_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3603
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3603_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3603_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3604
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3605
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3606
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3607
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3608
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3609
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3712
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3764
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3764_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3764_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3766
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3767
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/3997
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4143
================================================



================================================
File: postgres-data/base/13468/4144
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4145
================================================



================================================
File: postgres-data/base/13468/4146
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4147
================================================



================================================
File: postgres-data/base/13468/4148
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4149
================================================



================================================
File: postgres-data/base/13468/4150
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4151
================================================



================================================
File: postgres-data/base/13468/4152
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4153
================================================



================================================
File: postgres-data/base/13468/4154
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4155
================================================



================================================
File: postgres-data/base/13468/4156
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4157
================================================



================================================
File: postgres-data/base/13468/4158
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4159
================================================



================================================
File: postgres-data/base/13468/4160
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4161
================================================



================================================
File: postgres-data/base/13468/4162
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4163
================================================



================================================
File: postgres-data/base/13468/4164
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4165
================================================



================================================
File: postgres-data/base/13468/4166
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4167
================================================



================================================
File: postgres-data/base/13468/4168
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4169
================================================



================================================
File: postgres-data/base/13468/4170
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4171
================================================



================================================
File: postgres-data/base/13468/4172
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/4173
================================================



================================================
File: postgres-data/base/13468/4174
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/5002
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/548
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/549
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/6102
================================================



================================================
File: postgres-data/base/13468/6104
================================================



================================================
File: postgres-data/base/13468/6106
================================================



================================================
File: postgres-data/base/13468/6110
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/6111
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/6112
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/6113
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/6117
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/826
================================================



================================================
File: postgres-data/base/13468/827
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/828
================================================
[Non-text file]


================================================
File: postgres-data/base/13468/PG_VERSION
================================================
13



================================================
File: postgres-data/base/13468/pg_internal.init
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/112
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/113
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1247
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1247_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1247_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1249
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1249_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1249_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1255
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1255_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1255_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1259
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1259_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1259_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13318
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13318_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13318_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13320
================================================



================================================
File: postgres-data/base/16384/13322
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13323
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13323_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13323_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13325
================================================



================================================
File: postgres-data/base/16384/13327
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13328
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13328_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13328_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13330
================================================



================================================
File: postgres-data/base/16384/13332
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13333
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13333_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13333_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/13335
================================================



================================================
File: postgres-data/base/16384/13337
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/1417
================================================



================================================
File: postgres-data/base/16384/1418
================================================



================================================
File: postgres-data/base/16384/174
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/175
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2187
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2224
================================================



================================================
File: postgres-data/base/16384/2328
================================================



================================================
File: postgres-data/base/16384/2336
================================================



================================================
File: postgres-data/base/16384/2337
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2579
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2600
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2600_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2600_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2601
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2601_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2601_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2602
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2602_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2602_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2603
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2603_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2603_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2604
================================================



================================================
File: postgres-data/base/16384/2605
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2605_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2605_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2606
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2606_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2606_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2607
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2607_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2607_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2608
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2608_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2608_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2609
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2609_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2609_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2610
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2610_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2610_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2611
================================================



================================================
File: postgres-data/base/16384/2612
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2612_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2612_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2613
================================================



================================================
File: postgres-data/base/16384/2615
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2615_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2615_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2616
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2616_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2616_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2617
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2617_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2617_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2618
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2618_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2618_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2619
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2619_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2619_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2620
================================================



================================================
File: postgres-data/base/16384/2650
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2651
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2652
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2653
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2654
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2655
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2656
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2657
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2658
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2659
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2660
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2661
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2662
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2663
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2664
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2665
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2666
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2667
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2668
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2669
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2670
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2673
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2674
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2675
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2678
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2679
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2680
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2681
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2682
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2683
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2684
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2685
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2686
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2687
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2688
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2689
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2690
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2691
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2692
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2693
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2696
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2699
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2701
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2702
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2703
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2704
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2753
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2753_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2753_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2754
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2755
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2756
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2757
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2830
================================================



================================================
File: postgres-data/base/16384/2831
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2832
================================================



================================================
File: postgres-data/base/16384/2833
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2834
================================================



================================================
File: postgres-data/base/16384/2835
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2836
================================================



================================================
File: postgres-data/base/16384/2837
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2838
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2838_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2838_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2839
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2840
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2840_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2840_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2841
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/2995
================================================



================================================
File: postgres-data/base/16384/2996
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3079
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3079_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3079_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3080
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3081
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3085
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3118
================================================



================================================
File: postgres-data/base/16384/3119
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3164
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3256
================================================



================================================
File: postgres-data/base/16384/3257
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3258
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3350
================================================



================================================
File: postgres-data/base/16384/3351
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3379
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3380
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3381
================================================



================================================
File: postgres-data/base/16384/3394
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3394_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3394_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3395
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3429
================================================



================================================
File: postgres-data/base/16384/3430
================================================



================================================
File: postgres-data/base/16384/3431
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3433
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3439
================================================



================================================
File: postgres-data/base/16384/3440
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3455
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3456
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3456_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3456_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3466
================================================



================================================
File: postgres-data/base/16384/3467
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3468
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3501
================================================



================================================
File: postgres-data/base/16384/3502
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3503
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3534
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3541
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3541_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3541_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3542
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3574
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3575
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3576
================================================



================================================
File: postgres-data/base/16384/3596
================================================



================================================
File: postgres-data/base/16384/3597
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3598
================================================



================================================
File: postgres-data/base/16384/3599
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3600
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3600_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3600_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3601
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3601_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3601_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3602
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3602_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3602_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3603
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3603_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3603_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3604
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3605
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3606
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3607
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3608
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3609
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3712
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3764
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3764_fsm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3764_vm
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3766
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3767
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/3997
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4143
================================================



================================================
File: postgres-data/base/16384/4144
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4145
================================================



================================================
File: postgres-data/base/16384/4146
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4147
================================================



================================================
File: postgres-data/base/16384/4148
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4149
================================================



================================================
File: postgres-data/base/16384/4150
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4151
================================================



================================================
File: postgres-data/base/16384/4152
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4153
================================================



================================================
File: postgres-data/base/16384/4154
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4155
================================================



================================================
File: postgres-data/base/16384/4156
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4157
================================================



================================================
File: postgres-data/base/16384/4158
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4159
================================================



================================================
File: postgres-data/base/16384/4160
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4161
================================================



================================================
File: postgres-data/base/16384/4162
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4163
================================================



================================================
File: postgres-data/base/16384/4164
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4165
================================================



================================================
File: postgres-data/base/16384/4166
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4167
================================================



================================================
File: postgres-data/base/16384/4168
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4169
================================================



================================================
File: postgres-data/base/16384/4170
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4171
================================================



================================================
File: postgres-data/base/16384/4172
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/4173
================================================



================================================
File: postgres-data/base/16384/4174
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/5002
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/548
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/549
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/6102
================================================



================================================
File: postgres-data/base/16384/6104
================================================



================================================
File: postgres-data/base/16384/6106
================================================



================================================
File: postgres-data/base/16384/6110
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/6111
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/6112
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/6113
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/6117
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/826
================================================



================================================
File: postgres-data/base/16384/827
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/828
================================================
[Non-text file]


================================================
File: postgres-data/base/16384/PG_VERSION
================================================
13



================================================
File: postgres-data/global/1213
================================================
[Non-text file]


================================================
File: postgres-data/global/1213_fsm
================================================
[Non-text file]


================================================
File: postgres-data/global/1213_vm
================================================
[Non-text file]


================================================
File: postgres-data/global/1214
================================================
[Non-text file]


================================================
File: postgres-data/global/1214_fsm
================================================
[Non-text file]


================================================
File: postgres-data/global/1214_vm
================================================
[Non-text file]


================================================
File: postgres-data/global/1232
================================================
[Non-text file]


================================================
File: postgres-data/global/1233
================================================
[Non-text file]


================================================
File: postgres-data/global/1260
================================================
[Non-text file]


================================================
File: postgres-data/global/1260_fsm
================================================
[Non-text file]


================================================
File: postgres-data/global/1260_vm
================================================
[Non-text file]


================================================
File: postgres-data/global/1261
================================================
[Non-text file]


================================================
File: postgres-data/global/1261_fsm
================================================
[Non-text file]


================================================
File: postgres-data/global/1261_vm
================================================
[Non-text file]


================================================
File: postgres-data/global/1262
================================================
[Non-text file]


================================================
File: postgres-data/global/1262_fsm
================================================
[Non-text file]


================================================
File: postgres-data/global/1262_vm
================================================
[Non-text file]


================================================
File: postgres-data/global/2396
================================================
[Non-text file]


================================================
File: postgres-data/global/2396_fsm
================================================
[Non-text file]


================================================
File: postgres-data/global/2396_vm
================================================
[Non-text file]


================================================
File: postgres-data/global/2397
================================================
[Non-text file]


================================================
File: postgres-data/global/2671
================================================
[Non-text file]


================================================
File: postgres-data/global/2672
================================================
[Non-text file]


================================================
File: postgres-data/global/2676
================================================
[Non-text file]


================================================
File: postgres-data/global/2677
================================================
[Non-text file]


================================================
File: postgres-data/global/2694
================================================
[Non-text file]


================================================
File: postgres-data/global/2695
================================================
[Non-text file]


================================================
File: postgres-data/global/2697
================================================
[Non-text file]


================================================
File: postgres-data/global/2698
================================================
[Non-text file]


================================================
File: postgres-data/global/2846
================================================



================================================
File: postgres-data/global/2847
================================================
[Non-text file]


================================================
File: postgres-data/global/2964
================================================



================================================
File: postgres-data/global/2965
================================================
[Non-text file]


================================================
File: postgres-data/global/2966
================================================



================================================
File: postgres-data/global/2967
================================================
[Non-text file]


================================================
File: postgres-data/global/3592
================================================



================================================
File: postgres-data/global/3593
================================================
[Non-text file]


================================================
File: postgres-data/global/4060
================================================



================================================
File: postgres-data/global/4061
================================================
[Non-text file]


================================================
File: postgres-data/global/4175
================================================



================================================
File: postgres-data/global/4176
================================================
[Non-text file]


================================================
File: postgres-data/global/4177
================================================



================================================
File: postgres-data/global/4178
================================================
[Non-text file]


================================================
File: postgres-data/global/4181
================================================



================================================
File: postgres-data/global/4182
================================================
[Non-text file]


================================================
File: postgres-data/global/4183
================================================



================================================
File: postgres-data/global/4184
================================================
[Non-text file]


================================================
File: postgres-data/global/4185
================================================



================================================
File: postgres-data/global/4186
================================================
[Non-text file]


================================================
File: postgres-data/global/6000
================================================



================================================
File: postgres-data/global/6001
================================================
[Non-text file]


================================================
File: postgres-data/global/6002
================================================
[Non-text file]


================================================
File: postgres-data/global/6100
================================================



================================================
File: postgres-data/global/6114
================================================
[Non-text file]


================================================
File: postgres-data/global/6115
================================================
[Non-text file]


================================================
File: postgres-data/global/pg_control
================================================
[Non-text file]


================================================
File: postgres-data/global/pg_internal.init
================================================
[Non-text file]


================================================
File: postgres-data/pg_logical/replorigin_checkpoint
================================================
[Non-text file]


================================================
File: postgres-data/pg_multixact/members/0000
================================================
[Non-text file]


================================================
File: postgres-data/pg_multixact/offsets/0000
================================================
[Non-text file]


================================================
File: postgres-data/pg_stat/db_0.stat
================================================
[Non-text file]


================================================
File: postgres-data/pg_stat/db_13468.stat
================================================
[Non-text file]


================================================
File: postgres-data/pg_stat/global.stat
================================================
[Non-text file]


================================================
File: postgres-data/pg_subtrans/0000
================================================
[Non-text file]


================================================
File: postgres-data/pg_wal/000000010000000000000001
================================================
[Non-text file]


================================================
File: postgres-data/pg_xact/0000
================================================
[Non-text file]


================================================
File: src/lib.rs
================================================
pub mod config;
pub mod handlers;
pub mod middleware;
pub mod models;
pub mod utils;



================================================
File: src/main.rs
================================================
use std::env;
use std::io::Result;
use std::fs;

use actix_cors::Cors;
use actix_web::{middleware as actix_middleware, web, App, HttpServer};
use dotenv::dotenv;
use log::info;
use sqlx::postgres::PgPoolOptions;

#[actix_web::main]
async fn main() -> Result<()> {
    // Load environment variables from .env file
    dotenv().ok();
    
    // Initialize logger
    env_logger::init_from_env(env_logger::Env::new().default_filter_or("info"));
    
    // Get server address from environment or use default
    let server_addr = env::var("SERVER_ADDR").unwrap_or_else(|_| "127.0.0.1:8080".to_string());
    info!("Starting server on {}", server_addr);
    
    // Get database URL from environment or use default
    let database_url = env::var("DATABASE_URL")
        .unwrap_or_else(|_| "postgres://postgres:password@localhost:5432/dodo_payments".to_string());
    
    // Create database connection pool
    let pool = PgPoolOptions::new()
        .max_connections(5)
        .connect_lazy(&database_url)
        .expect("Failed to create database connection pool");
    
    // Read JWT secret from file or environment variable
    let jwt_secret = env::var("JWT_SECRET").ok().unwrap_or_else(|| {
        fs::read_to_string("jwt_secret.txt")
            .unwrap_or_else(|_| {
                info!("JWT secret not found, using default value");
                "dodo_payments_default_secret".to_string()
            })
    });
    
    info!("JWT secret loaded (length: {})", jwt_secret.len());
    
    // Create data that will be shared across requests
    let pool_data = web::Data::new(pool);
    let jwt_secret_data = web::Data::new(jwt_secret);
      // Run the server
    HttpServer::new(move || {
        // Set up CORS
        let cors = Cors::default()
            .allow_any_origin()
            .allow_any_method()
            .allow_any_header()
            .max_age(3600);
        
        App::new()
            .wrap(cors)
            .wrap(actix_middleware::Logger::default())
            .wrap(dodo_payments::middleware::Auth)  // Add Auth middleware globally
            .app_data(pool_data.clone())
            .app_data(jwt_secret_data.clone())
            .configure(dodo_payments::handlers::config_routes)
    })
    .bind(server_addr)?
    .run()
    .await
}



================================================
File: src/use_runtime_queries.md
================================================
# Using Runtime Queries Instead of SQLx Macros

After analyzing the errors in our codebase, we've discovered several issues related to SQLx macros, BigDecimal serialization, and transaction handling. Here's how to fix them:

## The Main Issues

1. **BigDecimal Serialization**: BigDecimal needs the `serde` feature enabled to work properly with Serde and SQLx
2. **Transaction API Errors**: The `&mut tx` syntax doesn't work with SQLx 0.7.x (need to use `&mut *tx` or just `&tx`)
3. **SQLx Offline Mode**: Without a complete `sqlx-data.json`, compile-time macros fail
4. **Version Conflict**: We found a version conflict between `bigdecimal = "0.3.1"` and references to `bigdecimal = "0.4.8"`

## The Solution: Use Runtime Queries

The simplest way to get the application working is to switch from `sqlx::query!` macros to runtime query functions:

1. Replace `sqlx::query!` with `sqlx::query()`
2. Replace `sqlx::query_as!` with `sqlx::query_as()`
3. Use binding variables with `.bind()` instead of embedding them in the query

For example, change:

```rust
let user = sqlx::query_as!(
    User,
    r#"SELECT * FROM users WHERE id = $1"#,
    user_id
).fetch_one(pool).await?;
```

To:

```rust
let user = sqlx::query_as::<_, User>(
    "SELECT * FROM users WHERE id = $1"
)
.bind(user_id)
.fetch_one(pool).await?;
```

## Docker Configuration

Update the Docker configuration to use runtime queries:

1. Set `ENV SQLX_OFFLINE=false` in the Dockerfile
2. Set `SQLX_OFFLINE=false` in docker-compose.yml environment variables

## Transaction Handling

Update transaction handling to use the correct SQLx 0.7.x approach:

Instead of:

```rust
let mut tx = pool.begin().await?;
sqlx::query!("...").execute(&mut tx).await?;
tx.commit().await?;
```

Use:

```rust
let mut tx = pool.begin().await?;
sqlx::query("...").execute(&tx).await?; // Note: &tx not &mut tx
tx.commit().await?;
```

## Alternative Solution: Use i64 Instead of BigDecimal

If runtime queries don't solve all issues, consider converting monetary values to cents (i64) instead of using BigDecimal:

```rust
// In models
pub amount: i64, // Store cents instead of BigDecimal

// When inserting
let amount_cents = (amount_dollars * 100.0) as i64;

// When retrieving
let amount_dollars = amount_cents as f64 / 100.0;
```

## Fixed Model Structures

We've also updated the TransactionListResponse structure to include pagination fields:

```rust
pub struct TransactionListResponse {
    pub transactions: Vec<TransactionResponse>,
    pub total: i64,
    pub page: i64,
    pub per_page: i64,
}
```

This ensures consistency between both the original and fixed versions of the transaction handlers.

## Running the Application

To run the application with these changes:

1. Update the Docker config to use SQLX_OFFLINE=false
2. Run `bash setup-db-and-prepare.sh` to set up the database
3. Run `docker-compose up -d` to start the services

**Note**: This is a temporary solution to get the application running. A more robust solution would be to properly implement the serde features for BigDecimal, but this approach will work for now.



================================================
File: src/bin/generate_jwt_secret.rs
================================================
use std::process::Command;
use std::io::Write;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Generate a random 32-byte key for JWT signing
    let output = Command::new("openssl")
        .args(&["rand", "-base64", "32"])
        .output()?;
    
    if !output.status.success() {
        return Err("Failed to generate JWT secret".into());
    }
    
    let jwt_secret = String::from_utf8(output.stdout)?;
    
    // Write to file
    let mut file = std::fs::File::create("jwt_secret.txt")?;
    file.write_all(jwt_secret.trim().as_bytes())?;
    
    println!("Created JWT secret and saved to jwt_secret.txt");
    
    Ok(())
}



================================================
File: src/config/db.rs
================================================
use log::info;
use sqlx::PgPool;
use sqlx::postgres::PgPoolOptions;

pub async fn init_database(pool: &PgPool) -> Result<(), sqlx::Error> {
    info!("Initializing database");

    // This is just a simple check to verify connection
    // Actual schema will be managed through migrations
    let _: (i64,) = sqlx::query_as("SELECT 1")
        .fetch_one(pool)
        .await?;

    info!("Database connection verified");
    Ok(())
}

pub async fn setup_database_pool(database_url: &str) -> Result<PgPool, sqlx::Error> {
    info!("Setting up database connection pool");
    
    let pool = PgPoolOptions::new()
        .max_connections(10)
        .connect(database_url)
        .await?;
    
    info!("Database pool created");
    Ok(pool)
}



================================================
File: src/config/mod.rs
================================================
use std::env;
use sqlx::postgres::{PgPool, PgPoolOptions};
use std::time::Duration;
use dotenv::dotenv;
use log::info;

pub struct Config {
    pub database_url: String,
    pub jwt_secret: String,
    pub server_addr: String,
    pub rust_log: String,
}

impl Config {
    pub fn from_env() -> Self {
        dotenv().ok();
        
        // Get database URL with potential Docker secrets
        let database_url = Self::get_database_url();
        
        // Get JWT secret from Docker secrets or environment variable
        let jwt_secret = Self::get_jwt_secret();
        
        let server_addr = env::var("SERVER_ADDR")
            .unwrap_or_else(|_| "127.0.0.1:8080".to_string());
        
        let rust_log = env::var("RUST_LOG")
            .unwrap_or_else(|_| "info".to_string());
        
        Self {
            database_url,
            jwt_secret,
            server_addr,
            rust_log,
        }
    }
    
    fn get_database_url() -> String {
        // Check if we have Docker secrets for database credentials
        let db_user = Self::get_db_user();
        let db_password = Self::get_db_password();
        
        // Try to get connection details from environment variables
        let db_host = env::var("DB_HOST").unwrap_or_else(|_| "db".to_string());
        let db_port = env::var("DB_PORT").unwrap_or_else(|_| "5432".to_string());
        let db_name = env::var("DB_NAME").unwrap_or_else(|_| "dodo_payments".to_string());
        
        // If DATABASE_URL is explicitly set, use that instead
        if let Ok(url) = env::var("DATABASE_URL") {
            info!("Using DATABASE_URL from environment variable");
            return url;
        }
        
        // Construct the URL from components
        let url = format!(
            "postgres://{}:{}@{}:{}/{}",
            db_user, db_password, db_host, db_port, db_name
        );
        
        info!("Constructed database URL from components");
        url
    }
    
    fn get_db_user() -> String {
        // First try to read from Docker secret file
        if let Ok(user) = std::fs::read_to_string("/run/secrets/db_user") {
            let user = user.trim();
            info!("Using database user from Docker secret file");
            return user.to_string();
        }
        
        // Fall back to environment variable
        env::var("POSTGRES_USER").unwrap_or_else(|_| {
            info!("Using default database user: postgres");
            "postgres".to_string()
        })
    }
    
    fn get_db_password() -> String {
        // First try to read from Docker secret file
        if let Ok(password) = std::fs::read_to_string("/run/secrets/db_password") {
            let password = password.trim();
            info!("Using database password from Docker secret file");
            return password.to_string();
        }
        
        // Fall back to environment variable
        env::var("POSTGRES_PASSWORD").unwrap_or_else(|_| {
            info!("Using default database password (NOT SECURE FOR PRODUCTION)");
            "password".to_string()
        })
    }
    
    fn get_jwt_secret() -> String {
        // First try to read from Docker secret file
        if let Ok(secret) = std::fs::read_to_string("/run/secrets/jwt_secret") {
            let secret = secret.trim();
            info!("Using JWT secret from Docker secret file");
            return secret.to_string();
        }
        
        // Then try reading from local file (for local Docker development)
        if let Ok(secret) = std::fs::read_to_string("jwt_secret.txt") {
            let secret = secret.trim();
            info!("Using JWT secret from local file");
            return secret.to_string();
        }
        
        // Fall back to environment variable
        match env::var("JWT_SECRET") {
            Ok(secret) => {
                info!("Using JWT secret from environment variable");
                secret
            },
            Err(_) => {
                info!("JWT_SECRET not found, using default (NOT SECURE FOR PRODUCTION)");
                "development_jwt_secret_not_secure".to_string()
            }
        }
    }
}



// Function to set up the database pool
pub async fn setup_database_pool(database_url: &str) -> PgPool {
    PgPoolOptions::new()
        .max_connections(10)
        .acquire_timeout(Duration::from_secs(5))
        .connect(database_url)
        .await
        .expect("Failed to create database connection pool")
}
pub mod db;



================================================
File: src/config/sqlx_config.rs
================================================
// Enable SQLx offline mode by declaring a metadata override
// This ensures SQLx queries can be compiled even without a database connection

#[cfg(feature = "sqlx-macros")]
pub fn enable_sqlx_offline() {
    // This function doesn't need to do anything; it's just here to ensure
    // that the module is initialized and the sqlx_offline feature is enabled
}

// This enables SQLx offline compilation even without the SQLX_OFFLINE env variable
#[cfg(not(feature = "sqlx-macros"))]
pub fn enable_sqlx_offline() {}



================================================
File: src/handlers/account.rs
================================================
use actix_web::{web, HttpResponse, Responder};
use sqlx::PgPool;
use sqlx::Row; // Explicitly import Row trait
use uuid::Uuid;

use crate::models::{Account, AccountBalanceResponse, AppError};

pub async fn get_balance(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
) -> Result<impl Responder, AppError> {
    let user_id = user_id.into_inner();
    
    let row = sqlx::query(
        r#"
        SELECT id, user_id, balance, currency, created_at, updated_at
        FROM accounts
        WHERE user_id = $1
        "#
    )
    .bind(user_id)
    .fetch_one(pool.get_ref())
    .await?;
      let account = Account {
        id: row.get("id"),
        user_id: row.get("user_id"),
        balance: row.get("balance"),
        currency: row.get("currency"),
        created_at: row.get("created_at"),
        updated_at: row.get("updated_at"),
    };
    
    Ok(HttpResponse::Ok().json(AccountBalanceResponse::from(account)))
}



================================================
File: src/handlers/account_fixed.rs
================================================
use actix_web::{web, HttpResponse, Responder};
use sqlx::PgPool;
use sqlx::Row; // Explicitly import Row trait
use uuid::Uuid;

use crate::models::{Account, AccountBalanceResponse, AppError};

pub async fn get_balance(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
) -> Result<impl Responder, AppError> {
    let user_id = user_id.into_inner();
    
    let row = sqlx::query(
        r#"
        SELECT id, user_id, balance, currency, created_at, updated_at
        FROM accounts
        WHERE user_id = $1
        "#
    )
    .bind(user_id)
    .fetch_one(pool.get_ref())
    .await?;
      let account = Account {
        id: row.get("id"),
        user_id: row.get("user_id"),
        balance: row.get("balance"),
        currency: row.get("currency"),
        created_at: row.get("created_at"),
        updated_at: row.get("updated_at"),
    };
    
    Ok(HttpResponse::Ok().json(AccountBalanceResponse::from(account)))
}



================================================
File: src/handlers/health.rs
================================================
use actix_web::{web, HttpResponse, Responder};
use sqlx::PgPool;

pub async fn health_check(pool: web::Data<PgPool>) -> impl Responder {
    match sqlx::query("SELECT 1").execute(pool.get_ref()).await {
        Ok(_) => HttpResponse::Ok().json(serde_json::json!({ 
            "status": "ok",
            "message": "Service is healthy"
        })),
        Err(e) => {
            log::error!("Health check failed: {}", e);
            HttpResponse::ServiceUnavailable().json(serde_json::json!({
                "status": "error",
                "message": "Database connection failed"
            }))
        }
    }
}



================================================
File: src/handlers/login_fixed.rs
================================================
use actix_web::{web, HttpResponse, Responder};
use sqlx::PgPool;
use uuid::Uuid;
use validator::Validate;
use serde::{Serialize, Deserialize};

use crate::utils::auth::{verify_password, generate_jwt};
use crate::models::{AppError, User, LoginUserRequest};

#[derive(Debug, Serialize, Deserialize)]
pub struct TokenResponseFixed {
    pub token: String,
    pub token_type: String,
}

impl TokenResponseFixed {
    pub fn new(token: String) -> Self {
        Self {
            token,
            token_type: "Bearer".to_string(),
        }
    }
}

/// Login user and return JWT token with improved response formatting
pub async fn login_fixed(
    pool: web::Data<PgPool>,
    login_data: web::Json<LoginUserRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    login_data.validate()?;
    
    // Find user by username
    let user = sqlx::query_as::<_, User>(
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE username = $1
        "#
    )
    .bind(&login_data.username)
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::AuthenticationError("Invalid username or password".to_string()))?;
    
    // Verify password
    if !verify_password(&login_data.password, &user.password_hash)? {
        return Err(AppError::AuthenticationError("Invalid username or password".to_string()));
    }
    
    // Read JWT secret
    let jwt_secret = std::fs::read_to_string("jwt_secret.txt")
        .map_err(|e| AppError::InternalServerError(format!("Failed to read JWT secret: {}", e)))?;
    
    // Generate JWT token
    let token = generate_jwt(user.id, &jwt_secret)?;
    
    // Return token with improved formatting by using HttpResponse directly
    let token_response = TokenResponseFixed::new(token);
    
    Ok(HttpResponse::Ok()
        .content_type("application/json")
        .json(token_response))
}



================================================
File: src/handlers/mod.rs
================================================
pub mod user;
pub mod account;
pub mod transaction;
pub mod health;

use actix_web::web;
use crate::middleware::Auth;

// Configure routes
pub fn config_routes(cfg: &mut web::ServiceConfig) {
    // Health check route - no auth required
    cfg.route("/health", web::get().to(health::health_check));
    
    // API routes with authentication where needed
    cfg.service(
        web::scope("/api")
            // User routes
            .service(
                web::scope("/users")
                    // Public routes
                    .route("/register", web::post().to(user::register))
                    .route("/login", web::post().to(user::login))
                    // Protected routes
                    .service(
                        web::scope("/profile")
                            .wrap(Auth)
                            .route("", web::get().to(user::get_profile))
                            .route("", web::patch().to(user::update_profile))
                    )
            )
            // Account routes - all protected
            .service(
                web::scope("/accounts")
                    .wrap(Auth)
                    .route("/balance", web::get().to(account::get_balance))
            )
            // Transaction routes - all protected
            .service(
                web::scope("/transactions")
                    .wrap(Auth)
                    .route("", web::post().to(transaction::create_transaction))
                    .route("", web::get().to(transaction::list_transactions))
                    .route("/{transaction_id}", web::get().to(transaction::get_transaction))
            )
    );
}



================================================
File: src/handlers/transaction.rs
================================================
use actix_web::{web, HttpResponse, Responder};
use sqlx::{PgPool, Row}; // Import Row trait explicitly for try_get method
use uuid::Uuid;
use validator::Validate;
use bigdecimal::BigDecimal;
use std::str::FromStr;

use crate::models::transaction_fixed::{
    Transaction, TransactionResponse, CreateTransactionRequest
};
use crate::models::transaction_fixed::TransactionStatus;
use crate::models::transaction_fixed::TransactionListResponse;
use crate::models::AppError;

pub async fn create_transaction(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
    transaction_data: web::Json<CreateTransactionRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    transaction_data.validate()?;
    
    let sender_id = user_id.into_inner();
    let recipient_id = transaction_data.recipient_id;
    
    // Ensure sender and recipient are different
    if sender_id == recipient_id {
        return Err(AppError::BadRequestError("Cannot send money to yourself".to_string()));
    }
    
    // Ensure recipient exists
    let recipient_exists = sqlx::query("SELECT id FROM users WHERE id = $1")
        .bind(recipient_id)
        .fetch_optional(pool.get_ref())
        .await?
        .is_some();
    
    if !recipient_exists {
        return Err(AppError::NotFoundError("Recipient not found".to_string()));
    }
    
    // Convert f64 to BigDecimal
    let amount_decimal = BigDecimal::from_str(&transaction_data.amount.to_string())
        .map_err(|_| AppError::BadRequestError("Invalid amount".to_string()))?;

    // Check sender balance
    let sender_account = sqlx::query(
        r#"
        SELECT balance, currency FROM accounts
        WHERE user_id = $1
        "#
    )
    .bind(sender_id)
    .fetch_one(pool.get_ref())
    .await?;
    
    let balance: BigDecimal = sender_account.try_get("balance")?;
    let currency: String = sender_account.try_get("currency")?;
    
    // Ensure sender has enough funds
    if balance < amount_decimal {
        return Err(AppError::BadRequestError("Insufficient funds".to_string()));
    }
    
    // Ensure currency matches
    if currency != transaction_data.currency {
        return Err(AppError::BadRequestError(format!(
            "Currency mismatch: account is in {}, transaction is in {}",
            currency, transaction_data.currency
        )));
    }
    
    // Create transaction record
    let transaction_id = sqlx::query(
        r#"
        INSERT INTO transactions (sender_id, recipient_id, amount, currency, status)
        VALUES ($1, $2, $3, $4, $5)
        RETURNING id
        "#
    )
    .bind(sender_id)
    .bind(recipient_id)
    .bind(&amount_decimal)
    .bind(&transaction_data.currency)
    .bind(TransactionStatus::Pending as i32)
    .fetch_one(pool.get_ref())
    .await?
    .try_get::<Uuid, _>("id")?;
    
    // Update sender's balance
    sqlx::query(
        r#"
        UPDATE accounts
        SET balance = balance - $1, updated_at = NOW()
        WHERE user_id = $2
        "#
    )
    .bind(&amount_decimal)
    .bind(sender_id)
    .execute(pool.get_ref())
    .await?;
    
    // Update recipient's balance
    sqlx::query(
        r#"
        UPDATE accounts
        SET balance = balance + $1, updated_at = NOW()
        WHERE user_id = $2
        "#
    )
    .bind(&amount_decimal)
    .bind(recipient_id)
    .execute(pool.get_ref())
    .await?;
    
    // Mark transaction as completed
    let completed_transaction = sqlx::query(
        r#"
        UPDATE transactions
        SET status = $1, updated_at = NOW()
        WHERE id = $2
        RETURNING id, sender_id, recipient_id, amount, currency, status, created_at, updated_at
        "#
    )
    .bind(TransactionStatus::Completed as i32)
    .bind(transaction_id)
    .fetch_one(pool.get_ref())
    .await?;

    // Extract data from the row
    let transaction = Transaction {
        id: completed_transaction.try_get("id")?,
        sender_id: completed_transaction.try_get("sender_id")?,
        recipient_id: completed_transaction.try_get("recipient_id")?,
        amount: completed_transaction.try_get("amount")?,
        currency: completed_transaction.try_get("currency")?,
        status: TransactionStatus::Completed, // We know it's completed because we just set it
        created_at: completed_transaction.try_get("created_at")?,
        updated_at: completed_transaction.try_get("updated_at")?,
    };
    
    Ok(HttpResponse::Created().json(TransactionResponse::from(transaction)))
}

pub async fn get_transaction(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
    transaction_id: web::Path<Uuid>,
) -> Result<impl Responder, AppError> {
    let user_id = user_id.into_inner();
    let transaction_id = transaction_id.into_inner();
    
    let row = sqlx::query(
        r#"
        SELECT id, sender_id, recipient_id, amount, currency, status, created_at, updated_at
        FROM transactions
        WHERE id = $1 AND (sender_id = $2 OR recipient_id = $2)
        "#
    )
    .bind(transaction_id)
    .bind(user_id)
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::NotFoundError("Transaction not found".to_string()))?;
    
    let transaction = Transaction {
        id: row.try_get("id")?,
        sender_id: row.try_get("sender_id")?,
        recipient_id: row.try_get("recipient_id")?,
        amount: row.try_get("amount")?,
        currency: row.try_get("currency")?,
        status: match row.try_get::<i32, _>("status")? {
            0 => TransactionStatus::Pending,
            1 => TransactionStatus::Completed,
            2 => TransactionStatus::Failed,
            _ => TransactionStatus::Pending, // Default case
        },
        created_at: row.try_get("created_at")?,
        updated_at: row.try_get("updated_at")?,
    };
    
    Ok(HttpResponse::Ok().json(TransactionResponse::from(transaction)))
}

pub async fn list_transactions(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
    query: web::Query<ListTransactionsQuery>,
) -> Result<impl Responder, AppError> {
    let user_id = user_id.into_inner();
    let limit = query.limit.unwrap_or(10);
    let offset = query.offset.unwrap_or(0);
    
    let mut sql = String::from(
        r#"
        SELECT id, sender_id, recipient_id, amount, currency, status, created_at, updated_at
        FROM transactions
        WHERE (sender_id = $1 OR recipient_id = $1)
        "#
    );
    
    // Add status filter if provided
    let mut params = vec![user_id.to_string()];
    let mut param_index = 2;
    
    if let Some(status_str) = &query.status {
        let status_num = match status_str.to_lowercase().as_str() {
            "pending" => 0,
            "completed" => 1,
            "failed" => 2,
            _ => return Err(AppError::BadRequestError("Invalid status".to_string())),
        };
        sql.push_str(&format!("AND status = ${} ", param_index));
        params.push(status_num.to_string());
        param_index += 1;
    }
    
    // Add ordering and pagination
    sql.push_str(&format!("ORDER BY created_at DESC LIMIT ${} OFFSET ${}", param_index, param_index + 1));
    params.push(limit.to_string());
    params.push(offset.to_string());
    
    // Build and execute the dynamic query
    let mut query_builder = sqlx::query(&sql);
    for param in params {
        query_builder = query_builder.bind(param);
    }
    
    let rows = query_builder
        .fetch_all(pool.get_ref())
        .await?;
    
    // Map rows to Transaction objects
    let mut transactions = Vec::with_capacity(rows.len());
    for row in rows {
        let transaction = Transaction {
            id: row.try_get("id")?,
            sender_id: row.try_get("sender_id")?,
            recipient_id: row.try_get("recipient_id")?,
            amount: row.try_get("amount")?,
            currency: row.try_get("currency")?,
            status: match row.try_get::<i32, _>("status")? {
                0 => TransactionStatus::Pending,
                1 => TransactionStatus::Completed,
                2 => TransactionStatus::Failed,
                _ => TransactionStatus::Pending,
            },
            created_at: row.try_get("created_at")?,
            updated_at: row.try_get("updated_at")?,
        };
        transactions.push(transaction);
    }
    
    // Count total transactions
    let mut count_sql = String::from(
        r#"
        SELECT COUNT(*) as count
        FROM transactions
        WHERE (sender_id = $1 OR recipient_id = $1)
        "#
    );
    
    if let Some(status_str) = &query.status {
        let status_num = match status_str.to_lowercase().as_str() {
            "pending" => 0,
            "completed" => 1,
            "failed" => 2,
            _ => return Err(AppError::BadRequestError("Invalid status".to_string())),
        };
        count_sql.push_str("AND status = $2");
        
        let count: i64 = sqlx::query(&count_sql)
            .bind(user_id)
            .bind(status_num)
            .fetch_one(pool.get_ref())
            .await?
            .try_get("count")?;
            
        let transaction_responses = transactions
            .into_iter()
            .map(TransactionResponse::from)
            .collect::<Vec<_>>();
        
        Ok(HttpResponse::Ok().json(TransactionListResponse {
            transactions: transaction_responses,
            total: count as i64,
            page: (offset / limit) as i64,
            per_page: limit as i64,
        }))
    } else {
        let count: i64 = sqlx::query(&count_sql)
            .bind(user_id)
            .fetch_one(pool.get_ref())
            .await?
            .try_get("count")?;
            
        let transaction_responses = transactions
            .into_iter()
            .map(TransactionResponse::from)
            .collect::<Vec<_>>();
        
        Ok(HttpResponse::Ok().json(TransactionListResponse {
            transactions: transaction_responses,
            total: count as i64,
            page: (offset / limit) as i64,
            per_page: limit as i64,
        }))
    }
}

#[derive(serde::Deserialize)]
pub struct ListTransactionsQuery {
    limit: Option<u32>,
    offset: Option<u32>,
    status: Option<String>,
}



================================================
File: src/handlers/transaction_fixed.rs
================================================
use actix_web::{web, HttpResponse, Responder};
use sqlx::{PgPool, Row}; // Import Row trait explicitly for try_get method
use uuid::Uuid;
use validator::Validate;
use bigdecimal::BigDecimal;
use std::str::FromStr;

use crate::models::transaction_fixed::{
    Transaction, TransactionResponse, CreateTransactionRequest
};
use crate::models::transaction_fixed::TransactionStatus;
use crate::models::transaction_fixed::TransactionListResponse;
use crate::models::AppError;

pub async fn create_transaction(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
    transaction_data: web::Json<CreateTransactionRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    transaction_data.validate()?;
    
    let sender_id = user_id.into_inner();
    let recipient_id = transaction_data.recipient_id;
    
    // Ensure sender and recipient are different
    if sender_id == recipient_id {
        return Err(AppError::BadRequestError("Cannot send money to yourself".to_string()));
    }
    
    // Ensure recipient exists
    let recipient_exists = sqlx::query("SELECT id FROM users WHERE id = $1")
        .bind(recipient_id)
        .fetch_optional(pool.get_ref())
        .await?
        .is_some();
    
    if !recipient_exists {
        return Err(AppError::NotFoundError("Recipient not found".to_string()));
    }
    
    // Convert f64 to BigDecimal
    let amount_decimal = BigDecimal::from_str(&transaction_data.amount.to_string())
        .map_err(|_| AppError::BadRequestError("Invalid amount".to_string()))?;

    // Check sender balance
    let sender_account = sqlx::query(
        r#"
        SELECT balance, currency FROM accounts
        WHERE user_id = $1
        "#
    )
    .bind(sender_id)
    .fetch_one(pool.get_ref())
    .await?;
    
    let balance: BigDecimal = sender_account.try_get("balance")?;
    let currency: String = sender_account.try_get("currency")?;
    
    // Ensure sender has enough funds
    if balance < amount_decimal {
        return Err(AppError::BadRequestError("Insufficient funds".to_string()));
    }
    
    // Ensure currency matches
    if currency != transaction_data.currency {
        return Err(AppError::BadRequestError(format!(
            "Currency mismatch: account is in {}, transaction is in {}",
            currency, transaction_data.currency
        )));
    }
    
    // Create transaction record
    let transaction_id = sqlx::query(
        r#"
        INSERT INTO transactions (sender_id, recipient_id, amount, currency, status)
        VALUES ($1, $2, $3, $4, $5)
        RETURNING id
        "#
    )
    .bind(sender_id)
    .bind(recipient_id)
    .bind(&amount_decimal)
    .bind(&transaction_data.currency)
    .bind(TransactionStatus::Pending as i32)
    .fetch_one(pool.get_ref())
    .await?
    .try_get::<Uuid, _>("id")?;
    
    // Update sender's balance
    sqlx::query(
        r#"
        UPDATE accounts
        SET balance = balance - $1, updated_at = NOW()
        WHERE user_id = $2
        "#
    )
    .bind(&amount_decimal)
    .bind(sender_id)
    .execute(pool.get_ref())
    .await?;
    
    // Update recipient's balance
    sqlx::query(
        r#"
        UPDATE accounts
        SET balance = balance + $1, updated_at = NOW()
        WHERE user_id = $2
        "#
    )
    .bind(&amount_decimal)
    .bind(recipient_id)
    .execute(pool.get_ref())
    .await?;
    
    // Mark transaction as completed
    let completed_transaction = sqlx::query(
        r#"
        UPDATE transactions
        SET status = $1, updated_at = NOW()
        WHERE id = $2
        RETURNING id, sender_id, recipient_id, amount, currency, status, created_at, updated_at
        "#
    )
    .bind(TransactionStatus::Completed as i32)
    .bind(transaction_id)
    .fetch_one(pool.get_ref())
    .await?;

    // Extract data from the row
    let transaction = Transaction {
        id: completed_transaction.try_get("id")?,
        sender_id: completed_transaction.try_get("sender_id")?,
        recipient_id: completed_transaction.try_get("recipient_id")?,
        amount: completed_transaction.try_get("amount")?,
        currency: completed_transaction.try_get("currency")?,
        status: TransactionStatus::Completed, // We know it's completed because we just set it
        created_at: completed_transaction.try_get("created_at")?,
        updated_at: completed_transaction.try_get("updated_at")?,
    };
    
    Ok(HttpResponse::Created().json(TransactionResponse::from(transaction)))
}

pub async fn get_transaction(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
    transaction_id: web::Path<Uuid>,
) -> Result<impl Responder, AppError> {
    let user_id = user_id.into_inner();
    let transaction_id = transaction_id.into_inner();
    
    let row = sqlx::query(
        r#"
        SELECT id, sender_id, recipient_id, amount, currency, status, created_at, updated_at
        FROM transactions
        WHERE id = $1 AND (sender_id = $2 OR recipient_id = $2)
        "#
    )
    .bind(transaction_id)
    .bind(user_id)
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::NotFoundError("Transaction not found".to_string()))?;
    
    let transaction = Transaction {
        id: row.try_get("id")?,
        sender_id: row.try_get("sender_id")?,
        recipient_id: row.try_get("recipient_id")?,
        amount: row.try_get("amount")?,
        currency: row.try_get("currency")?,
        status: match row.try_get::<i32, _>("status")? {
            0 => TransactionStatus::Pending,
            1 => TransactionStatus::Completed,
            2 => TransactionStatus::Failed,
            _ => TransactionStatus::Pending, // Default case
        },
        created_at: row.try_get("created_at")?,
        updated_at: row.try_get("updated_at")?,
    };
    
    Ok(HttpResponse::Ok().json(TransactionResponse::from(transaction)))
}

pub async fn list_transactions(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
    query: web::Query<ListTransactionsQuery>,
) -> Result<impl Responder, AppError> {
    let user_id = user_id.into_inner();
    let limit = query.limit.unwrap_or(10);
    let offset = query.offset.unwrap_or(0);
    
    let mut sql = String::from(
        r#"
        SELECT id, sender_id, recipient_id, amount, currency, status, created_at, updated_at
        FROM transactions
        WHERE (sender_id = $1 OR recipient_id = $1)
        "#
    );
    
    // Add status filter if provided
    let mut params = vec![user_id.to_string()];
    let mut param_index = 2;
    
    if let Some(status_str) = &query.status {
        let status_num = match status_str.to_lowercase().as_str() {
            "pending" => 0,
            "completed" => 1,
            "failed" => 2,
            _ => return Err(AppError::BadRequestError("Invalid status".to_string())),
        };
        sql.push_str(&format!("AND status = ${} ", param_index));
        params.push(status_num.to_string());
        param_index += 1;
    }
    
    // Add ordering and pagination
    sql.push_str(&format!("ORDER BY created_at DESC LIMIT ${} OFFSET ${}", param_index, param_index + 1));
    params.push(limit.to_string());
    params.push(offset.to_string());
    
    // Build and execute the dynamic query
    let mut query_builder = sqlx::query(&sql);
    for param in params {
        query_builder = query_builder.bind(param);
    }
    
    let rows = query_builder
        .fetch_all(pool.get_ref())
        .await?;
    
    // Map rows to Transaction objects
    let mut transactions = Vec::with_capacity(rows.len());
    for row in rows {
        let transaction = Transaction {
            id: row.try_get("id")?,
            sender_id: row.try_get("sender_id")?,
            recipient_id: row.try_get("recipient_id")?,
            amount: row.try_get("amount")?,
            currency: row.try_get("currency")?,
            status: match row.try_get::<i32, _>("status")? {
                0 => TransactionStatus::Pending,
                1 => TransactionStatus::Completed,
                2 => TransactionStatus::Failed,
                _ => TransactionStatus::Pending,
            },
            created_at: row.try_get("created_at")?,
            updated_at: row.try_get("updated_at")?,
        };
        transactions.push(transaction);
    }
    
    // Count total transactions
    let mut count_sql = String::from(
        r#"
        SELECT COUNT(*) as count
        FROM transactions
        WHERE (sender_id = $1 OR recipient_id = $1)
        "#
    );
    
    if let Some(status_str) = &query.status {
        let status_num = match status_str.to_lowercase().as_str() {
            "pending" => 0,
            "completed" => 1,
            "failed" => 2,
            _ => return Err(AppError::BadRequestError("Invalid status".to_string())),
        };
        count_sql.push_str("AND status = $2");
        
        let count: i64 = sqlx::query(&count_sql)
            .bind(user_id)
            .bind(status_num)
            .fetch_one(pool.get_ref())
            .await?
            .try_get("count")?;
            
        let transaction_responses = transactions
            .into_iter()
            .map(TransactionResponse::from)
            .collect::<Vec<_>>();
        
        Ok(HttpResponse::Ok().json(TransactionListResponse {
            transactions: transaction_responses,
            total: count as i64,
            page: (offset / limit) as i64,
            per_page: limit as i64,
        }))
    } else {
        let count: i64 = sqlx::query(&count_sql)
            .bind(user_id)
            .fetch_one(pool.get_ref())
            .await?
            .try_get("count")?;
            
        let transaction_responses = transactions
            .into_iter()
            .map(TransactionResponse::from)
            .collect::<Vec<_>>();
        
        Ok(HttpResponse::Ok().json(TransactionListResponse {
            transactions: transaction_responses,
            total: count as i64,
            page: (offset / limit) as i64,
            per_page: limit as i64,
        }))
    }
}

#[derive(serde::Deserialize)]
pub struct ListTransactionsQuery {
    limit: Option<u32>,
    offset: Option<u32>,
    status: Option<String>,
}



================================================
File: src/handlers/user.rs
================================================
use actix_web::{web, HttpResponse, Responder};
use sqlx::PgPool;
use uuid::Uuid;
use validator::Validate;
use serde::{Serialize, Deserialize};
use bigdecimal::BigDecimal;
use std::str::FromStr;

use crate::utils::auth::{hash_password, verify_password, generate_jwt};
use crate::models::{AppError, User, UserResponse, LoginUserRequest, RegisterUserRequest, TokenResponse};

/// Register a new user
pub async fn register(
    pool: web::Data<PgPool>,
    user_data: web::Json<RegisterUserRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    user_data.validate()?;
    
    // Check if username already exists
    let existing_user = sqlx::query("SELECT username FROM users WHERE username = $1")
        .bind(&user_data.username)
        .fetch_optional(pool.get_ref())
        .await?;
    
    if existing_user.is_some() {
        return Err(AppError::ConflictError("Username already taken".to_string()));
    }
    
    // Check if email already exists
    let existing_email = sqlx::query("SELECT email FROM users WHERE email = $1")
        .bind(&user_data.email)
        .fetch_optional(pool.get_ref())
        .await?;
    
    if existing_email.is_some() {
        return Err(AppError::ConflictError("Email already registered".to_string()));
    }
    
    // Hash password
    let password_hash = hash_password(&user_data.password)?;
    
    // Insert new user without transaction for now
    let user = sqlx::query_as::<_, User>(
        r#"
        INSERT INTO users (username, email, password_hash)
        VALUES ($1, $2, $3)
        RETURNING id, username, email, password_hash, created_at, updated_at
        "#
    )
    .bind(&user_data.username)
    .bind(&user_data.email)
    .bind(&password_hash)
    .fetch_one(pool.get_ref())
    .await?;
    
    // Create an account for the user with zero balance
    let zero_balance = BigDecimal::from_str("0").unwrap();
    
    sqlx::query(
        r#"
        INSERT INTO accounts (user_id, balance, currency)
        VALUES ($1, $2, $3)
        "#
    )
    .bind(user.id)
    .bind(&zero_balance)
    .bind("USD") // Default currency
    .execute(pool.get_ref())
    .await?;
    
    // Convert to user response
    let user_response = UserResponse::from(user);
    
    Ok(HttpResponse::Created().json(user_response))
}

/// Login user and return JWT token
pub async fn login(
    pool: web::Data<PgPool>,
    login_data: web::Json<LoginUserRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    login_data.validate()?;
    
    // Find user by username
    let user = sqlx::query_as::<_, User>(
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE username = $1
        "#
    )
    .bind(&login_data.username)
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::AuthenticationError("Invalid username or password".to_string()))?;
    
    // Verify password
    if !verify_password(&login_data.password, &user.password_hash)? {
        return Err(AppError::AuthenticationError("Invalid username or password".to_string()));
    }
    
    // Read JWT secret
    let jwt_secret = std::fs::read_to_string("jwt_secret.txt")
        .map_err(|e| AppError::InternalServerError(format!("Failed to read JWT secret: {}", e)))?;
    
    // Generate JWT token
    let token = generate_jwt(user.id, &jwt_secret)?;
    
    // Return token
    Ok(HttpResponse::Ok().json(TokenResponse::new(token)))
}

/// Get user profile
pub async fn get_profile(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
) -> Result<impl Responder, AppError> {
    let user_id = user_id.into_inner();
    
    // Get user data
    let user = sqlx::query_as::<_, User>(
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE id = $1
        "#
    )
    .bind(user_id)
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::NotFoundError("User not found".to_string()))?;
    
    // Return user profile data
    Ok(HttpResponse::Ok().json(UserResponse::from(user)))
}

/// Update user profile
pub async fn update_profile(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
    update_data: web::Json<UpdateProfileRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    update_data.validate()?;
    
    let user_id = user_id.into_inner();
    
    // Check if email already exists if it's being updated
    if let Some(ref email) = update_data.email {
        let existing_email = sqlx::query(
            "SELECT id FROM users WHERE email = $1 AND id != $2"
        )
        .bind(email)
        .bind(user_id)
        .fetch_optional(pool.get_ref())
        .await?;
        
        if existing_email.is_some() {
            return Err(AppError::ConflictError("Email already registered by another user".to_string()));
        }
        
        // Update email
        sqlx::query(
            "UPDATE users SET email = $1, updated_at = NOW() WHERE id = $2"
        )
        .bind(email)
        .bind(user_id)
        .execute(pool.get_ref())
        .await?;
    }
    
    // Get updated user profile
    let user = sqlx::query_as::<_, User>(
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE id = $1
        "#
    )
    .bind(user_id)
    .fetch_one(pool.get_ref())
    .await?;
    
    Ok(HttpResponse::Ok().json(UserResponse::from(user)))
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct UpdateProfileRequest {
    #[validate(email(message = "email must be a valid email address"))]
    pub email: Option<String>,
}



================================================
File: src/handlers/user.rs.backup
================================================
use actix_web::{web, HttpResponse, Responder};
use sqlx::PgPool;
use uuid::Uuid;
use validator::Validate;
use serde::{Serialize, Deserialize};
use bigdecimal::BigDecimal;
use std::str::FromStr;

use crate::utils::auth::{hash_password, verify_password, generate_jwt};
use crate::models::{AppError, User, UserResponse, LoginUserRequest, RegisterUserRequest, TokenResponse};

/// Register a new user
pub async fn register(
    pool: web::Data<PgPool>,
    user_data: web::Json<RegisterUserRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    user_data.validate()?;
    
    // Check if username already exists
    let existing_user = sqlx::query("SELECT username FROM users WHERE username = $1")
        .bind(&user_data.username)
        .fetch_optional(pool.get_ref())
        .await?;
    
    if existing_user.is_some() {
        return Err(AppError::ConflictError("Username already taken".to_string()));
    }
    
    // Check if email already exists
    let existing_email = sqlx::query("SELECT email FROM users WHERE email = $1")
        .bind(&user_data.email)
        .fetch_optional(pool.get_ref())
        .await?;
    
    if existing_email.is_some() {
        return Err(AppError::ConflictError("Email already registered".to_string()));
    }
    
    // Hash password
    let password_hash = hash_password(&user_data.password)?;
    
    // Insert new user without transaction for now
    let user = sqlx::query_as::<_, User>(
        r#"
        INSERT INTO users (username, email, password_hash)
        VALUES ($1, $2, $3)
        RETURNING id, username, email, password_hash, created_at, updated_at
        "#
    )
    .bind(&user_data.username)
    .bind(&user_data.email)
    .bind(&password_hash)
    .fetch_one(pool.get_ref())
    .await?;
    
    // Create an account for the user with zero balance
    let zero_balance = BigDecimal::from_str("0").unwrap();
    
    sqlx::query(
        r#"
        INSERT INTO accounts (user_id, balance, currency)
        VALUES ($1, $2, $3)
        "#
    )
    .bind(user.id)
    .bind(&zero_balance)
    .bind("USD") // Default currency
    .execute(pool.get_ref())
    .await?;
    
    // Convert to user response
    let user_response = UserResponse::from(user);
    
    Ok(HttpResponse::Created().json(user_response))
}

/// Login user and return JWT token
pub async fn login(
    pool: web::Data<PgPool>,
    login_data: web::Json<LoginUserRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    login_data.validate()?;
    
    // Find user by username
    let user = sqlx::query_as::<_, User>(
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE username = $1
        "#
    )
    .bind(&login_data.username)
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::AuthenticationError("Invalid username or password".to_string()))?;
    
    // Verify password
    if !verify_password(&login_data.password, &user.password_hash)? {
        return Err(AppError::AuthenticationError("Invalid username or password".to_string()));
    }
    
    // Read JWT secret
    let jwt_secret = std::fs::read_to_string("jwt_secret.txt")
        .map_err(|e| AppError::InternalServerError(format!("Failed to read JWT secret: {}", e)))?;
    
    // Generate JWT token
    let token = generate_jwt(user.id, &jwt_secret)?;
    
    // Return token
    Ok(HttpResponse::Ok().json(TokenResponse::new(token)))
}

/// Get user profile
pub async fn get_profile(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
) -> Result<impl Responder, AppError> {
    let user_id = user_id.into_inner();
    
    // Get user data
    let user = sqlx::query_as::<_, User>(
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE id = $1
        "#
    )
    .bind(user_id)
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::NotFoundError("User not found".to_string()))?;
    
    // Return user profile data
    Ok(HttpResponse::Ok().json(UserResponse::from(user)))
}

/// Update user profile
pub async fn update_profile(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
    update_data: web::Json<UpdateProfileRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    update_data.validate()?;
    
    let user_id = user_id.into_inner();
    
    // Check if email already exists if it's being updated
    if let Some(ref email) = update_data.email {
        let existing_email = sqlx::query(
            "SELECT id FROM users WHERE email = $1 AND id != $2"
        )
        .bind(email)
        .bind(user_id)
        .fetch_optional(pool.get_ref())
        .await?;
        
        if existing_email.is_some() {
            return Err(AppError::ConflictError("Email already registered by another user".to_string()));
        }
        
        // Update email
        sqlx::query(
            "UPDATE users SET email = $1, updated_at = NOW() WHERE id = $2"
        )
        .bind(email)
        .bind(user_id)
        .execute(pool.get_ref())
        .await?;
    }
    
    // Get updated user profile
    let user = sqlx::query_as::<_, User>(
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE id = $1
        "#
    )
    .bind(user_id)
    .fetch_one(pool.get_ref())
    .await?;
    
    Ok(HttpResponse::Ok().json(UserResponse::from(user)))
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct UpdateProfileRequest {
    #[validate(email(message = "email must be a valid email address"))]
    pub email: Option<String>,
}



================================================
File: src/handlers/user_fixed.rs
================================================
use actix_web::{web, HttpResponse, Responder};
use sqlx::PgPool;
use uuid::Uuid;
use validator::Validate;
use serde::{Serialize, Deserialize};
use bigdecimal::BigDecimal;
use std::str::FromStr;

use crate::utils::auth::{hash_password, verify_password, generate_jwt};
use crate::models::{AppError, User, UserResponse, LoginUserRequest, RegisterUserRequest, TokenResponse};

/// Register a new user
pub async fn register(
    pool: web::Data<PgPool>,
    user_data: web::Json<RegisterUserRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    user_data.validate()?;
    
    // Check if username already exists
    let existing_user = sqlx::query("SELECT username FROM users WHERE username = $1")
        .bind(&user_data.username)
        .fetch_optional(pool.get_ref())
        .await?;
    
    if existing_user.is_some() {
        return Err(AppError::ConflictError("Username already taken".to_string()));
    }
    
    // Check if email already exists
    let existing_email = sqlx::query("SELECT email FROM users WHERE email = $1")
        .bind(&user_data.email)
        .fetch_optional(pool.get_ref())
        .await?;
    
    if existing_email.is_some() {
        return Err(AppError::ConflictError("Email already registered".to_string()));
    }
    
    // Hash password
    let password_hash = hash_password(&user_data.password)?;
    
    // Insert new user without transaction for now
    let user = sqlx::query_as::<_, User>(
        r#"
        INSERT INTO users (username, email, password_hash)
        VALUES ($1, $2, $3)
        RETURNING id, username, email, password_hash, created_at, updated_at
        "#
    )
    .bind(&user_data.username)
    .bind(&user_data.email)
    .bind(&password_hash)
    .fetch_one(pool.get_ref())
    .await?;
    
    // Create an account for the user with zero balance
    let zero_balance = BigDecimal::from_str("0").unwrap();
    
    sqlx::query(
        r#"
        INSERT INTO accounts (user_id, balance, currency)
        VALUES ($1, $2, $3)
        "#
    )
    .bind(user.id)
    .bind(&zero_balance)
    .bind("USD") // Default currency
    .execute(pool.get_ref())
    .await?;
    
    // Convert to user response
    let user_response = UserResponse::from(user);
    
    Ok(HttpResponse::Created().json(user_response))
}

/// Login user and return JWT token
pub async fn login(
    pool: web::Data<PgPool>,
    login_data: web::Json<LoginUserRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    login_data.validate()?;
    
    // Find user by username
    let user = sqlx::query_as::<_, User>(
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE username = $1
        "#
    )
    .bind(&login_data.username)
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::AuthenticationError("Invalid username or password".to_string()))?;
    
    // Verify password
    if !verify_password(&login_data.password, &user.password_hash)? {
        return Err(AppError::AuthenticationError("Invalid username or password".to_string()));
    }
    
    // Read JWT secret
    let jwt_secret = std::fs::read_to_string("jwt_secret.txt")
        .map_err(|e| AppError::InternalServerError(format!("Failed to read JWT secret: {}", e)))?;
    
    // Generate JWT token
    let token = generate_jwt(user.id, &jwt_secret)?;
    
    // Return token
    Ok(HttpResponse::Ok().json(TokenResponse::new(token)))
}

/// Get user profile
pub async fn get_profile(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
) -> Result<impl Responder, AppError> {
    let user_id = user_id.into_inner();
    
    // Get user data
    let user = sqlx::query_as::<_, User>(
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE id = $1
        "#
    )
    .bind(user_id)
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::NotFoundError("User not found".to_string()))?;
    
    // Return user profile data
    Ok(HttpResponse::Ok().json(UserResponse::from(user)))
}

/// Update user profile
pub async fn update_profile(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
    update_data: web::Json<UpdateProfileRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    update_data.validate()?;
    
    let user_id = user_id.into_inner();
    
    // Check if email already exists if it's being updated
    if let Some(ref email) = update_data.email {
        let existing_email = sqlx::query(
            "SELECT id FROM users WHERE email = $1 AND id != $2"
        )
        .bind(email)
        .bind(user_id)
        .fetch_optional(pool.get_ref())
        .await?;
        
        if existing_email.is_some() {
            return Err(AppError::ConflictError("Email already registered by another user".to_string()));
        }
        
        // Update email
        sqlx::query(
            "UPDATE users SET email = $1, updated_at = NOW() WHERE id = $2"
        )
        .bind(email)
        .bind(user_id)
        .execute(pool.get_ref())
        .await?;
    }
    
    // Get updated user profile
    let user = sqlx::query_as::<_, User>(
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE id = $1
        "#
    )
    .bind(user_id)
    .fetch_one(pool.get_ref())
    .await?;
    
    Ok(HttpResponse::Ok().json(UserResponse::from(user)))
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct UpdateProfileRequest {
    #[validate(email(message = "email must be a valid email address"))]
    pub email: Option<String>,
}



================================================
File: src/handlers/user_fixed.rs.backup
================================================
use actix_web::{web, HttpResponse, Responder};
use sqlx::PgPool;
use uuid::Uuid;
use validator::Validate;
use serde::{Serialize, Deserialize};



use crate::utils::auth::{hash_password, verify_password, generate_jwt};
use crate::models::{AppError, User, UserResponse, LoginUserRequest, RegisterUserRequest, TokenResponse};

/// Register a new user
pub async fn register(
    pool: web::Data<PgPool>,
    user_data: web::Json<RegisterUserRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    user_data.validate()?;
    
    // Check if username already exists
    let existing_user = sqlx::query(
        "SELECT username FROM users WHERE username = $1",
        user_data.username
    )
    .fetch_optional(pool.get_ref())
    .await?;
    
    if existing_user.is_some() {
        return Err(AppError::ConflictError("Username already taken".to_string()));
    }
    
    // Check if email already exists
    let existing_email = sqlx::query(
        "SELECT email FROM users WHERE email = $1",
        user_data.email
    )
    .fetch_optional(pool.get_ref())
    .await?;
    
    if existing_email.is_some() {
        return Err(AppError::ConflictError("Email already registered".to_string()));
    }
    
    // Hash password
    let password_hash = hash_password(&user_data.password)?;
    
    // Insert new user without transaction for now
    let user = sqlx::query_as(
        User,
        r#"
        INSERT INTO users (username, email, password_hash)
        VALUES ($1, $2, $3)
        RETURNING id, username, email, password_hash, created_at, updated_at
        "#,
        user_data.username,
        user_data.email,
        password_hash
    )
    .fetch_one(pool.get_ref())
    .await?;
    
    // Create an account for the user with zero balance
    let zero_balance = BigDecimal::from_str("0").unwrap();
    
    sqlx::query(
        r#"
        INSERT INTO accounts (user_id, balance, currency)
        VALUES ($1, $2, $3)
        "#,
        user.id,
        zero_balance,
        "USD" // Default currency
    )
    .execute(pool.get_ref())
    .await?;
    
    // Convert to user response
    let user_response = UserResponse::from(user);
    
    Ok(HttpResponse::Created().json(user_response))
}

/// Login user and return JWT token
pub async fn login(
    pool: web::Data<PgPool>,
    login_data: web::Json<LoginUserRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    login_data.validate()?;
    
    // Find user by username
    let user = sqlx::query_as(
        User,
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE username = $1
        "#,
        login_data.username
    )
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::AuthenticationError("Invalid username or password".to_string()))?;
    
    // Verify password
    if !verify_password(&login_data.password, &user.password_hash)? {
        return Err(AppError::AuthenticationError("Invalid username or password".to_string()));
    }
    
    // Read JWT secret
    let jwt_secret = std::fs::read_to_string("jwt_secret.txt")
        .map_err(|e| AppError::InternalServerError(format!("Failed to read JWT secret: {}", e)))?;
    
    // Generate JWT token
    let token = generate_jwt(user.id, &jwt_secret)?;
    
    // Return token
    Ok(HttpResponse::Ok().json(TokenResponse::new(token)))
}

/// Get user profile
pub async fn get_profile(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
) -> Result<impl Responder, AppError> {
    let user_id = user_id.into_inner();
    
    // Get user data
    let user = sqlx::query_as(
        User,
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE id = $1
        "#,
        user_id
    )
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::NotFoundError("User not found".to_string()))?;
    
    // Return user profile data
    Ok(HttpResponse::Ok().json(UserResponse::from(user)))
}

/// Update user profile
pub async fn update_profile(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
    update_data: web::Json<UpdateProfileRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    update_data.validate()?;
    
    let user_id = user_id.into_inner();
    
    // Check if email already exists if it's being updated
    if let Some(ref email) = update_data.email {
        let existing_email = sqlx::query(
            "SELECT id FROM users WHERE email = $1 AND id != $2",
            email,
            user_id
        )
        .fetch_optional(pool.get_ref())
        .await?;
        
        if existing_email.is_some() {
            return Err(AppError::ConflictError("Email already registered by another user".to_string()));
        }
        
        // Update email
        sqlx::query(
            "UPDATE users SET email = $1, updated_at = NOW() WHERE id = $2",
            email,
            user_id
        )
        .execute(pool.get_ref())
        .await?;
    }
    
    // Get updated user profile
    let user = sqlx::query_as(
        User,
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE id = $1
        "#,
        user_id
    )
    .fetch_one(pool.get_ref())
    .await?;
    
    Ok(HttpResponse::Ok().json(UserResponse::from(user)))
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct UpdateProfileRequest {
    #[validate(email(message = "email must be a valid email address"))]
    pub email: Option<String>,
}



================================================
File: src/handlers/user_fixed.rs.new
================================================
// filepath: /home/maheen/Desktop/dodo-payments/src/handlers/user_fixed.rs
use actix_web::{web, HttpResponse, Responder};
use sqlx::PgPool;
use uuid::Uuid;
use validator::Validate;
use sqlx::types::BigDecimal;
use std::str::FromStr;

use crate::models::{AppError, User, UserResponse, LoginUserRequest, RegisterUserRequest, TokenResponse};
use crate::utils::auth::{hash_password, verify_password, generate_jwt};

/// Register a new user
pub async fn register(
    pool: web::Data<PgPool>,
    user_data: web::Json<RegisterUserRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    user_data.validate()?;
    
    // Check if username already exists
    let existing_user = sqlx::query!(
        "SELECT username FROM users WHERE username = $1",
        user_data.username
    )
    .fetch_optional(pool.get_ref())
    .await?;
    
    if existing_user.is_some() {
        return Err(AppError::ConflictError("Username already taken".to_string()));
    }
    
    // Check if email already exists
    let existing_email = sqlx::query!(
        "SELECT email FROM users WHERE email = $1",
        user_data.email
    )
    .fetch_optional(pool.get_ref())
    .await?;
    
    if existing_email.is_some() {
        return Err(AppError::ConflictError("Email already registered".to_string()));
    }
    
    // Hash password
    let password_hash = hash_password(&user_data.password)?;
    
    // Start a transaction
    let mut tx = pool.begin().await?;
    
    // Insert new user
    let user = sqlx::query_as!(
        User,
        r#"
        INSERT INTO users (username, email, password_hash)
        VALUES ($1, $2, $3)
        RETURNING id, username, email, password_hash, created_at, updated_at
        "#,
        user_data.username,
        user_data.email,
        password_hash
    )
    .fetch_one(&mut tx)
    .await?;
    
    // Create an account for the user with zero balance
    let zero_balance = BigDecimal::from_str("0").unwrap();
    
    sqlx::query!(
        r#"
        INSERT INTO accounts (user_id, balance, currency)
        VALUES ($1, $2, $3)
        "#,
        user.id,
        zero_balance,
        "USD" // Default currency
    )
    .execute(&mut tx)
    .await?;
    
    // Commit transaction
    tx.commit().await?;
    
    // Convert to user response
    let user_response = UserResponse::from(user);
    
    // Read JWT secret
    let jwt_secret = std::fs::read_to_string("jwt_secret.txt")
        .map_err(|e| AppError::InternalServerError(format!("Failed to read JWT secret: {}", e)))?;
    
    // Generate JWT token
    let token = generate_jwt(user.id, &jwt_secret)?;
    
    Ok(HttpResponse::Created().json(TokenResponse::new(token)))
}

/// Login user and return JWT token
pub async fn login(
    pool: web::Data<PgPool>,
    login_data: web::Json<LoginUserRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    login_data.validate()?;
    
    // Find user by username
    let user = sqlx::query_as!(
        User,
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE username = $1
        "#,
        login_data.username
    )
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::AuthenticationError("Invalid username or password".to_string()))?;
    
    // Verify password
    if !verify_password(&login_data.password, &user.password_hash)? {
        return Err(AppError::AuthenticationError("Invalid username or password".to_string()));
    }
    
    // Read JWT secret
    let jwt_secret = std::fs::read_to_string("jwt_secret.txt")
        .map_err(|e| AppError::InternalServerError(format!("Failed to read JWT secret: {}", e)))?;
    
    // Generate JWT token
    let token = generate_jwt(user.id, &jwt_secret)?;
    
    // Return token
    Ok(HttpResponse::Ok().json(TokenResponse::new(token)))
}

/// Get user profile
pub async fn get_profile(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
) -> Result<impl Responder, AppError> {
    let user_id = user_id.into_inner();
    
    // Get user data
    let user = sqlx::query_as!(
        User,
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE id = $1
        "#,
        user_id
    )
    .fetch_optional(pool.get_ref())
    .await?
    .ok_or_else(|| AppError::NotFoundError("User not found".to_string()))?;
    
    // Return user profile data
    Ok(HttpResponse::Ok().json(UserResponse::from(user)))
}

/// Update user profile
pub async fn update_profile(
    user_id: web::ReqData<Uuid>,
    pool: web::Data<PgPool>,
    update_data: web::Json<UpdateProfileRequest>,
) -> Result<impl Responder, AppError> {
    // Validate request data
    update_data.validate()?;
    
    let user_id = user_id.into_inner();
    
    // Start a transaction
    let mut tx = pool.begin().await?;
    
    // Check if email already exists if it's being updated
    if let Some(ref email) = update_data.email {
        let existing_email = sqlx::query!(
            "SELECT id FROM users WHERE email = $1 AND id != $2",
            email,
            user_id
        )
        .fetch_optional(&mut tx)
        .await?;
        
        if existing_email.is_some() {
            return Err(AppError::ConflictError("Email already registered by another user".to_string()));
        }
        
        // Update email
        sqlx::query!(
            "UPDATE users SET email = $1, updated_at = NOW() WHERE id = $2",
            email,
            user_id
        )
        .execute(&mut tx)
        .await?;
    }
    
    // Commit the transaction
    tx.commit().await?;
    
    // Get updated user profile
    let user = sqlx::query_as!(
        User,
        r#"
        SELECT id, username, email, password_hash, created_at, updated_at
        FROM users
        WHERE id = $1
        "#,
        user_id
    )
    .fetch_one(pool.get_ref())
    .await?;
    
    Ok(HttpResponse::Ok().json(UserResponse::from(user)))
}

#[derive(Debug, serde::Serialize, serde::Deserialize, Validate)]
pub struct UpdateProfileRequest {
    #[validate(email(message = "email must be a valid email address"))]
    pub email: Option<String>,
}



================================================
File: src/middleware/auth.rs
================================================
use actix_web::{
    dev::{forward_ready, Service, ServiceRequest, ServiceResponse, Transform},
    http::header::HeaderValue,
    Error, HttpMessage,
};
use futures::future::{ready, LocalBoxFuture, Ready};
use std::rc::Rc;
use std::fs;

use crate::utils::auth::validate_jwt;

pub struct Auth;

impl<S, B> Transform<S, ServiceRequest> for Auth
where
    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,
    S::Future: 'static,
    B: 'static,
{
    type Response = ServiceResponse<B>;
    type Error = Error;
    type Transform = AuthMiddleware<S>;
    type InitError = ();
    type Future = Ready<Result<Self::Transform, Self::InitError>>;

    fn new_transform(&self, service: S) -> Self::Future {
        ready(Ok(AuthMiddleware {
            service: Rc::new(service),
        }))
    }
}

pub struct AuthMiddleware<S> {
    service: Rc<S>,
}

impl<S, B> Service<ServiceRequest> for AuthMiddleware<S>
where
    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,
    S::Future: 'static,
    B: 'static,
{
    type Response = ServiceResponse<B>;
    type Error = Error;
    type Future = LocalBoxFuture<'static, Result<Self::Response, Self::Error>>;
    
    forward_ready!(service);
    
    fn call(&self, req: ServiceRequest) -> Self::Future {
        let service = Rc::clone(&self.service);
        
        // Read JWT secret from file directly instead of app data
        let jwt_secret_result = fs::read_to_string("jwt_secret.txt");
        
        // Get authorization header
        let auth_header = req.headers().get("Authorization").cloned();
        
        Box::pin(async move {
            // Handle JWT secret read result
            let jwt_secret = match jwt_secret_result {
                Ok(secret) => secret,
                Err(_) => {
                    return Err(actix_web::error::ErrorInternalServerError("Failed to read JWT secret"));
                }
            };
            
            let token = match extract_token_from_header(auth_header.as_ref()) {
                Some(t) => t,
                None => {
                    return Err(actix_web::error::ErrorUnauthorized(
                        "Authorization header missing or invalid"
                    ));
                }
            };
            
            match validate_jwt(&token, &jwt_secret) {
                Ok(user_id) => {
                    // Add user_id to request extensions
                    req.extensions_mut().insert(user_id);
                    service.call(req).await
                },
                Err(e) => {
                    Err(actix_web::error::ErrorUnauthorized(e.to_string()))
                }
            }
        })
    }
}

fn extract_token_from_header(header: Option<&HeaderValue>) -> Option<String> {
    header.and_then(|h| {
        let header_str = h.to_str().ok()?;
        if header_str.starts_with("Bearer ") {
            Some(header_str[7..].to_string())
        } else {
            None
        }
    })
}



================================================
File: src/middleware/auth_fixed.rs
================================================
use actix_web::{
    dev::{forward_ready, Service, ServiceRequest, ServiceResponse, Transform},
    http::header::HeaderValue,
    web, Error, HttpMessage,
};
use futures::future::{ready, LocalBoxFuture, Ready};
use std::rc::Rc;
use std::fs;
use uuid::Uuid;

use crate::utils::auth::validate_jwt;

pub struct Auth;

impl<S, B> Transform<S, ServiceRequest> for Auth
where
    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,
    S::Future: 'static,
    B: 'static,
{
    type Response = ServiceResponse<B>;
    type Error = Error;
    type Transform = AuthMiddleware<S>;
    type InitError = ();
    type Future = Ready<Result<Self::Transform, Self::InitError>>;

    fn new_transform(&self, service: S) -> Self::Future {
        ready(Ok(AuthMiddleware {
            service: Rc::new(service),
        }))
    }
}

pub struct AuthMiddleware<S> {
    service: Rc<S>,
}

impl<S, B> Service<ServiceRequest> for AuthMiddleware<S>
where
    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,
    S::Future: 'static,
    B: 'static,
{
    type Response = ServiceResponse<B>;
    type Error = Error;
    type Future = LocalBoxFuture<'static, Result<Self::Response, Self::Error>>;
    
    forward_ready!(service);
    
    fn call(&self, req: ServiceRequest) -> Self::Future {
        let service = Rc::clone(&self.service);
        
        // Read JWT secret from file directly
        let jwt_secret_result = fs::read_to_string("jwt_secret.txt");
        
        // Get authorization header
        let auth_header = req.headers().get("Authorization").cloned();
        
        Box::pin(async move {
            // Handle JWT secret read result
            let jwt_secret = match jwt_secret_result {
                Ok(secret) => secret.trim().to_string(), // Trim any whitespace
                Err(_) => {
                    return Err(actix_web::error::ErrorInternalServerError("Failed to read JWT secret"));
                }
            };
            
            let token = match extract_token_from_header(auth_header.as_ref()) {
                Some(t) => t,
                None => {
                    return Err(actix_web::error::ErrorUnauthorized(
                        "Authorization header missing or invalid"
                    ));
                }
            };
            
            // Validate and extract user ID from token
            match validate_jwt(&token, &jwt_secret) {
                Ok(user_id) => {
                    // Insert user_id as an app_data for handlers
                    req.app_data::<web::Data<Uuid>>()
                        .map(|current| {
                            *current.as_ref()
                        });
                    
                    // Add user_id to request extensions
                    req.extensions_mut().insert(user_id);
                    
                    service.call(req).await
                },
                Err(e) => {
                    Err(actix_web::error::ErrorUnauthorized(e.to_string()))
                }
            }
        })
    }
}

fn extract_token_from_header(header: Option<&HeaderValue>) -> Option<String> {
    header.and_then(|h| {
        let header_str = h.to_str().ok()?;
        if header_str.starts_with("Bearer ") {
            Some(header_str[7..].to_string())
        } else {
            None
        }
    })
}



================================================
File: src/middleware/mod.rs
================================================
pub mod auth;
pub mod auth_fixed;

// Use the fixed auth middleware by default
pub use auth_fixed::Auth;

// Other modules should import Auth directly from middleware module



================================================
File: src/models/account.rs
================================================
use chrono::{DateTime, Utc};
use serde::{Serialize, Deserialize};
use uuid::Uuid;
use bigdecimal::BigDecimal;
use std::str::FromStr;

#[derive(Debug, Serialize, Deserialize, sqlx::FromRow)]
pub struct Account {
    pub id: Uuid,
    pub user_id: Uuid,
    pub balance: BigDecimal,
    pub currency: String,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct AccountBalanceResponse {
    pub balance: f64,
    pub currency: String,
}

impl From<Account> for AccountBalanceResponse {
    fn from(account: Account) -> Self {
        // Convert BigDecimal to f64 for JSON serialization - safely parse the string value
        let balance_f64 = account.balance.to_string().parse::<f64>().unwrap_or(0.0);
        
        Self {
            balance: balance_f64,
            currency: account.currency,
        }
    }
}

// Helper function to convert f64 to BigDecimal
pub fn f64_to_bigdecimal(value: f64) -> Result<BigDecimal, String> {
    BigDecimal::from_str(&value.to_string())
        .map_err(|e| format!("Failed to convert to BigDecimal: {}", e))
}



================================================
File: src/models/error.rs
================================================
use actix_web::{ResponseError, HttpResponse};
use serde::Serialize;
use std::fmt;
use validator::ValidationErrors;

#[derive(Debug)]
pub enum AppError {
    InternalServerError(String),
    ValidationError(ValidationErrors),
    AuthenticationError(String),
    NotFoundError(String),
    ConflictError(String),
    BadRequestError(String),
}

#[derive(Serialize)]
pub struct ErrorResponse {
    pub status: String,
    pub message: String,
}

impl fmt::Display for AppError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            AppError::InternalServerError(msg) => write!(f, "Internal server error: {}", msg),
            AppError::ValidationError(_) => write!(f, "Validation error"),
            AppError::AuthenticationError(msg) => write!(f, "Authentication error: {}", msg),
            AppError::NotFoundError(msg) => write!(f, "Not found: {}", msg),
            AppError::ConflictError(msg) => write!(f, "Conflict: {}", msg),
            AppError::BadRequestError(msg) => write!(f, "Bad request: {}", msg),
        }
    }
}

impl ResponseError for AppError {
    fn error_response(&self) -> HttpResponse {
        match self {
            AppError::InternalServerError(msg) => {
                HttpResponse::InternalServerError().json(ErrorResponse {
                    status: "error".into(),
                    message: msg.clone(),
                })
            }
            AppError::ValidationError(errors) => {
                // Convert validation errors to a more user-friendly format
                let error_messages: Vec<String> = errors
                    .field_errors()
                    .iter()
                    .map(|(field, errors)| {
                        let messages: Vec<String> = errors
                            .iter()
                            .map(|error| error.message.as_ref().unwrap_or(&error.code).to_string())
                            .collect();
                        format!("{}: {}", field, messages.join(", "))
                    })
                    .collect();

                HttpResponse::BadRequest().json(ErrorResponse {
                    status: "error".into(),
                    message: error_messages.join("; "),
                })
            }
            AppError::AuthenticationError(msg) => {
                HttpResponse::Unauthorized().json(ErrorResponse {
                    status: "error".into(),
                    message: msg.clone(),
                })
            }
            AppError::NotFoundError(msg) => {
                HttpResponse::NotFound().json(ErrorResponse {
                    status: "error".into(),
                    message: msg.clone(),
                })
            }
            AppError::ConflictError(msg) => {
                HttpResponse::Conflict().json(ErrorResponse {
                    status: "error".into(),
                    message: msg.clone(),
                })
            }
            AppError::BadRequestError(msg) => {
                HttpResponse::BadRequest().json(ErrorResponse {
                    status: "error".into(),
                    message: msg.clone(),
                })
            }
        }
    }
}

impl From<sqlx::Error> for AppError {
    fn from(err: sqlx::Error) -> Self {
        match err {
            sqlx::Error::RowNotFound => AppError::NotFoundError("Resource not found".into()),
            sqlx::Error::Database(db_err) => {
                if let Some(code) = db_err.code() {
                    if code.as_ref() == "23505" {
                        // Unique violation
                        return AppError::ConflictError("Resource already exists".into());
                    }
                }
                AppError::InternalServerError(format!("Database error: {}", db_err))
            }
            _ => AppError::InternalServerError(format!("Database error: {}", err)),
        }
    }
}

impl From<ValidationErrors> for AppError {
    fn from(errors: ValidationErrors) -> Self {
        AppError::ValidationError(errors)
    }
}



================================================
File: src/models/mod.rs
================================================
pub mod user;
pub mod transaction_fixed;
pub mod account;
pub mod error;

// Re-exports - explicit to avoid ambiguity
pub use user::{User, UserResponse, LoginUserRequest, RegisterUserRequest, TokenResponse};
pub use transaction_fixed::{Transaction, TransactionResponse, TransactionListResponse, TransactionStatus, CreateTransactionRequest};
pub use account::{Account, AccountBalanceResponse};
pub use error::*;



================================================
File: src/models/token_compact.rs
================================================
use actix_web::{web, HttpResponse, Responder};
use serde::{Serialize, Deserialize};
use uuid::Uuid;

// Fixed token structure for proper JSON serialization
#[derive(Debug, Serialize, Deserialize)]
pub struct TokenResponseFixed {
    pub token: String,
    pub token_type: String,
}

impl TokenResponseFixed {
    pub fn new(token: String) -> Self {
        Self {
            token,
            token_type: "Bearer".to_string(),
        }
    }
}

// Wrapper for token response
pub async fn json_token_response(token: String) -> impl Responder {
    let token_response = TokenResponseFixed::new(token);
    
    // Use HttpResponse to ensure proper serialization
    HttpResponse::Ok()
        .content_type("application/json")
        .json(token_response)
}



================================================
File: src/models/token_fixed.rs
================================================
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct TokenResponse {
    pub token: String,
    pub token_type: String,
}

impl TokenResponse {
    pub fn new(token: String) -> Self {
        Self {
            token,
            token_type: "Bearer".to_string(),
        }
    }
}



================================================
File: src/models/transaction.rs
================================================
use chrono::{DateTime, Utc};
use serde::{Serialize, Deserialize};
use uuid::Uuid;
use validator::Validate;
use bigdecimal::BigDecimal;

#[derive(Debug, Serialize, Deserialize, sqlx::FromRow)]
pub struct Transaction {
    pub id: Uuid,
    pub sender_id: Uuid,
    pub recipient_id: Uuid,
    pub amount: BigDecimal,
    pub currency: String,
    pub status: TransactionStatus,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize, sqlx::Type)]
#[sqlx(type_name = "transaction_status", rename_all = "lowercase")]
pub enum TransactionStatus {
    Pending,
    Completed,
    Failed,
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct CreateTransactionRequest {
    pub recipient_id: Uuid,
    
    #[validate(range(min = 0.01, message = "amount must be greater than 0"))]
    pub amount: f64,
    
    #[validate(length(min = 3, max = 3, message = "currency must be a 3-letter code"))]
    pub currency: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TransactionResponse {
    pub id: Uuid,
    pub sender_id: Uuid,
    pub recipient_id: Uuid,
    pub amount: f64,
    pub currency: String,
    pub status: String,
    pub created_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TransactionListResponse {
    pub transactions: Vec<TransactionResponse>,
    pub total: i64,
    pub page: i64,
    pub per_page: i64,
}

impl From<Transaction> for TransactionResponse {
    fn from(transaction: Transaction) -> Self {
        Self {
            id: transaction.id,
            sender_id: transaction.sender_id,
            recipient_id: transaction.recipient_id,
            amount: transaction.amount.to_string().parse().unwrap_or(0.0),
            currency: transaction.currency,
            status: format!("{:?}", transaction.status).to_lowercase(),
            created_at: transaction.created_at,
        }
    }
}



================================================
File: src/models/transaction_fixed.rs
================================================
use chrono::{DateTime, Utc};
use serde::{Serialize, Deserialize};
use uuid::Uuid;
use validator::Validate;
use bigdecimal::BigDecimal;
use std::str::FromStr;

#[derive(Debug, Serialize, Deserialize, sqlx::FromRow)]
pub struct Transaction {
    pub id: Uuid,
    pub sender_id: Uuid,
    pub recipient_id: Uuid,
    pub amount: BigDecimal,
    pub currency: String,
    pub status: TransactionStatus,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize, sqlx::Type)]
#[sqlx(type_name = "transaction_status", rename_all = "lowercase")]
pub enum TransactionStatus {
    Pending,
    Completed,
    Failed,
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct CreateTransactionRequest {
    pub recipient_id: Uuid,
    
    #[validate(range(min = 0.01, message = "amount must be greater than 0"))]
    pub amount: f64,
    
    #[validate(length(min = 3, max = 3, message = "currency must be a 3-letter code"))]
    pub currency: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TransactionResponse {
    pub id: Uuid,
    pub sender_id: Uuid,
    pub recipient_id: Uuid,
    pub amount: f64,
    pub currency: String,
    pub status: String,
    pub created_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TransactionListResponse {
    pub transactions: Vec<TransactionResponse>,
    pub total: i64,
    pub page: i64,
    pub per_page: i64,
}

impl From<Transaction> for TransactionResponse {
    fn from(transaction: Transaction) -> Self {
        // Safely convert BigDecimal to f64
        let amount_f64 = transaction.amount.to_string().parse::<f64>().unwrap_or(0.0);
        
        Self {
            id: transaction.id,
            sender_id: transaction.sender_id,
            recipient_id: transaction.recipient_id,
            amount: amount_f64,
            currency: transaction.currency,
            status: format!("{:?}", transaction.status).to_lowercase(),
            created_at: transaction.created_at,
        }
    }
}

// Helper function to convert f64 to BigDecimal
pub fn f64_to_bigdecimal(value: f64) -> Result<BigDecimal, String> {
    BigDecimal::from_str(&value.to_string())
        .map_err(|e| format!("Failed to convert to BigDecimal: {}", e))
}



================================================
File: src/models/user.rs
================================================
use chrono::{DateTime, Utc};
use serde::{Serialize, Deserialize};
use uuid::Uuid;
use validator::Validate;

#[derive(Debug, Serialize, Deserialize, sqlx::FromRow)]
pub struct User {
    pub id: Uuid,
    pub username: String,
    #[serde(skip_serializing)]
    pub password_hash: String,
    pub email: String,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct RegisterUserRequest {
    #[validate(length(min = 3, max = 50, message = "username must be between 3 and 50 characters"))]
    pub username: String,
    
    #[validate(email(message = "email must be a valid email address"))]
    pub email: String,
    
    #[validate(length(min = 8, message = "password must be at least 8 characters"))]
    pub password: String,
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct LoginUserRequest {
    #[validate(length(min = 3, max = 50, message = "username must be between 3 and 50 characters"))]
    pub username: String,
    
    #[validate(length(min = 1, message = "password cannot be empty"))]
    pub password: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UserResponse {
    pub id: Uuid,
    pub username: String,
    pub email: String,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

impl From<User> for UserResponse {
    fn from(user: User) -> Self {
        Self {
            id: user.id,
            username: user.username,
            email: user.email,
            created_at: user.created_at,
            updated_at: user.updated_at,
        }
    }
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TokenResponse {
    pub token: String,
    pub token_type: String,
}

impl TokenResponse {
    pub fn new(token: String) -> Self {
        Self {
            token,
            token_type: "Bearer".to_string(),
        }
    }
}



================================================
File: src/models/user.rs.fixed
================================================
use chrono::{DateTime, Utc};
use serde::{Serialize, Deserialize};
use uuid::Uuid;
use validator::Validate;

#[derive(Debug, Serialize, Deserialize, sqlx::FromRow)]
pub struct User {
    pub id: Uuid,
    pub username: String,
    #[serde(skip_serializing)]
    pub password_hash: String,
    pub email: String,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct RegisterUserRequest {
    #[validate(length(min = 3, max = 50, message = "username must be between 3 and 50 characters"))]
    pub username: String,
    
    #[validate(email(message = "email must be a valid email address"))]
    pub email: String,
    
    #[validate(length(min = 8, message = "password must be at least 8 characters"))]
    pub password: String,
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct LoginUserRequest {
    #[validate(length(min = 3, max = 50, message = "username must be between 3 and 50 characters"))]
    pub username: String,
    
    #[validate(length(min = 1, message = "password cannot be empty"))]
    pub password: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UserResponse {
    pub id: Uuid,
    pub username: String,
    pub email: String,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

impl From<User> for UserResponse {
    fn from(user: User) -> Self {
        Self {
            id: user.id,
            username: user.username,
            email: user.email,
            created_at: user.created_at,
            updated_at: user.updated_at,
        }
    }
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TokenResponse {
    pub token: String,
    pub token_type: String,
}

impl TokenResponse {
    pub fn new(token: String) -> Self {
        Self {
            token,
            token_type: "Bearer".to_string(),
        }
    }
}



================================================
File: src/utils/auth.rs
================================================
use argon2::{
    password_hash::{rand_core::OsRng, PasswordHash, PasswordHasher, PasswordVerifier, SaltString},
    Argon2,
};
use chrono::{Duration, Utc};
use jsonwebtoken::{decode, encode, DecodingKey, EncodingKey, Header, Validation};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

use crate::models::AppError;

#[derive(Debug, Serialize, Deserialize)]
pub struct Claims {
    pub sub: String,     // Subject (user ID)
    pub exp: usize,      // Expiration time (as UTC timestamp)
    pub iat: usize,      // Issued at (as UTC timestamp)
}

pub fn hash_password(password: &str) -> Result<String, AppError> {
    let salt = SaltString::generate(&mut OsRng);
    let argon2 = Argon2::default();
    
    argon2
        .hash_password(password.as_bytes(), &salt)
        .map(|hash| hash.to_string())
        .map_err(|e| AppError::InternalServerError(format!("Password hashing error: {}", e)))
}

pub fn verify_password(password: &str, hash: &str) -> Result<bool, AppError> {
    let parsed_hash = PasswordHash::new(hash)
        .map_err(|e| AppError::InternalServerError(format!("Password parsing error: {}", e)))?;
    
    let result = Argon2::default().verify_password(password.as_bytes(), &parsed_hash);
    Ok(result.is_ok())
}

pub fn generate_jwt(user_id: Uuid, secret: &str) -> Result<String, AppError> {
    let now = Utc::now();
    let iat = now.timestamp() as usize;
    let exp = (now + Duration::hours(24)).timestamp() as usize;
    
    let claims = Claims {
        sub: user_id.to_string(),
        exp,
        iat,
    };
    
    encode(
        &Header::default(),
        &claims,
        &EncodingKey::from_secret(secret.as_bytes()),
    )
    .map_err(|e| AppError::InternalServerError(format!("JWT generation error: {}", e)))
}

// Helper function used by middleware
pub fn validate_jwt(token: &str, secret: &str) -> Result<Uuid, AppError> {
    let decoded = decode::<Claims>(
        token,
        &DecodingKey::from_secret(secret.as_bytes()),
        &Validation::default(),
    )
    .map_err(|e| AppError::AuthenticationError(format!("Invalid token: {}", e)))?;
    
    Uuid::parse_str(&decoded.claims.sub)
        .map_err(|_| AppError::AuthenticationError("Invalid user ID in token".to_string()))
}

// Helper function used by handlers where we don't have the JWT secret as an argument
pub fn create_jwt(user_id: Uuid) -> Result<String, AppError> {
    let jwt_secret = std::fs::read_to_string("jwt_secret.txt")
        .map_err(|e| AppError::InternalServerError(format!("Failed to read JWT secret: {}", e)))?;
    
    generate_jwt(user_id, &jwt_secret)
}



================================================
File: src/utils/mod.rs
================================================
pub mod auth;

// No re-exports to avoid unused import warnings
// Other modules should import directly from auth module



================================================
File: tests/api_tests.rs
================================================



================================================
File: tests/auth_test.rs
================================================
use dodo_payments::models::User;
use dodo_payments::utils::auth::{generate_jwt, hash_password, validate_jwt, verify_password};
use chrono::Utc;
use uuid::Uuid;

#[cfg(test)]
mod tests {
    use super::*;

    fn create_test_user() -> User {
        User {
            id: Uuid::new_v4(),
            username: "testuser".to_string(),
            password_hash: "hash".to_string(),
            email: "test@example.com".to_string(),
            created_at: Utc::now(),
            updated_at: Utc::now(),
        }
    }

    #[test]
    fn test_password_hashing_and_verification() {
        let password = "my_secure_password";
        let hash = hash_password(password).expect("Failed to hash password");
        
        // Hash should not be the same as the original password
        assert_ne!(password, hash);
        
        // Verification should succeed with correct password
        let is_valid = verify_password(password, &hash).expect("Failed to verify password");
        assert!(is_valid);
        
        // Verification should fail with incorrect password
        let is_valid = verify_password("wrong_password", &hash).expect("Failed to verify password");
        assert!(!is_valid);
    }

    #[test]
    fn test_jwt_generation_and_validation() {
        let user = create_test_user();
        let secret = "test_secret";
        
        let token = generate_jwt(user.id, secret).expect("Failed to generate JWT");
        
        // Token should be a non-empty string
        assert!(!token.is_empty());
        
        // Token validation should succeed
        let user_id = validate_jwt(&token, secret).expect("Failed to validate JWT");
        
        // User ID should match
        assert_eq!(user.id, user_id);
        
        // Validation with wrong secret should fail
        let result = validate_jwt(&token, "wrong_secret");
        assert!(result.is_err());
    }
}



================================================
File: tests/user_api_test.rs
================================================
//! API integration tests for the Dodo Payments user endpoints
//! 
//! Note: These tests are designed to run with SQLX_OFFLINE=true
//! and don't require an active database connection.

use actix_web::{test, web, App, http, Error};
use actix_web::dev::{Service, ServiceResponse};
use sqlx::postgres::PgPoolOptions;
use actix_rt;
use uuid::Uuid;
use serde_json::json;
use actix_http::Request;
use bytes::Bytes;
use std::path::Path;
use std::fs;
use dotenv::dotenv;

use dodo_payments::{
    handlers,
    models::RegisterUserRequest,
};

#[cfg(test)]
mod api_tests {
    use super::*;
    
    // Setup function to create a test application instance
    async fn setup_test_app() -> (
        impl Service<Request, Response = ServiceResponse, Error = actix_web::Error>,
        sqlx::PgPool
    ) {
        // Set SQLX_OFFLINE mode for testing
        std::env::set_var("SQLX_OFFLINE", "true");
        
        // Load environment variables
        dotenv::dotenv().ok();
        
        // Create a database URL for tests
        let database_url = match std::env::var("SQLX_OFFLINE") {
            Ok(val) if val == "true" => "postgres://postgres:password@offline/dodo_payments_test",
            _ => "postgres://postgres:password@localhost:5433/dodo_payments_test"
        };
        
        // Create a database pool with SQLx offline mode
        let pool = match PgPoolOptions::new()
            .max_connections(5)
            .connect_lazy(database_url) {
                Ok(pool) => pool,
                Err(e) => {
                    eprintln!("Warning: Could not connect to database: {}. Using offline mode only.", e);
                    PgPoolOptions::new()
                        .max_connections(1)
                        .connect_lazy("postgres://offline_mode_only")
                        .expect("Failed to create offline pool")
                }
            };
        
        // Ensure JWT secret file exists
        if !std::path::Path::new("jwt_secret.txt").exists() {
            std::fs::write("jwt_secret.txt", "dodo_payments_test_secret")
                .expect("Failed to create test JWT secret file");
        }
        
        // Create test JWT secret
        let jwt_secret = web::Data::new("test_jwt_secret".to_string());
        
        // Create test app
        let app = test::init_service(
            App::new()
                .app_data(web::Data::new(pool.clone()))
                .app_data(jwt_secret.clone())
                .configure(handlers::config_routes)
        )
        .await;
        
        (app, pool)
    }

    // Helper function to cleanup test data after test
    async fn cleanup_test_data(pool: &sqlx::PgPool, username: &str) {
        // In SQLX_OFFLINE mode, we skip the actual execution
        if std::env::var("SQLX_OFFLINE").unwrap_or_default() == "true" {
            return;
        }
        
        let _ = sqlx::query("DELETE FROM users WHERE username = $1")
            .bind(username)
            .execute(pool)
            .await;
    }
    
    // Helper function to read response body
    async fn read_body(resp: ServiceResponse) -> Bytes {
        let body = resp.into_body();
        actix_web::body::to_bytes(body).await.unwrap()
    }

    // Simple sanity test that doesn't need a database connection
    #[actix_rt::test]
    async fn test_sanity() {
        // Simple test that always passes
        assert!(true);
    }
    
    // Health check endpoint test
    #[actix_rt::test]
    async fn test_health_endpoint() {
        let (app, _) = setup_test_app().await;
        
        let req = test::TestRequest::get()
            .uri("/api/health")
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        assert!(resp.status().is_success());
    }
    
    // User registration test
    #[actix_rt::test]
    async fn test_user_registration() {
        let (app, pool) = setup_test_app().await;
        
        // Generate a unique username for this test
        let unique_username = format!("testuser_{}", Uuid::new_v4());
        
        // Create test user data
        let user_data = RegisterUserRequest {
            username: unique_username.clone(),
            email: format!("{}@example.com", unique_username),
            password: "password123".to_string(),
        };
        
        // Register user
        let req = test::TestRequest::post()
            .uri("/api/users/register")
            .set_json(&user_data)
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        
        assert_eq!(resp.status(), http::StatusCode::CREATED);
        
        // Verify response body contains the username
        let body = read_body(resp).await;
        let json_response: serde_json::Value = serde_json::from_slice(&body).unwrap();
        
        assert_eq!(json_response["username"], unique_username);
        
        // Clean up test data
        cleanup_test_data(&pool, &unique_username).await;
    }
    
    // User login test
    #[actix_rt::test]
    async fn test_user_login() {
        let (app, pool) = setup_test_app().await;
        
        // Generate a unique username for this test
        let unique_username = format!("testuser_{}", Uuid::new_v4());
        
        // Register a user first
        let register_data = RegisterUserRequest {
            username: unique_username.clone(),
            email: format!("{}@example.com", unique_username),
            password: "password123".to_string(),
        };
        
        let req = test::TestRequest::post()
            .uri("/api/users/register")
            .set_json(&register_data)
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        assert_eq!(resp.status(), http::StatusCode::CREATED);
        
        // Now try to login
        let login_data = json!({
            "username": unique_username,
            "password": "password123"
        });
        
        let req = test::TestRequest::post()
            .uri("/api/users/login")
            .set_json(&login_data)
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        assert_eq!(resp.status(), http::StatusCode::OK);
        
        // Verify response contains a token
        let body = read_body(resp).await;
        let json_response: serde_json::Value = serde_json::from_slice(&body).unwrap();
        
        assert!(json_response["token"].as_str().is_some());
        
        // Clean up test data
        cleanup_test_data(&pool, &unique_username).await;
    }
    
    // Test invalid login
    #[actix_rt::test]
    async fn test_invalid_login() {
        let (app, _) = setup_test_app().await;
        
        // Try to login with invalid credentials
        let login_data = json!({
            "username": "nonexistent_user",
            "password": "wrong_password"
        });
        
        let req = test::TestRequest::post()
            .uri("/api/users/login")
            .set_json(&login_data)
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        assert_eq!(resp.status(), http::StatusCode::UNAUTHORIZED);
    }
    
    // Test profile retrieval
    #[actix_rt::test]
    async fn test_profile_retrieval() {
        let (app, pool) = setup_test_app().await;
        
        // Create and register a user
        let unique_username = format!("testuser_{}", Uuid::new_v4());
        let register_data = RegisterUserRequest {
            username: unique_username.clone(),
            email: format!("{}@example.com", unique_username),
            password: "password123".to_string(),
        };
        
        let req = test::TestRequest::post()
            .uri("/api/users/register")
            .set_json(&register_data)
            .to_request();
            
        app.call(req).await.unwrap();
        
        // Login to get JWT token
        let login_data = json!({
            "username": unique_username,
            "password": "password123"
        });
        
        let req = test::TestRequest::post()
            .uri("/api/users/login")
            .set_json(&login_data)
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        let body = read_body(resp).await;
        let json_response: serde_json::Value = serde_json::from_slice(&body).unwrap();
        let token = json_response["token"].as_str().unwrap();
        
        // Get profile with token
        let req = test::TestRequest::get()
            .uri("/api/users/profile")
            .insert_header(("Authorization", format!("Bearer {}", token)))
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        assert_eq!(resp.status(), http::StatusCode::OK);
        
        // Verify response contains user data
        let body = read_body(resp).await;
        let json_response: serde_json::Value = serde_json::from_slice(&body).unwrap();
        
        assert_eq!(json_response["username"], unique_username);
        
        // Clean up test data
        cleanup_test_data(&pool, &unique_username).await;
    }
    
    // Test account balance retrieval
    #[actix_rt::test]
    async fn test_account_balance() {
        let (app, pool) = setup_test_app().await;
        
        // Create and register a user
        let unique_username = format!("testuser_{}", Uuid::new_v4());
        let register_data = RegisterUserRequest {
            username: unique_username.clone(),
            email: format!("{}@example.com", unique_username),
            password: "password123".to_string(),
        };
        
        let req = test::TestRequest::post()
            .uri("/api/users/register")
            .set_json(&register_data)
            .to_request();
            
        app.call(req).await.unwrap();
        
        // Login to get JWT token
        let login_data = json!({
            "username": unique_username,
            "password": "password123"
        });
        
        let req = test::TestRequest::post()
            .uri("/api/users/login")
            .set_json(&login_data)
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        let body = read_body(resp).await;
        let json_response: serde_json::Value = serde_json::from_slice(&body).unwrap();
        let token = json_response["token"].as_str().unwrap();
        
        // Get account balance with token
        let req = test::TestRequest::get()
            .uri("/api/accounts/balance")
            .insert_header(("Authorization", format!("Bearer {}", token)))
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        assert_eq!(resp.status(), http::StatusCode::OK);
        
        // Verify response contains balance data
        let body = read_body(resp).await;
        let json_response: serde_json::Value = serde_json::from_slice(&body).unwrap();
        
        assert!(json_response["balance"].is_string());
        assert_eq!(json_response["currency"], "USD");
        
        // Clean up test data
        cleanup_test_data(&pool, &unique_username).await;
    }
    
    // Test transaction creation
    #[actix_rt::test]
    async fn test_transaction_creation() {
        let (app, pool) = setup_test_app().await;
        
        // Create sender
        let sender_username = format!("sender_{}", Uuid::new_v4());
        let sender_data = RegisterUserRequest {
            username: sender_username.clone(),
            email: format!("{}@example.com", sender_username),
            password: "password123".to_string(),
        };
        
        let req = test::TestRequest::post()
            .uri("/api/users/register")
            .set_json(&sender_data)
            .to_request();
            
        app.call(req).await.unwrap();
        
        // Create recipient
        let recipient_username = format!("recipient_{}", Uuid::new_v4());
        let recipient_data = RegisterUserRequest {
            username: recipient_username.clone(),
            email: format!("{}@example.com", recipient_username),
            password: "password123".to_string(),
        };
        
        let req = test::TestRequest::post()
            .uri("/api/users/register")
            .set_json(&recipient_data)
            .to_request();
            
        app.call(req).await.unwrap();
        
        // Login as sender
        let login_data = json!({
            "username": sender_username,
            "password": "password123"
        });
        
        let req = test::TestRequest::post()
            .uri("/api/users/login")
            .set_json(&login_data)
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        let body = read_body(resp).await;
        let json_response: serde_json::Value = serde_json::from_slice(&body).unwrap();
        let token = json_response["token"].as_str().unwrap();
        
        // Create transaction
        let transaction_data = json!({
            "recipient_username": recipient_username,
            "amount": "10.00",
            "description": "Test payment"
        });
        
        let req = test::TestRequest::post()
            .uri("/api/transactions")
            .insert_header(("Authorization", format!("Bearer {}", token)))
            .set_json(&transaction_data)
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        assert_eq!(resp.status(), http::StatusCode::CREATED);
        
        // Verify transaction was created
        let body = read_body(resp).await;
        let json_response: serde_json::Value = serde_json::from_slice(&body).unwrap();
        
        assert!(json_response["id"].is_string());
        assert_eq!(json_response["description"], "Test payment");
        
        // Clean up test data
        cleanup_test_data(&pool, &sender_username).await;
        cleanup_test_data(&pool, &recipient_username).await;
    }
    
    // Test listing transactions
    #[actix_rt::test]
    async fn test_transaction_listing() {
        let (app, pool) = setup_test_app().await;
        
        // Create sender
        let sender_username = format!("sender_{}", Uuid::new_v4());
        let sender_data = RegisterUserRequest {
            username: sender_username.clone(),
            email: format!("{}@example.com", sender_username),
            password: "password123".to_string(),
        };
        
        let req = test::TestRequest::post()
            .uri("/api/users/register")
            .set_json(&sender_data)
            .to_request();
            
        app.call(req).await.unwrap();
        
        // Create recipient
        let recipient_username = format!("recipient_{}", Uuid::new_v4());
        let recipient_data = RegisterUserRequest {
            username: recipient_username.clone(),
            email: format!("{}@example.com", recipient_username),
            password: "password123".to_string(),
        };
        
        let req = test::TestRequest::post()
            .uri("/api/users/register")
            .set_json(&recipient_data)
            .to_request();
            
        app.call(req).await.unwrap();
        
        // Login as sender
        let login_data = json!({
            "username": sender_username,
            "password": "password123"
        });
        
        let req = test::TestRequest::post()
            .uri("/api/users/login")
            .set_json(&login_data)
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        let body = read_body(resp).await;
        let json_response: serde_json::Value = serde_json::from_slice(&body).unwrap();
        let token = json_response["token"].as_str().unwrap();
        
        // Create transaction
        let transaction_data = json!({
            "recipient_username": recipient_username,
            "amount": "10.00",
            "description": "Test payment"
        });
        
        let req = test::TestRequest::post()
            .uri("/api/transactions")
            .insert_header(("Authorization", format!("Bearer {}", token)))
            .set_json(&transaction_data)
            .to_request();
            
        app.call(req).await.unwrap();
        
        // Get transactions
        let req = test::TestRequest::get()
            .uri("/api/transactions")
            .insert_header(("Authorization", format!("Bearer {}", token)))
            .to_request();
            
        let resp = app.call(req).await.unwrap();
        assert_eq!(resp.status(), http::StatusCode::OK);
        
        // Verify transactions list
        let body = read_body(resp).await;
        let json_response: serde_json::Value = serde_json::from_slice(&body).unwrap();
        
        assert!(json_response["transactions"].is_array());
        
        // Clean up test data
        cleanup_test_data(&pool, &sender_username).await;
        cleanup_test_data(&pool, &recipient_username).await;
    }
}



================================================
File: tests/user_api_test.rs.new
================================================



================================================
File: .sqlx/query-2c7d9d5c7caf4f20db35c2a8d5052ebd5b2d9bee14ad36c1999c03f15df68eee.json
================================================



================================================
File: .sqlx/sqlx-data.json
================================================
{
  "db": "PostgreSQL",
  "ea6e5800e4ad5b44e1d0a1eb5e2f622a1c89beeaedf79c3c2363b6fb7b8a415b": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": ["Uuid", "Numeric", "Text"]
      }
    },
    "query": "INSERT INTO accounts (user_id, balance, currency)\n        VALUES ($1, $2, $3)\n        "
  },
  "7b4b5b818b40cb78c177f05e13b277ef76102c1214c6280073f3a7e8a94ba4ef": {
    "describe": {
      "columns": [
        {
          "name": "username",
          "ordinal": 0,
          "type_info": "Text"
        }
      ],
      "nullable": [false],
      "parameters": {
        "Left": ["Text"]
      }
    },
    "query": "SELECT username FROM users WHERE username = $1"
  },
  "6bfb2ecf122bbd464809e5d9832f327138e8c0da9fce0bcb6c2dad76f9cb8e0a": {
    "describe": {
      "columns": [
        {
          "name": "email",
          "ordinal": 0,
          "type_info": "Text"
        }
      ],
      "nullable": [false],
      "parameters": {
        "Left": ["Text"]
      }
    },
    "query": "SELECT email FROM users WHERE email = $1"
  },
  "61662913b972193e7b8d0ea6c0e511b1c5ecc4fac6cf7e4ab79330b10d3bea4c": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "username",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "email",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "password_hash",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "created_at",
          "ordinal": 4,
          "type_info": "Timestamptz"
        },
        {
          "name": "updated_at",
          "ordinal": 5,
          "type_info": "Timestamptz"
        }
      ],
      "nullable": [false, false, false, false, false, false],
      "parameters": {
        "Left": ["Text", "Text", "Text"]
      }
    },
    "query": "\n        INSERT INTO users (username, email, password_hash)\n        VALUES ($1, $2, $3)\n        RETURNING id, username, email, password_hash, created_at, updated_at\n        "
  },
  "8a0c5684e5104fde7c0a96f4bf6a79cfb830313c06b7c0549beda3683622942c": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "username",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "email",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "password_hash",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "created_at",
          "ordinal": 4,
          "type_info": "Timestamptz"
        },
        {
          "name": "updated_at",
          "ordinal": 5,
          "type_info": "Timestamptz"
        }
      ],
      "nullable": [false, false, false, false, false, false],
      "parameters": {
        "Left": ["Text"]
      }
    },
    "query": "\n        SELECT id, username, email, password_hash, created_at, updated_at\n        FROM users\n        WHERE username = $1\n        "
  },
  "8b00ceb88cf29c1beadd043f17061fd5efbf99b72edd1c60473086fda9e920f2": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "username",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "email",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "created_at",
          "ordinal": 3,
          "type_info": "Timestamptz"
        },
        {
          "name": "updated_at",
          "ordinal": 4,
          "type_info": "Timestamptz"
        }
      ],
      "nullable": [false, false, false, false, false],
      "parameters": {
        "Left": ["Uuid"]
      }
    },
    "query": "\n        SELECT id, username, email, created_at, updated_at\n        FROM users\n        WHERE id = $1\n        "
  },
  "d87b6c9b0c7aa819a6e169286fb5fc5348b55081f3e3192e710ce73e0f53accc": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [false],
      "parameters": {
        "Left": ["Text", "Uuid"]
      }
    },
    "query": "SELECT id FROM users WHERE email = $1 AND id != $2"
  },
  "fda15a5898a1f694107c42a7081f7b773e16e90340e0363421d4114a45f51a08": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": ["Text", "Uuid"]
      }
    },
    "query": "UPDATE users SET email = $1, updated_at = NOW() WHERE id = $2"
  }
}


